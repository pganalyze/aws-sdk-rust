// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Filtering options for <i>ListGroupsForEntity</i> operation. This is only used as input to Operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGroupsForEntityFilters  {
    /// <p>Filters only group names that start with the provided name prefix.</p>
    pub group_name_prefix: ::std::option::Option<::std::string::String>,
}
impl  ListGroupsForEntityFilters  {
    /// <p>Filters only group names that start with the provided name prefix.</p>
    pub fn group_name_prefix(&self) -> ::std::option::Option<& str> {
        self.group_name_prefix.as_deref()
    }
}
impl ListGroupsForEntityFilters {
    /// Creates a new builder-style object to manufacture [`ListGroupsForEntityFilters`](crate::types::ListGroupsForEntityFilters).
    pub fn builder() -> crate::types::builders::ListGroupsForEntityFiltersBuilder {
        crate::types::builders::ListGroupsForEntityFiltersBuilder::default()
    }
}

/// A builder for [`ListGroupsForEntityFilters`](crate::types::ListGroupsForEntityFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListGroupsForEntityFiltersBuilder {
    pub(crate) group_name_prefix: ::std::option::Option<::std::string::String>,
}
impl ListGroupsForEntityFiltersBuilder {
    /// <p>Filters only group names that start with the provided name prefix.</p>
    pub fn group_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters only group names that start with the provided name prefix.</p>
    pub fn set_group_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name_prefix = input; self
    }
    /// <p>Filters only group names that start with the provided name prefix.</p>
    pub fn get_group_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name_prefix
    }
    /// Consumes the builder and constructs a [`ListGroupsForEntityFilters`](crate::types::ListGroupsForEntityFilters).
    pub fn build(self) -> crate::types::ListGroupsForEntityFilters {
        crate::types::ListGroupsForEntityFilters {
            group_name_prefix: self.group_name_prefix
            ,
        }
    }
}

