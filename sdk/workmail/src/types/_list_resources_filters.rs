// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filtering options for <i>ListResources</i> operation. This is only used as input to Operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourcesFilters  {
    /// <p>Filters only resource that start with the entered name prefix .</p>
    pub name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Filters only resource with the provided primary email prefix.</p>
    pub primary_email_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Filters only resource with the provided state.</p>
    pub state: ::std::option::Option<crate::types::EntityState>,
}
impl  ListResourcesFilters  {
    /// <p>Filters only resource that start with the entered name prefix .</p>
    pub fn name_prefix(&self) -> ::std::option::Option<& str> {
        self.name_prefix.as_deref()
    }
    /// <p>Filters only resource with the provided primary email prefix.</p>
    pub fn primary_email_prefix(&self) -> ::std::option::Option<& str> {
        self.primary_email_prefix.as_deref()
    }
    /// <p>Filters only resource with the provided state.</p>
    pub fn state(&self) -> ::std::option::Option<& crate::types::EntityState> {
        self.state.as_ref()
    }
}
impl ListResourcesFilters {
    /// Creates a new builder-style object to manufacture [`ListResourcesFilters`](crate::types::ListResourcesFilters).
    pub fn builder() -> crate::types::builders::ListResourcesFiltersBuilder {
        crate::types::builders::ListResourcesFiltersBuilder::default()
    }
}

/// A builder for [`ListResourcesFilters`](crate::types::ListResourcesFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListResourcesFiltersBuilder {
    pub(crate) name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) primary_email_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::EntityState>,
}
impl ListResourcesFiltersBuilder {
    /// <p>Filters only resource that start with the entered name prefix .</p>
    pub fn name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters only resource that start with the entered name prefix .</p>
    pub fn set_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_prefix = input; self
    }
    /// <p>Filters only resource that start with the entered name prefix .</p>
    pub fn get_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_prefix
    }
    /// <p>Filters only resource with the provided primary email prefix.</p>
    pub fn primary_email_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_email_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters only resource with the provided primary email prefix.</p>
    pub fn set_primary_email_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_email_prefix = input; self
    }
    /// <p>Filters only resource with the provided primary email prefix.</p>
    pub fn get_primary_email_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_email_prefix
    }
    /// <p>Filters only resource with the provided state.</p>
    pub fn state(mut self, input: crate::types::EntityState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters only resource with the provided state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::EntityState>) -> Self {
        self.state = input; self
    }
    /// <p>Filters only resource with the provided state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::EntityState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`ListResourcesFilters`](crate::types::ListResourcesFilters).
    pub fn build(self) -> crate::types::ListResourcesFilters {
        crate::types::ListResourcesFilters {
            name_prefix: self.name_prefix
            ,
            primary_email_prefix: self.primary_email_prefix
            ,
            state: self.state
            ,
        }
    }
}

