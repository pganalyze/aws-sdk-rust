// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The drift summary of the enabled control.</p> 
/// <p>AWS Control Tower expects the enabled control configuration to include all supported and governed Regions. If the enabled control differs from the expected configuration, it is defined to be in a state of drift. You can repair this drift by resetting the enabled control.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DriftStatusSummary  {
    /// <p> The drift status of the enabled control.</p> 
    /// <p>Valid values:</p> 
    /// <ul> 
    /// <li> <p> <code>DRIFTED</code>: The <code>enabledControl</code> deployed in this configuration doesn’t match the configuration that AWS Control Tower expected. </p> </li> 
    /// <li> <p> <code>IN_SYNC</code>: The <code>enabledControl</code> deployed in this configuration matches the configuration that AWS Control Tower expected.</p> </li> 
    /// <li> <p> <code>NOT_CHECKING</code>: AWS Control Tower does not check drift for this enabled control. Drift is not supported for the control type.</p> </li> 
    /// <li> <p> <code>UNKNOWN</code>: AWS Control Tower is not able to check the drift status for the enabled control. </p> </li> 
    /// </ul>
    pub drift_status: ::std::option::Option<crate::types::DriftStatus>,
}
impl  DriftStatusSummary  {
    /// <p> The drift status of the enabled control.</p> 
    /// <p>Valid values:</p> 
    /// <ul> 
    /// <li> <p> <code>DRIFTED</code>: The <code>enabledControl</code> deployed in this configuration doesn’t match the configuration that AWS Control Tower expected. </p> </li> 
    /// <li> <p> <code>IN_SYNC</code>: The <code>enabledControl</code> deployed in this configuration matches the configuration that AWS Control Tower expected.</p> </li> 
    /// <li> <p> <code>NOT_CHECKING</code>: AWS Control Tower does not check drift for this enabled control. Drift is not supported for the control type.</p> </li> 
    /// <li> <p> <code>UNKNOWN</code>: AWS Control Tower is not able to check the drift status for the enabled control. </p> </li> 
    /// </ul>
    pub fn drift_status(&self) -> ::std::option::Option<& crate::types::DriftStatus> {
        self.drift_status.as_ref()
    }
}
impl DriftStatusSummary {
    /// Creates a new builder-style object to manufacture [`DriftStatusSummary`](crate::types::DriftStatusSummary).
    pub fn builder() -> crate::types::builders::DriftStatusSummaryBuilder {
        crate::types::builders::DriftStatusSummaryBuilder::default()
    }
}

/// A builder for [`DriftStatusSummary`](crate::types::DriftStatusSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DriftStatusSummaryBuilder {
    pub(crate) drift_status: ::std::option::Option<crate::types::DriftStatus>,
}
impl DriftStatusSummaryBuilder {
    /// <p> The drift status of the enabled control.</p> 
    /// <p>Valid values:</p> 
    /// <ul> 
    /// <li> <p> <code>DRIFTED</code>: The <code>enabledControl</code> deployed in this configuration doesn’t match the configuration that AWS Control Tower expected. </p> </li> 
    /// <li> <p> <code>IN_SYNC</code>: The <code>enabledControl</code> deployed in this configuration matches the configuration that AWS Control Tower expected.</p> </li> 
    /// <li> <p> <code>NOT_CHECKING</code>: AWS Control Tower does not check drift for this enabled control. Drift is not supported for the control type.</p> </li> 
    /// <li> <p> <code>UNKNOWN</code>: AWS Control Tower is not able to check the drift status for the enabled control. </p> </li> 
    /// </ul>
    pub fn drift_status(mut self, input: crate::types::DriftStatus) -> Self {
        self.drift_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The drift status of the enabled control.</p> 
    /// <p>Valid values:</p> 
    /// <ul> 
    /// <li> <p> <code>DRIFTED</code>: The <code>enabledControl</code> deployed in this configuration doesn’t match the configuration that AWS Control Tower expected. </p> </li> 
    /// <li> <p> <code>IN_SYNC</code>: The <code>enabledControl</code> deployed in this configuration matches the configuration that AWS Control Tower expected.</p> </li> 
    /// <li> <p> <code>NOT_CHECKING</code>: AWS Control Tower does not check drift for this enabled control. Drift is not supported for the control type.</p> </li> 
    /// <li> <p> <code>UNKNOWN</code>: AWS Control Tower is not able to check the drift status for the enabled control. </p> </li> 
    /// </ul>
    pub fn set_drift_status(mut self, input: ::std::option::Option<crate::types::DriftStatus>) -> Self {
        self.drift_status = input; self
    }
    /// <p> The drift status of the enabled control.</p> 
    /// <p>Valid values:</p> 
    /// <ul> 
    /// <li> <p> <code>DRIFTED</code>: The <code>enabledControl</code> deployed in this configuration doesn’t match the configuration that AWS Control Tower expected. </p> </li> 
    /// <li> <p> <code>IN_SYNC</code>: The <code>enabledControl</code> deployed in this configuration matches the configuration that AWS Control Tower expected.</p> </li> 
    /// <li> <p> <code>NOT_CHECKING</code>: AWS Control Tower does not check drift for this enabled control. Drift is not supported for the control type.</p> </li> 
    /// <li> <p> <code>UNKNOWN</code>: AWS Control Tower is not able to check the drift status for the enabled control. </p> </li> 
    /// </ul>
    pub fn get_drift_status(&self) -> &::std::option::Option<crate::types::DriftStatus> {
        &self.drift_status
    }
    /// Consumes the builder and constructs a [`DriftStatusSummary`](crate::types::DriftStatusSummary).
    pub fn build(self) -> crate::types::DriftStatusSummary {
        crate::types::DriftStatusSummary {
            drift_status: self.drift_status
            ,
        }
    }
}

