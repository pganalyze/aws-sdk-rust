// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon Web Services account security credentials that allow interactions with Amazon GameLift resources. The credentials are temporary and valid for a limited time span. You can request fresh credentials at any time. </p> 
/// <p> Amazon Web Services security credentials consist of three parts: an access key ID, a secret access key, and a session token. You must use all three parts together to authenticate your access requests.</p> 
/// <p>You need Amazon Web Services credentials for the following tasks: </p> 
/// <ul> 
/// <li> <p>To upload a game server build directly to Amazon GameLift S3 storage using <code>CreateBuild</code>. To get access for this task, call <code>RequestUploadCredentials</code>.</p> </li> 
/// <li> <p>To remotely connect to an active Amazon GameLift fleet instances. To get remote access, call <code>GetComputeAccess</code>.</p> </li> 
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AwsCredentials  {
    /// <p>The access key ID that identifies the temporary security credentials. </p>
    pub access_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The secret access key that can be used to sign requests.</p>
    pub secret_access_key: ::std::option::Option<::std::string::String>,
    /// <p>The token that users must pass to the service API to use the temporary credentials. </p>
    pub session_token: ::std::option::Option<::std::string::String>,
}
impl  AwsCredentials  {
    /// <p>The access key ID that identifies the temporary security credentials. </p>
    pub fn access_key_id(&self) -> ::std::option::Option<& str> {
        self.access_key_id.as_deref()
    }
    /// <p>The secret access key that can be used to sign requests.</p>
    pub fn secret_access_key(&self) -> ::std::option::Option<& str> {
        self.secret_access_key.as_deref()
    }
    /// <p>The token that users must pass to the service API to use the temporary credentials. </p>
    pub fn session_token(&self) -> ::std::option::Option<& str> {
        self.session_token.as_deref()
    }
}
impl  ::std::fmt::Debug for AwsCredentials  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AwsCredentials");
        formatter.field("access_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_access_key", &"*** Sensitive Data Redacted ***");
        formatter.field("session_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AwsCredentials {
    /// Creates a new builder-style object to manufacture [`AwsCredentials`](crate::types::AwsCredentials).
    pub fn builder() -> crate::types::builders::AwsCredentialsBuilder {
        crate::types::builders::AwsCredentialsBuilder::default()
    }
}

/// A builder for [`AwsCredentials`](crate::types::AwsCredentials).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AwsCredentialsBuilder {
    pub(crate) access_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) secret_access_key: ::std::option::Option<::std::string::String>,
    pub(crate) session_token: ::std::option::Option<::std::string::String>,
}
impl AwsCredentialsBuilder {
    /// <p>The access key ID that identifies the temporary security credentials. </p>
    pub fn access_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access key ID that identifies the temporary security credentials. </p>
    pub fn set_access_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_key_id = input; self
    }
    /// <p>The access key ID that identifies the temporary security credentials. </p>
    pub fn get_access_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_key_id
    }
    /// <p>The secret access key that can be used to sign requests.</p>
    pub fn secret_access_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_access_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secret access key that can be used to sign requests.</p>
    pub fn set_secret_access_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_access_key = input; self
    }
    /// <p>The secret access key that can be used to sign requests.</p>
    pub fn get_secret_access_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_access_key
    }
    /// <p>The token that users must pass to the service API to use the temporary credentials. </p>
    pub fn session_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token that users must pass to the service API to use the temporary credentials. </p>
    pub fn set_session_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_token = input; self
    }
    /// <p>The token that users must pass to the service API to use the temporary credentials. </p>
    pub fn get_session_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_token
    }
    /// Consumes the builder and constructs a [`AwsCredentials`](crate::types::AwsCredentials).
    pub fn build(self) -> crate::types::AwsCredentials {
        crate::types::AwsCredentials {
            access_key_id: self.access_key_id
            ,
            secret_access_key: self.secret_access_key
            ,
            session_token: self.session_token
            ,
        }
    }
}
impl ::std::fmt::Debug for AwsCredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AwsCredentialsBuilder");
        formatter.field("access_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_access_key", &"*** Sensitive Data Redacted ***");
        formatter.field("session_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

