// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_accept_ranges_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Accept-Ranges");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_archive_description_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-archive-description");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub fn de_body_payload(body: &mut ::aws_smithy_types::body::SdkBody) -> std::result::Result<::aws_smithy_types::byte_stream::ByteStream, crate::operation::get_job_output::GetJobOutputError> {
    // replace the body with an empty body
                let body = std::mem::replace(body, ::aws_smithy_types::body::SdkBody::taken());
                Ok(::aws_smithy_types::byte_stream::ByteStream::new(body))
}

pub(crate) fn de_checksum_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-sha256-tree-hash");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_content_range_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Range");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_content_type_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type");
    ::aws_smithy_http::header::one_or_none(headers)
}

