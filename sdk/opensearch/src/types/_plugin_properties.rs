// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Basic information about the plugin.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginProperties  {
    /// <p>The name of the plugin.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the plugin.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The version of the plugin.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The name of the class to load.</p>
    pub class_name: ::std::option::Option<::std::string::String>,
    /// <p>The uncompressed size of the plugin.</p>
    pub uncompressed_size_in_bytes: ::std::option::Option<i64>,
}
impl  PluginProperties  {
    /// <p>The name of the plugin.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The description of the plugin.</p>
    pub fn description(&self) -> ::std::option::Option<& str> {
        self.description.as_deref()
    }
    /// <p>The version of the plugin.</p>
    pub fn version(&self) -> ::std::option::Option<& str> {
        self.version.as_deref()
    }
    /// <p>The name of the class to load.</p>
    pub fn class_name(&self) -> ::std::option::Option<& str> {
        self.class_name.as_deref()
    }
    /// <p>The uncompressed size of the plugin.</p>
    pub fn uncompressed_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.uncompressed_size_in_bytes
    }
}
impl PluginProperties {
    /// Creates a new builder-style object to manufacture [`PluginProperties`](crate::types::PluginProperties).
    pub fn builder() -> crate::types::builders::PluginPropertiesBuilder {
        crate::types::builders::PluginPropertiesBuilder::default()
    }
}

/// A builder for [`PluginProperties`](crate::types::PluginProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PluginPropertiesBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) class_name: ::std::option::Option<::std::string::String>,
    pub(crate) uncompressed_size_in_bytes: ::std::option::Option<i64>,
}
impl PluginPropertiesBuilder {
    /// <p>The name of the plugin.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the plugin.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the plugin.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the plugin.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the plugin.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input; self
    }
    /// <p>The description of the plugin.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The version of the plugin.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the plugin.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input; self
    }
    /// <p>The version of the plugin.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The name of the class to load.</p>
    pub fn class_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.class_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the class to load.</p>
    pub fn set_class_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.class_name = input; self
    }
    /// <p>The name of the class to load.</p>
    pub fn get_class_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.class_name
    }
    /// <p>The uncompressed size of the plugin.</p>
    pub fn uncompressed_size_in_bytes(mut self, input: i64) -> Self {
        self.uncompressed_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The uncompressed size of the plugin.</p>
    pub fn set_uncompressed_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.uncompressed_size_in_bytes = input; self
    }
    /// <p>The uncompressed size of the plugin.</p>
    pub fn get_uncompressed_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.uncompressed_size_in_bytes
    }
    /// Consumes the builder and constructs a [`PluginProperties`](crate::types::PluginProperties).
    pub fn build(self) -> crate::types::PluginProperties {
        crate::types::PluginProperties {
            name: self.name
            ,
            description: self.description
            ,
            version: self.version
            ,
            class_name: self.class_name
            ,
            uncompressed_size_in_bytes: self.uncompressed_size_in_bytes
            ,
        }
    }
}

