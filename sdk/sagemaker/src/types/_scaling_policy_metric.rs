// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metric for a scaling policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScalingPolicyMetric  {
    /// <p>The number of invocations sent to a model, normalized by <code>InstanceCount</code> in each ProductionVariant. <code>1/numberOfInstances</code> is sent as the value on each request, where <code>numberOfInstances</code> is the number of active instances for the ProductionVariant behind the endpoint at the time of the request.</p>
    pub invocations_per_instance: ::std::option::Option<i32>,
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. This interval includes the local communication times taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub model_latency: ::std::option::Option<i32>,
}
impl  ScalingPolicyMetric  {
    /// <p>The number of invocations sent to a model, normalized by <code>InstanceCount</code> in each ProductionVariant. <code>1/numberOfInstances</code> is sent as the value on each request, where <code>numberOfInstances</code> is the number of active instances for the ProductionVariant behind the endpoint at the time of the request.</p>
    pub fn invocations_per_instance(&self) -> ::std::option::Option<i32> {
        self.invocations_per_instance
    }
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. This interval includes the local communication times taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn model_latency(&self) -> ::std::option::Option<i32> {
        self.model_latency
    }
}
impl ScalingPolicyMetric {
    /// Creates a new builder-style object to manufacture [`ScalingPolicyMetric`](crate::types::ScalingPolicyMetric).
    pub fn builder() -> crate::types::builders::ScalingPolicyMetricBuilder {
        crate::types::builders::ScalingPolicyMetricBuilder::default()
    }
}

/// A builder for [`ScalingPolicyMetric`](crate::types::ScalingPolicyMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScalingPolicyMetricBuilder {
    pub(crate) invocations_per_instance: ::std::option::Option<i32>,
    pub(crate) model_latency: ::std::option::Option<i32>,
}
impl ScalingPolicyMetricBuilder {
    /// <p>The number of invocations sent to a model, normalized by <code>InstanceCount</code> in each ProductionVariant. <code>1/numberOfInstances</code> is sent as the value on each request, where <code>numberOfInstances</code> is the number of active instances for the ProductionVariant behind the endpoint at the time of the request.</p>
    pub fn invocations_per_instance(mut self, input: i32) -> Self {
        self.invocations_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of invocations sent to a model, normalized by <code>InstanceCount</code> in each ProductionVariant. <code>1/numberOfInstances</code> is sent as the value on each request, where <code>numberOfInstances</code> is the number of active instances for the ProductionVariant behind the endpoint at the time of the request.</p>
    pub fn set_invocations_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.invocations_per_instance = input; self
    }
    /// <p>The number of invocations sent to a model, normalized by <code>InstanceCount</code> in each ProductionVariant. <code>1/numberOfInstances</code> is sent as the value on each request, where <code>numberOfInstances</code> is the number of active instances for the ProductionVariant behind the endpoint at the time of the request.</p>
    pub fn get_invocations_per_instance(&self) -> &::std::option::Option<i32> {
        &self.invocations_per_instance
    }
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. This interval includes the local communication times taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn model_latency(mut self, input: i32) -> Self {
        self.model_latency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. This interval includes the local communication times taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn set_model_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_latency = input; self
    }
    /// <p>The interval of time taken by a model to respond as viewed from SageMaker. This interval includes the local communication times taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.</p>
    pub fn get_model_latency(&self) -> &::std::option::Option<i32> {
        &self.model_latency
    }
    /// Consumes the builder and constructs a [`ScalingPolicyMetric`](crate::types::ScalingPolicyMetric).
    pub fn build(self) -> crate::types::ScalingPolicyMetric {
        crate::types::ScalingPolicyMetric {
            invocations_per_instance: self.invocations_per_instance
            ,
            model_latency: self.model_latency
            ,
        }
    }
}

