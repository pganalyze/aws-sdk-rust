// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The model deployment settings for the SageMaker Canvas application.</p> <note> 
/// <p>In order to enable model deployment for Canvas, the SageMaker Domain's or user profile's Amazon Web Services IAM execution role must have the <code>AmazonSageMakerCanvasDirectDeployAccess</code> policy attached. You can also turn on model deployment permissions through the SageMaker Domain's or user profile's settings in the SageMaker console.</p> 
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DirectDeploySettings  {
    /// <p>Describes whether model deployment permissions are enabled or disabled in the Canvas application.</p>
    pub status: ::std::option::Option<crate::types::FeatureStatus>,
}
impl  DirectDeploySettings  {
    /// <p>Describes whether model deployment permissions are enabled or disabled in the Canvas application.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::FeatureStatus> {
        self.status.as_ref()
    }
}
impl DirectDeploySettings {
    /// Creates a new builder-style object to manufacture [`DirectDeploySettings`](crate::types::DirectDeploySettings).
    pub fn builder() -> crate::types::builders::DirectDeploySettingsBuilder {
        crate::types::builders::DirectDeploySettingsBuilder::default()
    }
}

/// A builder for [`DirectDeploySettings`](crate::types::DirectDeploySettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DirectDeploySettingsBuilder {
    pub(crate) status: ::std::option::Option<crate::types::FeatureStatus>,
}
impl DirectDeploySettingsBuilder {
    /// <p>Describes whether model deployment permissions are enabled or disabled in the Canvas application.</p>
    pub fn status(mut self, input: crate::types::FeatureStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether model deployment permissions are enabled or disabled in the Canvas application.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.status = input; self
    }
    /// <p>Describes whether model deployment permissions are enabled or disabled in the Canvas application.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DirectDeploySettings`](crate::types::DirectDeploySettings).
    pub fn build(self) -> crate::types::DirectDeploySettings {
        crate::types::DirectDeploySettings {
            status: self.status
            ,
        }
    }
}

