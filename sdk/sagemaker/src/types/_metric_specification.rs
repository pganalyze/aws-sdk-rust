// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing information about a metric.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum MetricSpecification {
    /// <p>Information about a customized metric.</p>
    Customized(crate::types::CustomizedMetricSpecification),
    /// <p>Information about a predefined metric.</p>
    Predefined(crate::types::PredefinedMetricSpecification),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl MetricSpecification {
    /// Tries to convert the enum instance into [`Customized`](crate::types::MetricSpecification::Customized), extracting the inner [`CustomizedMetricSpecification`](crate::types::CustomizedMetricSpecification).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_customized(&self) -> ::std::result::Result<&crate::types::CustomizedMetricSpecification, &Self> {
        if let MetricSpecification::Customized(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Customized`](crate::types::MetricSpecification::Customized).
    pub fn is_customized(&self) -> bool {
        self.as_customized().is_ok()
    }
    /// Tries to convert the enum instance into [`Predefined`](crate::types::MetricSpecification::Predefined), extracting the inner [`PredefinedMetricSpecification`](crate::types::PredefinedMetricSpecification).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_predefined(&self) -> ::std::result::Result<&crate::types::PredefinedMetricSpecification, &Self> {
        if let MetricSpecification::Predefined(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Predefined`](crate::types::MetricSpecification::Predefined).
    pub fn is_predefined(&self) -> bool {
        self.as_predefined().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

