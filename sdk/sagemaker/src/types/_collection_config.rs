// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for your collection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum CollectionConfig {
    /// <p>Configuration for your vector collection type.</p> 
    /// <ul> 
    /// <li> <p> <code>Dimension</code>: The number of elements in your vector.</p> </li> 
    /// </ul>
    VectorConfig(crate::types::VectorConfig),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl CollectionConfig {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`VectorConfig`](crate::types::CollectionConfig::VectorConfig), extracting the inner [`VectorConfig`](crate::types::VectorConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_vector_config(&self) -> ::std::result::Result<&crate::types::VectorConfig, &Self> {
        if let CollectionConfig::VectorConfig(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`VectorConfig`](crate::types::CollectionConfig::VectorConfig).
    pub fn is_vector_config(&self) -> bool {
        self.as_vector_config().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

