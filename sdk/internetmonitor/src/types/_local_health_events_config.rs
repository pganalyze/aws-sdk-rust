// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.</p> 
/// <p>Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.</p> 
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview"> Change health event thresholds</a> in the Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocalHealthEventsConfig  {
    /// <p>The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub status: ::std::option::Option<crate::types::LocalHealthEventsConfigStatus>,
    /// <p>The health event threshold percentage set for a local health score.</p>
    pub health_score_threshold: f64,
    /// <p>The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.</p>
    pub min_traffic_impact: f64,
}
impl  LocalHealthEventsConfig  {
    /// <p>The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::LocalHealthEventsConfigStatus> {
        self.status.as_ref()
    }
    /// <p>The health event threshold percentage set for a local health score.</p>
    pub fn health_score_threshold(&self) -> f64 {
        self.health_score_threshold
    }
    /// <p>The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.</p>
    pub fn min_traffic_impact(&self) -> f64 {
        self.min_traffic_impact
    }
}
impl LocalHealthEventsConfig {
    /// Creates a new builder-style object to manufacture [`LocalHealthEventsConfig`](crate::types::LocalHealthEventsConfig).
    pub fn builder() -> crate::types::builders::LocalHealthEventsConfigBuilder {
        crate::types::builders::LocalHealthEventsConfigBuilder::default()
    }
}

/// A builder for [`LocalHealthEventsConfig`](crate::types::LocalHealthEventsConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LocalHealthEventsConfigBuilder {
    pub(crate) status: ::std::option::Option<crate::types::LocalHealthEventsConfigStatus>,
    pub(crate) health_score_threshold: ::std::option::Option<f64>,
    pub(crate) min_traffic_impact: ::std::option::Option<f64>,
}
impl LocalHealthEventsConfigBuilder {
    /// <p>The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn status(mut self, input: crate::types::LocalHealthEventsConfigStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LocalHealthEventsConfigStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LocalHealthEventsConfigStatus> {
        &self.status
    }
    /// <p>The health event threshold percentage set for a local health score.</p>
    pub fn health_score_threshold(mut self, input: f64) -> Self {
        self.health_score_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health event threshold percentage set for a local health score.</p>
    pub fn set_health_score_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.health_score_threshold = input; self
    }
    /// <p>The health event threshold percentage set for a local health score.</p>
    pub fn get_health_score_threshold(&self) -> &::std::option::Option<f64> {
        &self.health_score_threshold
    }
    /// <p>The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.</p>
    pub fn min_traffic_impact(mut self, input: f64) -> Self {
        self.min_traffic_impact = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.</p>
    pub fn set_min_traffic_impact(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_traffic_impact = input; self
    }
    /// <p>The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.</p>
    pub fn get_min_traffic_impact(&self) -> &::std::option::Option<f64> {
        &self.min_traffic_impact
    }
    /// Consumes the builder and constructs a [`LocalHealthEventsConfig`](crate::types::LocalHealthEventsConfig).
    pub fn build(self) -> crate::types::LocalHealthEventsConfig {
        crate::types::LocalHealthEventsConfig {
            status: self.status
            ,
            health_score_threshold: self.health_score_threshold
                .unwrap_or_default()
            ,
            min_traffic_impact: self.min_traffic_impact
                .unwrap_or_default()
            ,
        }
    }
}

