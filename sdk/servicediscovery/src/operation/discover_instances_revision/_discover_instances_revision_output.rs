// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DiscoverInstancesRevisionOutput  {
    /// <p>The increasing revision associated to the response Instances list. If a new instance is registered or deregistered, the <code>InstancesRevision</code> updates. The health status updates don't update <code>InstancesRevision</code>.</p>
    pub instances_revision: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl  DiscoverInstancesRevisionOutput  {
    /// <p>The increasing revision associated to the response Instances list. If a new instance is registered or deregistered, the <code>InstancesRevision</code> updates. The health status updates don't update <code>InstancesRevision</code>.</p>
    pub fn instances_revision(&self) -> ::std::option::Option<i64> {
        self.instances_revision
    }
}
impl ::aws_types::request_id::RequestId for DiscoverInstancesRevisionOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DiscoverInstancesRevisionOutput {
    /// Creates a new builder-style object to manufacture [`DiscoverInstancesRevisionOutput`](crate::operation::discover_instances_revision::DiscoverInstancesRevisionOutput).
    pub fn builder() -> crate::operation::discover_instances_revision::builders::DiscoverInstancesRevisionOutputBuilder {
        crate::operation::discover_instances_revision::builders::DiscoverInstancesRevisionOutputBuilder::default()
    }
}

/// A builder for [`DiscoverInstancesRevisionOutput`](crate::operation::discover_instances_revision::DiscoverInstancesRevisionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DiscoverInstancesRevisionOutputBuilder {
    pub(crate) instances_revision: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DiscoverInstancesRevisionOutputBuilder {
    /// <p>The increasing revision associated to the response Instances list. If a new instance is registered or deregistered, the <code>InstancesRevision</code> updates. The health status updates don't update <code>InstancesRevision</code>.</p>
    pub fn instances_revision(mut self, input: i64) -> Self {
        self.instances_revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The increasing revision associated to the response Instances list. If a new instance is registered or deregistered, the <code>InstancesRevision</code> updates. The health status updates don't update <code>InstancesRevision</code>.</p>
    pub fn set_instances_revision(mut self, input: ::std::option::Option<i64>) -> Self {
        self.instances_revision = input; self
    }
    /// <p>The increasing revision associated to the response Instances list. If a new instance is registered or deregistered, the <code>InstancesRevision</code> updates. The health status updates don't update <code>InstancesRevision</code>.</p>
    pub fn get_instances_revision(&self) -> &::std::option::Option<i64> {
        &self.instances_revision
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DiscoverInstancesRevisionOutput`](crate::operation::discover_instances_revision::DiscoverInstancesRevisionOutput).
    pub fn build(self) -> crate::operation::discover_instances_revision::DiscoverInstancesRevisionOutput {
        crate::operation::discover_instances_revision::DiscoverInstancesRevisionOutput {
            instances_revision: self.instances_revision
            ,
            _request_id: self._request_id,
        }
    }
}

