// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a redriven execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionRedrivenEventDetails  {
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub redrive_count: ::std::option::Option<i32>,
}
impl  ExecutionRedrivenEventDetails  {
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn redrive_count(&self) -> ::std::option::Option<i32> {
        self.redrive_count
    }
}
impl ExecutionRedrivenEventDetails {
    /// Creates a new builder-style object to manufacture [`ExecutionRedrivenEventDetails`](crate::types::ExecutionRedrivenEventDetails).
    pub fn builder() -> crate::types::builders::ExecutionRedrivenEventDetailsBuilder {
        crate::types::builders::ExecutionRedrivenEventDetailsBuilder::default()
    }
}

/// A builder for [`ExecutionRedrivenEventDetails`](crate::types::ExecutionRedrivenEventDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutionRedrivenEventDetailsBuilder {
    pub(crate) redrive_count: ::std::option::Option<i32>,
}
impl ExecutionRedrivenEventDetailsBuilder {
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn redrive_count(mut self, input: i32) -> Self {
        self.redrive_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn set_redrive_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.redrive_count = input; self
    }
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn get_redrive_count(&self) -> &::std::option::Option<i32> {
        &self.redrive_count
    }
    /// Consumes the builder and constructs a [`ExecutionRedrivenEventDetails`](crate::types::ExecutionRedrivenEventDetails).
    pub fn build(self) -> crate::types::ExecutionRedrivenEventDetails {
        crate::types::ExecutionRedrivenEventDetails {
            redrive_count: self.redrive_count
            ,
        }
    }
}

