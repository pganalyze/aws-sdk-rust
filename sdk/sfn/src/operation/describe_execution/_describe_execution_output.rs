// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeExecutionOutput  {
    /// <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
    pub execution_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the executed stated machine.</p>
    pub state_machine_arn: ::std::string::String,
    /// <p>The name of the execution.</p> 
    /// <p>A name must <i>not</i> contain:</p> 
    /// <ul> 
    /// <li> <p>white space</p> </li> 
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li> 
    /// <li> <p>wildcard characters <code>? *</code> </p> </li> 
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li> 
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li> 
    /// </ul> 
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the execution.</p>
    pub status: crate::types::ExecutionStatus,
    /// <p>The date the execution is started.</p>
    pub start_date: ::aws_smithy_types::DateTime,
    /// <p>If the execution ended, the date the execution stopped.</p>
    pub stop_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>Provides details about execution input or output.</p>
    pub input_details: ::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails>,
    /// <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p> <note> 
    /// <p>This field is set only if the execution succeeds. If the execution fails, this field is null.</p> 
    /// </note>
    pub output: ::std::option::Option<::std::string::String>,
    /// <p>Provides details about execution input or output.</p>
    pub output_details: ::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails>,
    /// <p>The X-Ray trace header that was passed to the execution.</p>
    pub trace_header: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that identifies a Map Run, which dispatched this execution.</p>
    pub map_run_arn: ::std::option::Option<::std::string::String>,
    /// <p>The error string if the state machine execution failed.</p>
    pub error: ::std::option::Option<::std::string::String>,
    /// <p>The cause string if the state machine execution failed.</p>
    pub cause: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the state machine version associated with the execution. The version ARN is a combination of state machine ARN and the version number separated by a colon (:). For example, <code>stateMachineARN:1</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request without specifying a state machine version or alias ARN, Step Functions returns a null value.</p>
    pub state_machine_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the state machine alias associated with the execution. The alias ARN is a combination of state machine ARN and the alias name separated by a colon (:). For example, <code>stateMachineARN:PROD</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request with a state machine version ARN, this field will be null.</p>
    pub state_machine_alias_arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub redrive_count: ::std::option::Option<i32>,
    /// <p>The date the execution was last redriven. If you have not yet redriven an execution, the <code>redriveDate</code> is null.</p> 
    /// <p>The <code>redriveDate</code> is unavailable if you redrive a Map Run that starts child workflow executions of type <code>EXPRESS</code>.</p>
    pub redrive_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether or not an execution can be redriven at a given point in time.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code> if calling the <code>RedriveExecution</code> API action would return the <code>ExecutionNotRedrivable</code> error.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> <p>You can redrive failed or timed out <code>EXPRESS</code> workflows <i>only if</i> they're a part of a Map Run. When you <a href="https://docs.aws.amazon.com/step-functions/latest/dg/redrive-map-run.html">redrive</a> the Map Run, these workflows are restarted using the <code>StartExecution</code> API action.</p> </li> 
    /// </ul>
    pub redrive_status: ::std::option::Option<crate::types::ExecutionRedriveStatus>,
    /// <p>When <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code>, <code>redriveStatusReason</code> specifies the reason why an execution cannot be redriven.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, or for a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatusReason</code> can include one of the following reasons:</p> 
    /// <ul> 
    /// <li> <p> <code>State machine is in DELETING status</code>.</p> </li> 
    /// <li> <p> <code>Execution is RUNNING and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution is SUCCEEDED and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution was started before the launch of RedriveExecution</code>.</p> </li> 
    /// <li> <p> <code>Execution history event limit exceeded</code>.</p> </li> 
    /// <li> <p> <code>Execution has exceeded the max execution time</code>.</p> </li> 
    /// <li> <p> <code>Execution redrivable period exceeded</code>.</p> </li> 
    /// </ul> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatusReason</code> is only returned if the child workflows are not redrivable. This happens when the child workflow executions have completed successfully.</p> </li> 
    /// </ul>
    pub redrive_status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl  DescribeExecutionOutput  {
    /// <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
    pub fn execution_arn(&self) -> & str {
        use std::ops::Deref; self.execution_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the executed stated machine.</p>
    pub fn state_machine_arn(&self) -> & str {
        use std::ops::Deref; self.state_machine_arn.deref()
    }
    /// <p>The name of the execution.</p> 
    /// <p>A name must <i>not</i> contain:</p> 
    /// <ul> 
    /// <li> <p>white space</p> </li> 
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li> 
    /// <li> <p>wildcard characters <code>? *</code> </p> </li> 
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li> 
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li> 
    /// </ul> 
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The current status of the execution.</p>
    pub fn status(&self) -> & crate::types::ExecutionStatus {
        &self.status
    }
    /// <p>The date the execution is started.</p>
    pub fn start_date(&self) -> & ::aws_smithy_types::DateTime {
        &self.start_date
    }
    /// <p>If the execution ended, the date the execution stopped.</p>
    pub fn stop_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.stop_date.as_ref()
    }
    /// <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(&self) -> ::std::option::Option<& str> {
        self.input.as_deref()
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn input_details(&self) -> ::std::option::Option<& crate::types::CloudWatchEventsExecutionDataDetails> {
        self.input_details.as_ref()
    }
    /// <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p> <note> 
    /// <p>This field is set only if the execution succeeds. If the execution fails, this field is null.</p> 
    /// </note>
    pub fn output(&self) -> ::std::option::Option<& str> {
        self.output.as_deref()
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn output_details(&self) -> ::std::option::Option<& crate::types::CloudWatchEventsExecutionDataDetails> {
        self.output_details.as_ref()
    }
    /// <p>The X-Ray trace header that was passed to the execution.</p>
    pub fn trace_header(&self) -> ::std::option::Option<& str> {
        self.trace_header.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that identifies a Map Run, which dispatched this execution.</p>
    pub fn map_run_arn(&self) -> ::std::option::Option<& str> {
        self.map_run_arn.as_deref()
    }
    /// <p>The error string if the state machine execution failed.</p>
    pub fn error(&self) -> ::std::option::Option<& str> {
        self.error.as_deref()
    }
    /// <p>The cause string if the state machine execution failed.</p>
    pub fn cause(&self) -> ::std::option::Option<& str> {
        self.cause.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine version associated with the execution. The version ARN is a combination of state machine ARN and the version number separated by a colon (:). For example, <code>stateMachineARN:1</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request without specifying a state machine version or alias ARN, Step Functions returns a null value.</p>
    pub fn state_machine_version_arn(&self) -> ::std::option::Option<& str> {
        self.state_machine_version_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine alias associated with the execution. The alias ARN is a combination of state machine ARN and the alias name separated by a colon (:). For example, <code>stateMachineARN:PROD</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request with a state machine version ARN, this field will be null.</p>
    pub fn state_machine_alias_arn(&self) -> ::std::option::Option<& str> {
        self.state_machine_alias_arn.as_deref()
    }
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn redrive_count(&self) -> ::std::option::Option<i32> {
        self.redrive_count
    }
    /// <p>The date the execution was last redriven. If you have not yet redriven an execution, the <code>redriveDate</code> is null.</p> 
    /// <p>The <code>redriveDate</code> is unavailable if you redrive a Map Run that starts child workflow executions of type <code>EXPRESS</code>.</p>
    pub fn redrive_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.redrive_date.as_ref()
    }
    /// <p>Indicates whether or not an execution can be redriven at a given point in time.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code> if calling the <code>RedriveExecution</code> API action would return the <code>ExecutionNotRedrivable</code> error.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> <p>You can redrive failed or timed out <code>EXPRESS</code> workflows <i>only if</i> they're a part of a Map Run. When you <a href="https://docs.aws.amazon.com/step-functions/latest/dg/redrive-map-run.html">redrive</a> the Map Run, these workflows are restarted using the <code>StartExecution</code> API action.</p> </li> 
    /// </ul>
    pub fn redrive_status(&self) -> ::std::option::Option<& crate::types::ExecutionRedriveStatus> {
        self.redrive_status.as_ref()
    }
    /// <p>When <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code>, <code>redriveStatusReason</code> specifies the reason why an execution cannot be redriven.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, or for a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatusReason</code> can include one of the following reasons:</p> 
    /// <ul> 
    /// <li> <p> <code>State machine is in DELETING status</code>.</p> </li> 
    /// <li> <p> <code>Execution is RUNNING and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution is SUCCEEDED and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution was started before the launch of RedriveExecution</code>.</p> </li> 
    /// <li> <p> <code>Execution history event limit exceeded</code>.</p> </li> 
    /// <li> <p> <code>Execution has exceeded the max execution time</code>.</p> </li> 
    /// <li> <p> <code>Execution redrivable period exceeded</code>.</p> </li> 
    /// </ul> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatusReason</code> is only returned if the child workflows are not redrivable. This happens when the child workflow executions have completed successfully.</p> </li> 
    /// </ul>
    pub fn redrive_status_reason(&self) -> ::std::option::Option<& str> {
        self.redrive_status_reason.as_deref()
    }
}
impl  ::std::fmt::Debug for DescribeExecutionOutput  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExecutionOutput");
        formatter.field("execution_arn", &self.execution_arn);
        formatter.field("state_machine_arn", &self.state_machine_arn);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("start_date", &self.start_date);
        formatter.field("stop_date", &self.stop_date);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("input_details", &self.input_details);
        formatter.field("output", &"*** Sensitive Data Redacted ***");
        formatter.field("output_details", &self.output_details);
        formatter.field("trace_header", &self.trace_header);
        formatter.field("map_run_arn", &self.map_run_arn);
        formatter.field("error", &"*** Sensitive Data Redacted ***");
        formatter.field("cause", &"*** Sensitive Data Redacted ***");
        formatter.field("state_machine_version_arn", &self.state_machine_version_arn);
        formatter.field("state_machine_alias_arn", &self.state_machine_alias_arn);
        formatter.field("redrive_count", &self.redrive_count);
        formatter.field("redrive_date", &self.redrive_date);
        formatter.field("redrive_status", &self.redrive_status);
        formatter.field("redrive_status_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for DescribeExecutionOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DescribeExecutionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExecutionOutput`](crate::operation::describe_execution::DescribeExecutionOutput).
    pub fn builder() -> crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder {
        crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder::default()
    }
}

/// A builder for [`DescribeExecutionOutput`](crate::operation::describe_execution::DescribeExecutionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DescribeExecutionOutputBuilder {
    pub(crate) execution_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state_machine_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stop_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) input_details: ::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails>,
    pub(crate) output: ::std::option::Option<::std::string::String>,
    pub(crate) output_details: ::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails>,
    pub(crate) trace_header: ::std::option::Option<::std::string::String>,
    pub(crate) map_run_arn: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<::std::string::String>,
    pub(crate) cause: ::std::option::Option<::std::string::String>,
    pub(crate) state_machine_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state_machine_alias_arn: ::std::option::Option<::std::string::String>,
    pub(crate) redrive_count: ::std::option::Option<i32>,
    pub(crate) redrive_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) redrive_status: ::std::option::Option<crate::types::ExecutionRedriveStatus>,
    pub(crate) redrive_status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeExecutionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
    /// This field is required.
    pub fn execution_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
    pub fn set_execution_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
    pub fn get_execution_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the executed stated machine.</p>
    /// This field is required.
    pub fn state_machine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_machine_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the executed stated machine.</p>
    pub fn set_state_machine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_machine_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the executed stated machine.</p>
    pub fn get_state_machine_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_machine_arn
    }
    /// <p>The name of the execution.</p> 
    /// <p>A name must <i>not</i> contain:</p> 
    /// <ul> 
    /// <li> <p>white space</p> </li> 
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li> 
    /// <li> <p>wildcard characters <code>? *</code> </p> </li> 
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li> 
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li> 
    /// </ul> 
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the execution.</p> 
    /// <p>A name must <i>not</i> contain:</p> 
    /// <ul> 
    /// <li> <p>white space</p> </li> 
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li> 
    /// <li> <p>wildcard characters <code>? *</code> </p> </li> 
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li> 
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li> 
    /// </ul> 
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the execution.</p> 
    /// <p>A name must <i>not</i> contain:</p> 
    /// <ul> 
    /// <li> <p>white space</p> </li> 
    /// <li> <p>brackets <code>&lt; &gt; { } [ ]</code> </p> </li> 
    /// <li> <p>wildcard characters <code>? *</code> </p> </li> 
    /// <li> <p>special characters <code>" # % \ ^ | ~ ` $ &amp; , ; : /</code> </p> </li> 
    /// <li> <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p> </li> 
    /// </ul> 
    /// <p>To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The current status of the execution.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExecutionStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The current status of the execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExecutionStatus> {
        &self.status
    }
    /// <p>The date the execution is started.</p>
    /// This field is required.
    pub fn start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the execution is started.</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date = input; self
    }
    /// <p>The date the execution is started.</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date
    }
    /// <p>If the execution ended, the date the execution stopped.</p>
    pub fn stop_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stop_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the execution ended, the date the execution stopped.</p>
    pub fn set_stop_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stop_date = input; self
    }
    /// <p>If the execution ended, the date the execution stopped.</p>
    pub fn get_stop_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stop_date
    }
    /// <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input; self
    }
    /// <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn input_details(mut self, input: crate::types::CloudWatchEventsExecutionDataDetails) -> Self {
        self.input_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn set_input_details(mut self, input: ::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails>) -> Self {
        self.input_details = input; self
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn get_input_details(&self) -> &::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails> {
        &self.input_details
    }
    /// <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p> <note> 
    /// <p>This field is set only if the execution succeeds. If the execution fails, this field is null.</p> 
    /// </note>
    pub fn output(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p> <note> 
    /// <p>This field is set only if the execution succeeds. If the execution fails, this field is null.</p> 
    /// </note>
    pub fn set_output(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output = input; self
    }
    /// <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p> <note> 
    /// <p>This field is set only if the execution succeeds. If the execution fails, this field is null.</p> 
    /// </note>
    pub fn get_output(&self) -> &::std::option::Option<::std::string::String> {
        &self.output
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn output_details(mut self, input: crate::types::CloudWatchEventsExecutionDataDetails) -> Self {
        self.output_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn set_output_details(mut self, input: ::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails>) -> Self {
        self.output_details = input; self
    }
    /// <p>Provides details about execution input or output.</p>
    pub fn get_output_details(&self) -> &::std::option::Option<crate::types::CloudWatchEventsExecutionDataDetails> {
        &self.output_details
    }
    /// <p>The X-Ray trace header that was passed to the execution.</p>
    pub fn trace_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_header = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The X-Ray trace header that was passed to the execution.</p>
    pub fn set_trace_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_header = input; self
    }
    /// <p>The X-Ray trace header that was passed to the execution.</p>
    pub fn get_trace_header(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_header
    }
    /// <p>The Amazon Resource Name (ARN) that identifies a Map Run, which dispatched this execution.</p>
    pub fn map_run_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.map_run_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies a Map Run, which dispatched this execution.</p>
    pub fn set_map_run_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.map_run_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies a Map Run, which dispatched this execution.</p>
    pub fn get_map_run_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.map_run_arn
    }
    /// <p>The error string if the state machine execution failed.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error string if the state machine execution failed.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input; self
    }
    /// <p>The error string if the state machine execution failed.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    /// <p>The cause string if the state machine execution failed.</p>
    pub fn cause(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cause = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cause string if the state machine execution failed.</p>
    pub fn set_cause(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cause = input; self
    }
    /// <p>The cause string if the state machine execution failed.</p>
    pub fn get_cause(&self) -> &::std::option::Option<::std::string::String> {
        &self.cause
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine version associated with the execution. The version ARN is a combination of state machine ARN and the version number separated by a colon (:). For example, <code>stateMachineARN:1</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request without specifying a state machine version or alias ARN, Step Functions returns a null value.</p>
    pub fn state_machine_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_machine_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine version associated with the execution. The version ARN is a combination of state machine ARN and the version number separated by a colon (:). For example, <code>stateMachineARN:1</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request without specifying a state machine version or alias ARN, Step Functions returns a null value.</p>
    pub fn set_state_machine_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_machine_version_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine version associated with the execution. The version ARN is a combination of state machine ARN and the version number separated by a colon (:). For example, <code>stateMachineARN:1</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request without specifying a state machine version or alias ARN, Step Functions returns a null value.</p>
    pub fn get_state_machine_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_machine_version_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine alias associated with the execution. The alias ARN is a combination of state machine ARN and the alias name separated by a colon (:). For example, <code>stateMachineARN:PROD</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request with a state machine version ARN, this field will be null.</p>
    pub fn state_machine_alias_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_machine_alias_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine alias associated with the execution. The alias ARN is a combination of state machine ARN and the alias name separated by a colon (:). For example, <code>stateMachineARN:PROD</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request with a state machine version ARN, this field will be null.</p>
    pub fn set_state_machine_alias_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_machine_alias_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the state machine alias associated with the execution. The alias ARN is a combination of state machine ARN and the alias name separated by a colon (:). For example, <code>stateMachineARN:PROD</code>.</p> 
    /// <p>If you start an execution from a <code>StartExecution</code> request with a state machine version ARN, this field will be null.</p>
    pub fn get_state_machine_alias_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_machine_alias_arn
    }
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn redrive_count(mut self, input: i32) -> Self {
        self.redrive_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn set_redrive_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.redrive_count = input; self
    }
    /// <p>The number of times you've redriven an execution. If you have not yet redriven an execution, the <code>redriveCount</code> is 0. This count is not updated for redrives that failed to start or are pending to be redriven.</p>
    pub fn get_redrive_count(&self) -> &::std::option::Option<i32> {
        &self.redrive_count
    }
    /// <p>The date the execution was last redriven. If you have not yet redriven an execution, the <code>redriveDate</code> is null.</p> 
    /// <p>The <code>redriveDate</code> is unavailable if you redrive a Map Run that starts child workflow executions of type <code>EXPRESS</code>.</p>
    pub fn redrive_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.redrive_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the execution was last redriven. If you have not yet redriven an execution, the <code>redriveDate</code> is null.</p> 
    /// <p>The <code>redriveDate</code> is unavailable if you redrive a Map Run that starts child workflow executions of type <code>EXPRESS</code>.</p>
    pub fn set_redrive_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.redrive_date = input; self
    }
    /// <p>The date the execution was last redriven. If you have not yet redriven an execution, the <code>redriveDate</code> is null.</p> 
    /// <p>The <code>redriveDate</code> is unavailable if you redrive a Map Run that starts child workflow executions of type <code>EXPRESS</code>.</p>
    pub fn get_redrive_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.redrive_date
    }
    /// <p>Indicates whether or not an execution can be redriven at a given point in time.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code> if calling the <code>RedriveExecution</code> API action would return the <code>ExecutionNotRedrivable</code> error.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> <p>You can redrive failed or timed out <code>EXPRESS</code> workflows <i>only if</i> they're a part of a Map Run. When you <a href="https://docs.aws.amazon.com/step-functions/latest/dg/redrive-map-run.html">redrive</a> the Map Run, these workflows are restarted using the <code>StartExecution</code> API action.</p> </li> 
    /// </ul>
    pub fn redrive_status(mut self, input: crate::types::ExecutionRedriveStatus) -> Self {
        self.redrive_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not an execution can be redriven at a given point in time.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code> if calling the <code>RedriveExecution</code> API action would return the <code>ExecutionNotRedrivable</code> error.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> <p>You can redrive failed or timed out <code>EXPRESS</code> workflows <i>only if</i> they're a part of a Map Run. When you <a href="https://docs.aws.amazon.com/step-functions/latest/dg/redrive-map-run.html">redrive</a> the Map Run, these workflows are restarted using the <code>StartExecution</code> API action.</p> </li> 
    /// </ul>
    pub fn set_redrive_status(mut self, input: ::std::option::Option<crate::types::ExecutionRedriveStatus>) -> Self {
        self.redrive_status = input; self
    }
    /// <p>Indicates whether or not an execution can be redriven at a given point in time.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code> if calling the <code>RedriveExecution</code> API action would return the <code>ExecutionNotRedrivable</code> error.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatus</code> indicates whether or not the Map Run can redrive child workflow executions.</p> <p>You can redrive failed or timed out <code>EXPRESS</code> workflows <i>only if</i> they're a part of a Map Run. When you <a href="https://docs.aws.amazon.com/step-functions/latest/dg/redrive-map-run.html">redrive</a> the Map Run, these workflows are restarted using the <code>StartExecution</code> API action.</p> </li> 
    /// </ul>
    pub fn get_redrive_status(&self) -> &::std::option::Option<crate::types::ExecutionRedriveStatus> {
        &self.redrive_status
    }
    /// <p>When <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code>, <code>redriveStatusReason</code> specifies the reason why an execution cannot be redriven.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, or for a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatusReason</code> can include one of the following reasons:</p> 
    /// <ul> 
    /// <li> <p> <code>State machine is in DELETING status</code>.</p> </li> 
    /// <li> <p> <code>Execution is RUNNING and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution is SUCCEEDED and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution was started before the launch of RedriveExecution</code>.</p> </li> 
    /// <li> <p> <code>Execution history event limit exceeded</code>.</p> </li> 
    /// <li> <p> <code>Execution has exceeded the max execution time</code>.</p> </li> 
    /// <li> <p> <code>Execution redrivable period exceeded</code>.</p> </li> 
    /// </ul> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatusReason</code> is only returned if the child workflows are not redrivable. This happens when the child workflow executions have completed successfully.</p> </li> 
    /// </ul>
    pub fn redrive_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redrive_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code>, <code>redriveStatusReason</code> specifies the reason why an execution cannot be redriven.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, or for a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatusReason</code> can include one of the following reasons:</p> 
    /// <ul> 
    /// <li> <p> <code>State machine is in DELETING status</code>.</p> </li> 
    /// <li> <p> <code>Execution is RUNNING and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution is SUCCEEDED and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution was started before the launch of RedriveExecution</code>.</p> </li> 
    /// <li> <p> <code>Execution history event limit exceeded</code>.</p> </li> 
    /// <li> <p> <code>Execution has exceeded the max execution time</code>.</p> </li> 
    /// <li> <p> <code>Execution redrivable period exceeded</code>.</p> </li> 
    /// </ul> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatusReason</code> is only returned if the child workflows are not redrivable. This happens when the child workflow executions have completed successfully.</p> </li> 
    /// </ul>
    pub fn set_redrive_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redrive_status_reason = input; self
    }
    /// <p>When <code>redriveStatus</code> is <code>NOT_REDRIVABLE</code>, <code>redriveStatusReason</code> specifies the reason why an execution cannot be redriven.</p> 
    /// <ul> 
    /// <li> <p>For executions of type <code>STANDARD</code>, or for a Distributed Map that includes child workflows of type <code>STANDARD</code>, <code>redriveStatusReason</code> can include one of the following reasons:</p> 
    /// <ul> 
    /// <li> <p> <code>State machine is in DELETING status</code>.</p> </li> 
    /// <li> <p> <code>Execution is RUNNING and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution is SUCCEEDED and cannot be redriven</code>.</p> </li> 
    /// <li> <p> <code>Execution was started before the launch of RedriveExecution</code>.</p> </li> 
    /// <li> <p> <code>Execution history event limit exceeded</code>.</p> </li> 
    /// <li> <p> <code>Execution has exceeded the max execution time</code>.</p> </li> 
    /// <li> <p> <code>Execution redrivable period exceeded</code>.</p> </li> 
    /// </ul> </li> 
    /// <li> <p>For a Distributed Map that includes child workflows of type <code>EXPRESS</code>, <code>redriveStatusReason</code> is only returned if the child workflows are not redrivable. This happens when the child workflow executions have completed successfully.</p> </li> 
    /// </ul>
    pub fn get_redrive_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.redrive_status_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DescribeExecutionOutput`](crate::operation::describe_execution::DescribeExecutionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`execution_arn`](crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder::execution_arn)
    /// - [`state_machine_arn`](crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder::state_machine_arn)
    /// - [`status`](crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder::status)
    /// - [`start_date`](crate::operation::describe_execution::builders::DescribeExecutionOutputBuilder::start_date)
    pub fn build(self) -> ::std::result::Result<crate::operation::describe_execution::DescribeExecutionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::describe_execution::DescribeExecutionOutput {
                execution_arn: self.execution_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("execution_arn", "execution_arn was not specified but it is required when building DescribeExecutionOutput")
                    )?
                ,
                state_machine_arn: self.state_machine_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("state_machine_arn", "state_machine_arn was not specified but it is required when building DescribeExecutionOutput")
                    )?
                ,
                name: self.name
                ,
                status: self.status
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("status", "status was not specified but it is required when building DescribeExecutionOutput")
                    )?
                ,
                start_date: self.start_date
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("start_date", "start_date was not specified but it is required when building DescribeExecutionOutput")
                    )?
                ,
                stop_date: self.stop_date
                ,
                input: self.input
                ,
                input_details: self.input_details
                ,
                output: self.output
                ,
                output_details: self.output_details
                ,
                trace_header: self.trace_header
                ,
                map_run_arn: self.map_run_arn
                ,
                error: self.error
                ,
                cause: self.cause
                ,
                state_machine_version_arn: self.state_machine_version_arn
                ,
                state_machine_alias_arn: self.state_machine_alias_arn
                ,
                redrive_count: self.redrive_count
                ,
                redrive_date: self.redrive_date
                ,
                redrive_status: self.redrive_status
                ,
                redrive_status_reason: self.redrive_status_reason
                ,
                _request_id: self._request_id,
            }
        )
    }
}
impl ::std::fmt::Debug for DescribeExecutionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExecutionOutputBuilder");
        formatter.field("execution_arn", &self.execution_arn);
        formatter.field("state_machine_arn", &self.state_machine_arn);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("start_date", &self.start_date);
        formatter.field("stop_date", &self.stop_date);
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("input_details", &self.input_details);
        formatter.field("output", &"*** Sensitive Data Redacted ***");
        formatter.field("output_details", &self.output_details);
        formatter.field("trace_header", &self.trace_header);
        formatter.field("map_run_arn", &self.map_run_arn);
        formatter.field("error", &"*** Sensitive Data Redacted ***");
        formatter.field("cause", &"*** Sensitive Data Redacted ***");
        formatter.field("state_machine_version_arn", &self.state_machine_version_arn);
        formatter.field("state_machine_alias_arn", &self.state_machine_alias_arn);
        formatter.field("redrive_count", &self.redrive_count);
        formatter.field("redrive_date", &self.redrive_date);
        formatter.field("redrive_status", &self.redrive_status);
        formatter.field("redrive_status_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}

