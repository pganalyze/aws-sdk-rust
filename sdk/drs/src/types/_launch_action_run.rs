// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Launch action run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchActionRun  {
    /// <p>Action.</p>
    pub action: ::std::option::Option<crate::types::LaunchAction>,
    /// <p>Run Id.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>Run status.</p>
    pub status: ::std::option::Option<crate::types::LaunchActionRunStatus>,
    /// <p>Failure reason.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl  LaunchActionRun  {
    /// <p>Action.</p>
    pub fn action(&self) -> ::std::option::Option<& crate::types::LaunchAction> {
        self.action.as_ref()
    }
    /// <p>Run Id.</p>
    pub fn run_id(&self) -> ::std::option::Option<& str> {
        self.run_id.as_deref()
    }
    /// <p>Run status.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::LaunchActionRunStatus> {
        self.status.as_ref()
    }
    /// <p>Failure reason.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<& str> {
        self.failure_reason.as_deref()
    }
}
impl LaunchActionRun {
    /// Creates a new builder-style object to manufacture [`LaunchActionRun`](crate::types::LaunchActionRun).
    pub fn builder() -> crate::types::builders::LaunchActionRunBuilder {
        crate::types::builders::LaunchActionRunBuilder::default()
    }
}

/// A builder for [`LaunchActionRun`](crate::types::LaunchActionRun).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchActionRunBuilder {
    pub(crate) action: ::std::option::Option<crate::types::LaunchAction>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LaunchActionRunStatus>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl LaunchActionRunBuilder {
    /// <p>Action.</p>
    pub fn action(mut self, input: crate::types::LaunchAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::LaunchAction>) -> Self {
        self.action = input; self
    }
    /// <p>Action.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::LaunchAction> {
        &self.action
    }
    /// <p>Run Id.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Run Id.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input; self
    }
    /// <p>Run Id.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>Run status.</p>
    pub fn status(mut self, input: crate::types::LaunchActionRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Run status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LaunchActionRunStatus>) -> Self {
        self.status = input; self
    }
    /// <p>Run status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LaunchActionRunStatus> {
        &self.status
    }
    /// <p>Failure reason.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Failure reason.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input; self
    }
    /// <p>Failure reason.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`LaunchActionRun`](crate::types::LaunchActionRun).
    pub fn build(self) -> crate::types::LaunchActionRun {
        crate::types::LaunchActionRun {
            action: self.action
            ,
            run_id: self.run_id
            ,
            status: self.status
            ,
            failure_reason: self.failure_reason
            ,
        }
    }
}

