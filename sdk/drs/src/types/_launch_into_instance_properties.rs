// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Launch into existing instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchIntoInstanceProperties  {
    /// <p>Optionally holds EC2 instance ID of an instance to launch into, instead of launching a new instance during drill, recovery or failback.</p>
    pub launch_into_ec2_instance_id: ::std::option::Option<::std::string::String>,
}
impl  LaunchIntoInstanceProperties  {
    /// <p>Optionally holds EC2 instance ID of an instance to launch into, instead of launching a new instance during drill, recovery or failback.</p>
    pub fn launch_into_ec2_instance_id(&self) -> ::std::option::Option<& str> {
        self.launch_into_ec2_instance_id.as_deref()
    }
}
impl LaunchIntoInstanceProperties {
    /// Creates a new builder-style object to manufacture [`LaunchIntoInstanceProperties`](crate::types::LaunchIntoInstanceProperties).
    pub fn builder() -> crate::types::builders::LaunchIntoInstancePropertiesBuilder {
        crate::types::builders::LaunchIntoInstancePropertiesBuilder::default()
    }
}

/// A builder for [`LaunchIntoInstanceProperties`](crate::types::LaunchIntoInstanceProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchIntoInstancePropertiesBuilder {
    pub(crate) launch_into_ec2_instance_id: ::std::option::Option<::std::string::String>,
}
impl LaunchIntoInstancePropertiesBuilder {
    /// <p>Optionally holds EC2 instance ID of an instance to launch into, instead of launching a new instance during drill, recovery or failback.</p>
    pub fn launch_into_ec2_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_into_ec2_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optionally holds EC2 instance ID of an instance to launch into, instead of launching a new instance during drill, recovery or failback.</p>
    pub fn set_launch_into_ec2_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_into_ec2_instance_id = input; self
    }
    /// <p>Optionally holds EC2 instance ID of an instance to launch into, instead of launching a new instance during drill, recovery or failback.</p>
    pub fn get_launch_into_ec2_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_into_ec2_instance_id
    }
    /// Consumes the builder and constructs a [`LaunchIntoInstanceProperties`](crate::types::LaunchIntoInstanceProperties).
    pub fn build(self) -> crate::types::LaunchIntoInstanceProperties {
        crate::types::LaunchIntoInstanceProperties {
            launch_into_ec2_instance_id: self.launch_into_ec2_instance_id
            ,
        }
    }
}

