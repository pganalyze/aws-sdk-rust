// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutLaunchActionOutput  {
    /// <p>Launch configuration template Id or Source Server Id</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>Launch action Id.</p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p>Launch action code.</p>
    pub action_code: ::std::option::Option<::std::string::String>,
    /// <p>Launch action type.</p>
    pub r#type: ::std::option::Option<crate::types::LaunchActionType>,
    /// <p>Launch action name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Whether the launch action is active.</p>
    pub active: ::std::option::Option<bool>,
    /// <p>Launch action order.</p>
    pub order: i32,
    /// <p>Launch action version.</p>
    pub action_version: ::std::option::Option<::std::string::String>,
    /// <p>Whether the launch will not be marked as failed if this action fails.</p>
    pub optional: ::std::option::Option<bool>,
    /// <p>Launch action parameters.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap::<::std::string::String, crate::types::LaunchActionParameter>>,
    /// <p>Launch action description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Launch action category.</p>
    pub category: ::std::option::Option<crate::types::LaunchActionCategory>,
    _request_id: Option<String>,
}
impl  PutLaunchActionOutput  {
    /// <p>Launch configuration template Id or Source Server Id</p>
    pub fn resource_id(&self) -> ::std::option::Option<& str> {
        self.resource_id.as_deref()
    }
    /// <p>Launch action Id.</p>
    pub fn action_id(&self) -> ::std::option::Option<& str> {
        self.action_id.as_deref()
    }
    /// <p>Launch action code.</p>
    pub fn action_code(&self) -> ::std::option::Option<& str> {
        self.action_code.as_deref()
    }
    /// <p>Launch action type.</p>
    pub fn r#type(&self) -> ::std::option::Option<& crate::types::LaunchActionType> {
        self.r#type.as_ref()
    }
    /// <p>Launch action name.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>Whether the launch action is active.</p>
    pub fn active(&self) -> ::std::option::Option<bool> {
        self.active
    }
    /// <p>Launch action order.</p>
    pub fn order(&self) -> i32 {
        self.order
    }
    /// <p>Launch action version.</p>
    pub fn action_version(&self) -> ::std::option::Option<& str> {
        self.action_version.as_deref()
    }
    /// <p>Whether the launch will not be marked as failed if this action fails.</p>
    pub fn optional(&self) -> ::std::option::Option<bool> {
        self.optional
    }
    /// <p>Launch action parameters.</p>
    pub fn parameters(&self) -> ::std::option::Option<& ::std::collections::HashMap::<::std::string::String, crate::types::LaunchActionParameter>> {
        self.parameters.as_ref()
    }
    /// <p>Launch action description.</p>
    pub fn description(&self) -> ::std::option::Option<& str> {
        self.description.as_deref()
    }
    /// <p>Launch action category.</p>
    pub fn category(&self) -> ::std::option::Option<& crate::types::LaunchActionCategory> {
        self.category.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for PutLaunchActionOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl PutLaunchActionOutput {
    /// Creates a new builder-style object to manufacture [`PutLaunchActionOutput`](crate::operation::put_launch_action::PutLaunchActionOutput).
    pub fn builder() -> crate::operation::put_launch_action::builders::PutLaunchActionOutputBuilder {
        crate::operation::put_launch_action::builders::PutLaunchActionOutputBuilder::default()
    }
}

/// A builder for [`PutLaunchActionOutput`](crate::operation::put_launch_action::PutLaunchActionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutLaunchActionOutputBuilder {
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_code: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::LaunchActionType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) active: ::std::option::Option<bool>,
    pub(crate) order: ::std::option::Option<i32>,
    pub(crate) action_version: ::std::option::Option<::std::string::String>,
    pub(crate) optional: ::std::option::Option<bool>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap::<::std::string::String, crate::types::LaunchActionParameter>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<crate::types::LaunchActionCategory>,
    _request_id: Option<String>,
}
impl PutLaunchActionOutputBuilder {
    /// <p>Launch configuration template Id or Source Server Id</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch configuration template Id or Source Server Id</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input; self
    }
    /// <p>Launch configuration template Id or Source Server Id</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>Launch action Id.</p>
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch action Id.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input; self
    }
    /// <p>Launch action Id.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>Launch action code.</p>
    pub fn action_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch action code.</p>
    pub fn set_action_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_code = input; self
    }
    /// <p>Launch action code.</p>
    pub fn get_action_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_code
    }
    /// <p>Launch action type.</p>
    pub fn r#type(mut self, input: crate::types::LaunchActionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Launch action type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::LaunchActionType>) -> Self {
        self.r#type = input; self
    }
    /// <p>Launch action type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::LaunchActionType> {
        &self.r#type
    }
    /// <p>Launch action name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch action name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>Launch action name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Whether the launch action is active.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the launch action is active.</p>
    pub fn set_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.active = input; self
    }
    /// <p>Whether the launch action is active.</p>
    pub fn get_active(&self) -> &::std::option::Option<bool> {
        &self.active
    }
    /// <p>Launch action order.</p>
    pub fn order(mut self, input: i32) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Launch action order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<i32>) -> Self {
        self.order = input; self
    }
    /// <p>Launch action order.</p>
    pub fn get_order(&self) -> &::std::option::Option<i32> {
        &self.order
    }
    /// <p>Launch action version.</p>
    pub fn action_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch action version.</p>
    pub fn set_action_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_version = input; self
    }
    /// <p>Launch action version.</p>
    pub fn get_action_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_version
    }
    /// <p>Whether the launch will not be marked as failed if this action fails.</p>
    pub fn optional(mut self, input: bool) -> Self {
        self.optional = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the launch will not be marked as failed if this action fails.</p>
    pub fn set_optional(mut self, input: ::std::option::Option<bool>) -> Self {
        self.optional = input; self
    }
    /// <p>Whether the launch will not be marked as failed if this action fails.</p>
    pub fn get_optional(&self) -> &::std::option::Option<bool> {
        &self.optional
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Launch action parameters.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::LaunchActionParameter) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
                        hash_map.insert(k.into(), v);
                        self.parameters = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>Launch action parameters.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, crate::types::LaunchActionParameter>>) -> Self {
        self.parameters = input; self
    }
    /// <p>Launch action parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, crate::types::LaunchActionParameter>> {
        &self.parameters
    }
    /// <p>Launch action description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch action description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input; self
    }
    /// <p>Launch action description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Launch action category.</p>
    pub fn category(mut self, input: crate::types::LaunchActionCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>Launch action category.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::LaunchActionCategory>) -> Self {
        self.category = input; self
    }
    /// <p>Launch action category.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::LaunchActionCategory> {
        &self.category
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`PutLaunchActionOutput`](crate::operation::put_launch_action::PutLaunchActionOutput).
    pub fn build(self) -> crate::operation::put_launch_action::PutLaunchActionOutput {
        crate::operation::put_launch_action::PutLaunchActionOutput {
            resource_id: self.resource_id
            ,
            action_id: self.action_id
            ,
            action_code: self.action_code
            ,
            r#type: self.r#type
            ,
            name: self.name
            ,
            active: self.active
            ,
            order: self.order
                .unwrap_or_default()
            ,
            action_version: self.action_version
            ,
            optional: self.optional
            ,
            parameters: self.parameters
            ,
            description: self.description
            ,
            category: self.category
            ,
            _request_id: self._request_id,
        }
    }
}

