// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information about the resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceInfo  {
    /// <p>The name of the resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p> The details related to the resource. </p>
    pub resource_details: ::std::option::Option<crate::types::ResourceDetails>,
    /// <p> Determines whether an application tag is applied or skipped. </p>
    pub options: ::std::option::Option<::std::vec::Vec::<crate::types::AssociationOption>>,
}
impl  ResourceInfo  {
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn resource_type(&self) -> ::std::option::Option<& crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p> The details related to the resource. </p>
    pub fn resource_details(&self) -> ::std::option::Option<& crate::types::ResourceDetails> {
        self.resource_details.as_ref()
    }
    /// <p> Determines whether an application tag is applied or skipped. </p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options.is_none()`.
    pub fn options(&self) -> & [crate::types::AssociationOption] {
        self.options.as_deref()
        .unwrap_or_default()
    }
}
impl ResourceInfo {
    /// Creates a new builder-style object to manufacture [`ResourceInfo`](crate::types::ResourceInfo).
    pub fn builder() -> crate::types::builders::ResourceInfoBuilder {
        crate::types::builders::ResourceInfoBuilder::default()
    }
}

/// A builder for [`ResourceInfo`](crate::types::ResourceInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceInfoBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_details: ::std::option::Option<crate::types::ResourceDetails>,
    pub(crate) options: ::std::option::Option<::std::vec::Vec::<crate::types::AssociationOption>>,
}
impl ResourceInfoBuilder {
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p>The Amazon resource name (ARN) that specifies the resource across services.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input; self
    }
    /// <p> Provides information about the Service Catalog App Registry resource type. </p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p> The details related to the resource. </p>
    pub fn resource_details(mut self, input: crate::types::ResourceDetails) -> Self {
        self.resource_details = ::std::option::Option::Some(input);
        self
    }
    /// <p> The details related to the resource. </p>
    pub fn set_resource_details(mut self, input: ::std::option::Option<crate::types::ResourceDetails>) -> Self {
        self.resource_details = input; self
    }
    /// <p> The details related to the resource. </p>
    pub fn get_resource_details(&self) -> &::std::option::Option<crate::types::ResourceDetails> {
        &self.resource_details
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p> Determines whether an application tag is applied or skipped. </p>
    pub fn options(mut self, input: crate::types::AssociationOption) -> Self {
        let mut v = self.options.unwrap_or_default();
                        v.push(input);
                        self.options = ::std::option::Option::Some(v);
                        self
    }
    /// <p> Determines whether an application tag is applied or skipped. </p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::AssociationOption>>) -> Self {
        self.options = input; self
    }
    /// <p> Determines whether an application tag is applied or skipped. </p>
    pub fn get_options(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::AssociationOption>> {
        &self.options
    }
    /// Consumes the builder and constructs a [`ResourceInfo`](crate::types::ResourceInfo).
    pub fn build(self) -> crate::types::ResourceInfo {
        crate::types::ResourceInfo {
            name: self.name
            ,
            arn: self.arn
            ,
            resource_type: self.resource_type
            ,
            resource_details: self.resource_details
            ,
            options: self.options
            ,
        }
    }
}

