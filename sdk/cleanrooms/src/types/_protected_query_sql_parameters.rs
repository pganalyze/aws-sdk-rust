// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for the SQL type Protected Query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ProtectedQuerySqlParameters  {
    /// <p>The query string to be submitted.</p>
    pub query_string: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) associated with the analysis template within a collaboration.</p>
    pub analysis_template_arn: ::std::option::Option<::std::string::String>,
    /// <p>The protected query SQL parameters.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
}
impl  ProtectedQuerySqlParameters  {
    /// <p>The query string to be submitted.</p>
    pub fn query_string(&self) -> ::std::option::Option<& str> {
        self.query_string.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) associated with the analysis template within a collaboration.</p>
    pub fn analysis_template_arn(&self) -> ::std::option::Option<& str> {
        self.analysis_template_arn.as_deref()
    }
    /// <p>The protected query SQL parameters.</p>
    pub fn parameters(&self) -> ::std::option::Option<& ::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
}
impl  ::std::fmt::Debug for ProtectedQuerySqlParameters  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProtectedQuerySqlParameters");
        formatter.field("query_string", &"*** Sensitive Data Redacted ***");
        formatter.field("analysis_template_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ProtectedQuerySqlParameters {
    /// Creates a new builder-style object to manufacture [`ProtectedQuerySqlParameters`](crate::types::ProtectedQuerySqlParameters).
    pub fn builder() -> crate::types::builders::ProtectedQuerySqlParametersBuilder {
        crate::types::builders::ProtectedQuerySqlParametersBuilder::default()
    }
}

/// A builder for [`ProtectedQuerySqlParameters`](crate::types::ProtectedQuerySqlParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ProtectedQuerySqlParametersBuilder {
    pub(crate) query_string: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
}
impl ProtectedQuerySqlParametersBuilder {
    /// <p>The query string to be submitted.</p>
    pub fn query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query string to be submitted.</p>
    pub fn set_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_string = input; self
    }
    /// <p>The query string to be submitted.</p>
    pub fn get_query_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_string
    }
    /// <p>The Amazon Resource Name (ARN) associated with the analysis template within a collaboration.</p>
    pub fn analysis_template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) associated with the analysis template within a collaboration.</p>
    pub fn set_analysis_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_template_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) associated with the analysis template within a collaboration.</p>
    pub fn get_analysis_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_template_arn
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The protected query SQL parameters.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
                        hash_map.insert(k.into(), v.into());
                        self.parameters = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>The protected query SQL parameters.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input; self
    }
    /// <p>The protected query SQL parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`ProtectedQuerySqlParameters`](crate::types::ProtectedQuerySqlParameters).
    pub fn build(self) -> crate::types::ProtectedQuerySqlParameters {
        crate::types::ProtectedQuerySqlParameters {
            query_string: self.query_string
            ,
            analysis_template_arn: self.analysis_template_arn
            ,
            parameters: self.parameters
            ,
        }
    }
}
impl ::std::fmt::Debug for ProtectedQuerySqlParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProtectedQuerySqlParametersBuilder");
        formatter.field("query_string", &"*** Sensitive Data Redacted ***");
        formatter.field("analysis_template_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

