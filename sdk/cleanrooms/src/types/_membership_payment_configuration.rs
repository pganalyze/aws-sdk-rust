// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the payment responsibilities accepted by the collaboration member.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MembershipPaymentConfiguration  {
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub query_compute: ::std::option::Option<crate::types::MembershipQueryComputePaymentConfig>,
}
impl  MembershipPaymentConfiguration  {
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub fn query_compute(&self) -> ::std::option::Option<& crate::types::MembershipQueryComputePaymentConfig> {
        self.query_compute.as_ref()
    }
}
impl MembershipPaymentConfiguration {
    /// Creates a new builder-style object to manufacture [`MembershipPaymentConfiguration`](crate::types::MembershipPaymentConfiguration).
    pub fn builder() -> crate::types::builders::MembershipPaymentConfigurationBuilder {
        crate::types::builders::MembershipPaymentConfigurationBuilder::default()
    }
}

/// A builder for [`MembershipPaymentConfiguration`](crate::types::MembershipPaymentConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MembershipPaymentConfigurationBuilder {
    pub(crate) query_compute: ::std::option::Option<crate::types::MembershipQueryComputePaymentConfig>,
}
impl MembershipPaymentConfigurationBuilder {
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    /// This field is required.
    pub fn query_compute(mut self, input: crate::types::MembershipQueryComputePaymentConfig) -> Self {
        self.query_compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub fn set_query_compute(mut self, input: ::std::option::Option<crate::types::MembershipQueryComputePaymentConfig>) -> Self {
        self.query_compute = input; self
    }
    /// <p>The payment responsibilities accepted by the collaboration member for query compute costs.</p>
    pub fn get_query_compute(&self) -> &::std::option::Option<crate::types::MembershipQueryComputePaymentConfig> {
        &self.query_compute
    }
    /// Consumes the builder and constructs a [`MembershipPaymentConfiguration`](crate::types::MembershipPaymentConfiguration).
    pub fn build(self) -> crate::types::MembershipPaymentConfiguration {
        crate::types::MembershipPaymentConfiguration {
            query_compute: self.query_compute
            ,
        }
    }
}

