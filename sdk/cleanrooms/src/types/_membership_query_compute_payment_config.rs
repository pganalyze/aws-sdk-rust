// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the payment responsibilities accepted by the collaboration member for query compute costs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MembershipQueryComputePaymentConfig  {
    /// <p>Indicates whether the collaboration member has accepted to pay for query compute costs (<code>TRUE</code>) or has not accepted to pay for query compute costs (<code>FALSE</code>).</p> 
    /// <p>If the collaboration creator has not specified anyone to pay for query compute costs, then the member who can query is the default payer. </p> 
    /// <p>An error message is returned for the following reasons: </p> 
    /// <ul> 
    /// <li> <p>If you set the value to <code>FALSE</code> but you are responsible to pay for query compute costs. </p> </li> 
    /// <li> <p>If you set the value to <code>TRUE</code> but you are not responsible to pay for query compute costs. </p> </li> 
    /// </ul>
    pub is_responsible: bool,
}
impl  MembershipQueryComputePaymentConfig  {
    /// <p>Indicates whether the collaboration member has accepted to pay for query compute costs (<code>TRUE</code>) or has not accepted to pay for query compute costs (<code>FALSE</code>).</p> 
    /// <p>If the collaboration creator has not specified anyone to pay for query compute costs, then the member who can query is the default payer. </p> 
    /// <p>An error message is returned for the following reasons: </p> 
    /// <ul> 
    /// <li> <p>If you set the value to <code>FALSE</code> but you are responsible to pay for query compute costs. </p> </li> 
    /// <li> <p>If you set the value to <code>TRUE</code> but you are not responsible to pay for query compute costs. </p> </li> 
    /// </ul>
    pub fn is_responsible(&self) -> bool {
        self.is_responsible
    }
}
impl MembershipQueryComputePaymentConfig {
    /// Creates a new builder-style object to manufacture [`MembershipQueryComputePaymentConfig`](crate::types::MembershipQueryComputePaymentConfig).
    pub fn builder() -> crate::types::builders::MembershipQueryComputePaymentConfigBuilder {
        crate::types::builders::MembershipQueryComputePaymentConfigBuilder::default()
    }
}

/// A builder for [`MembershipQueryComputePaymentConfig`](crate::types::MembershipQueryComputePaymentConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MembershipQueryComputePaymentConfigBuilder {
    pub(crate) is_responsible: ::std::option::Option<bool>,
}
impl MembershipQueryComputePaymentConfigBuilder {
    /// <p>Indicates whether the collaboration member has accepted to pay for query compute costs (<code>TRUE</code>) or has not accepted to pay for query compute costs (<code>FALSE</code>).</p> 
    /// <p>If the collaboration creator has not specified anyone to pay for query compute costs, then the member who can query is the default payer. </p> 
    /// <p>An error message is returned for the following reasons: </p> 
    /// <ul> 
    /// <li> <p>If you set the value to <code>FALSE</code> but you are responsible to pay for query compute costs. </p> </li> 
    /// <li> <p>If you set the value to <code>TRUE</code> but you are not responsible to pay for query compute costs. </p> </li> 
    /// </ul>
    /// This field is required.
    pub fn is_responsible(mut self, input: bool) -> Self {
        self.is_responsible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the collaboration member has accepted to pay for query compute costs (<code>TRUE</code>) or has not accepted to pay for query compute costs (<code>FALSE</code>).</p> 
    /// <p>If the collaboration creator has not specified anyone to pay for query compute costs, then the member who can query is the default payer. </p> 
    /// <p>An error message is returned for the following reasons: </p> 
    /// <ul> 
    /// <li> <p>If you set the value to <code>FALSE</code> but you are responsible to pay for query compute costs. </p> </li> 
    /// <li> <p>If you set the value to <code>TRUE</code> but you are not responsible to pay for query compute costs. </p> </li> 
    /// </ul>
    pub fn set_is_responsible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_responsible = input; self
    }
    /// <p>Indicates whether the collaboration member has accepted to pay for query compute costs (<code>TRUE</code>) or has not accepted to pay for query compute costs (<code>FALSE</code>).</p> 
    /// <p>If the collaboration creator has not specified anyone to pay for query compute costs, then the member who can query is the default payer. </p> 
    /// <p>An error message is returned for the following reasons: </p> 
    /// <ul> 
    /// <li> <p>If you set the value to <code>FALSE</code> but you are responsible to pay for query compute costs. </p> </li> 
    /// <li> <p>If you set the value to <code>TRUE</code> but you are not responsible to pay for query compute costs. </p> </li> 
    /// </ul>
    pub fn get_is_responsible(&self) -> &::std::option::Option<bool> {
        &self.is_responsible
    }
    /// Consumes the builder and constructs a [`MembershipQueryComputePaymentConfig`](crate::types::MembershipQueryComputePaymentConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`is_responsible`](crate::types::builders::MembershipQueryComputePaymentConfigBuilder::is_responsible)
    pub fn build(self) -> ::std::result::Result<crate::types::MembershipQueryComputePaymentConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::MembershipQueryComputePaymentConfig {
                is_responsible: self.is_responsible
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("is_responsible", "is_responsible was not specified but it is required when building MembershipQueryComputePaymentConfig")
                    )?
                ,
            }
        )
    }
}

