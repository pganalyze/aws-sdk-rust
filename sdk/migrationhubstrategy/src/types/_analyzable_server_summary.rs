// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Summary information about an analyzable server.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyzableServerSummary  {
    /// The host name of the analyzable server.
    pub hostname: ::std::option::Option<::std::string::String>,
    /// The ip address of the analyzable server.
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// The data source of the analyzable server.
    pub source: ::std::option::Option<::std::string::String>,
    /// The virtual machine id of the analyzable server.
    pub vm_id: ::std::option::Option<::std::string::String>,
}
impl  AnalyzableServerSummary  {
    /// The host name of the analyzable server.
    pub fn hostname(&self) -> ::std::option::Option<& str> {
        self.hostname.as_deref()
    }
    /// The ip address of the analyzable server.
    pub fn ip_address(&self) -> ::std::option::Option<& str> {
        self.ip_address.as_deref()
    }
    /// The data source of the analyzable server.
    pub fn source(&self) -> ::std::option::Option<& str> {
        self.source.as_deref()
    }
    /// The virtual machine id of the analyzable server.
    pub fn vm_id(&self) -> ::std::option::Option<& str> {
        self.vm_id.as_deref()
    }
}
impl AnalyzableServerSummary {
    /// Creates a new builder-style object to manufacture [`AnalyzableServerSummary`](crate::types::AnalyzableServerSummary).
    pub fn builder() -> crate::types::builders::AnalyzableServerSummaryBuilder {
        crate::types::builders::AnalyzableServerSummaryBuilder::default()
    }
}

/// A builder for [`AnalyzableServerSummary`](crate::types::AnalyzableServerSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyzableServerSummaryBuilder {
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) vm_id: ::std::option::Option<::std::string::String>,
}
impl AnalyzableServerSummaryBuilder {
    /// The host name of the analyzable server.
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// The host name of the analyzable server.
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input; self
    }
    /// The host name of the analyzable server.
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// The ip address of the analyzable server.
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// The ip address of the analyzable server.
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input; self
    }
    /// The ip address of the analyzable server.
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// The data source of the analyzable server.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// The data source of the analyzable server.
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input; self
    }
    /// The data source of the analyzable server.
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// The virtual machine id of the analyzable server.
    pub fn vm_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vm_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The virtual machine id of the analyzable server.
    pub fn set_vm_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vm_id = input; self
    }
    /// The virtual machine id of the analyzable server.
    pub fn get_vm_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vm_id
    }
    /// Consumes the builder and constructs a [`AnalyzableServerSummary`](crate::types::AnalyzableServerSummary).
    pub fn build(self) -> crate::types::AnalyzableServerSummary {
        crate::types::AnalyzableServerSummary {
            hostname: self.hostname
            ,
            ip_address: self.ip_address
            ,
            source: self.source
            ,
            vm_id: self.vm_id
            ,
        }
    }
}

