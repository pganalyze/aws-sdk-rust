// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of analysis level configurations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetOptions  {
    /// <p>Determines the timezone for the analysis.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>Determines the week start day for an analysis.</p>
    pub week_start: ::std::option::Option<crate::types::DayOfTheWeek>,
}
impl  AssetOptions  {
    /// <p>Determines the timezone for the analysis.</p>
    pub fn timezone(&self) -> ::std::option::Option<& str> {
        self.timezone.as_deref()
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn week_start(&self) -> ::std::option::Option<& crate::types::DayOfTheWeek> {
        self.week_start.as_ref()
    }
}
impl AssetOptions {
    /// Creates a new builder-style object to manufacture [`AssetOptions`](crate::types::AssetOptions).
    pub fn builder() -> crate::types::builders::AssetOptionsBuilder {
        crate::types::builders::AssetOptionsBuilder::default()
    }
}

/// A builder for [`AssetOptions`](crate::types::AssetOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetOptionsBuilder {
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) week_start: ::std::option::Option<crate::types::DayOfTheWeek>,
}
impl AssetOptionsBuilder {
    /// <p>Determines the timezone for the analysis.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines the timezone for the analysis.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input; self
    }
    /// <p>Determines the timezone for the analysis.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn week_start(mut self, input: crate::types::DayOfTheWeek) -> Self {
        self.week_start = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn set_week_start(mut self, input: ::std::option::Option<crate::types::DayOfTheWeek>) -> Self {
        self.week_start = input; self
    }
    /// <p>Determines the week start day for an analysis.</p>
    pub fn get_week_start(&self) -> &::std::option::Option<crate::types::DayOfTheWeek> {
        &self.week_start
    }
    /// Consumes the builder and constructs a [`AssetOptions`](crate::types::AssetOptions).
    pub fn build(self) -> crate::types::AssetOptions {
        crate::types::AssetOptions {
            timezone: self.timezone
            ,
            week_start: self.week_start
            ,
        }
    }
}

