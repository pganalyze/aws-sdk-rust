// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional formatting for the actual value of a KPI visual.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KpiActualValueConditionalFormatting  {
    /// <p>The conditional formatting of the actual value's text color.</p>
    pub text_color: ::std::option::Option<crate::types::ConditionalFormattingColor>,
    /// <p>The conditional formatting of the actual value's icon.</p>
    pub icon: ::std::option::Option<crate::types::ConditionalFormattingIcon>,
}
impl  KpiActualValueConditionalFormatting  {
    /// <p>The conditional formatting of the actual value's text color.</p>
    pub fn text_color(&self) -> ::std::option::Option<& crate::types::ConditionalFormattingColor> {
        self.text_color.as_ref()
    }
    /// <p>The conditional formatting of the actual value's icon.</p>
    pub fn icon(&self) -> ::std::option::Option<& crate::types::ConditionalFormattingIcon> {
        self.icon.as_ref()
    }
}
impl KpiActualValueConditionalFormatting {
    /// Creates a new builder-style object to manufacture [`KpiActualValueConditionalFormatting`](crate::types::KpiActualValueConditionalFormatting).
    pub fn builder() -> crate::types::builders::KpiActualValueConditionalFormattingBuilder {
        crate::types::builders::KpiActualValueConditionalFormattingBuilder::default()
    }
}

/// A builder for [`KpiActualValueConditionalFormatting`](crate::types::KpiActualValueConditionalFormatting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KpiActualValueConditionalFormattingBuilder {
    pub(crate) text_color: ::std::option::Option<crate::types::ConditionalFormattingColor>,
    pub(crate) icon: ::std::option::Option<crate::types::ConditionalFormattingIcon>,
}
impl KpiActualValueConditionalFormattingBuilder {
    /// <p>The conditional formatting of the actual value's text color.</p>
    pub fn text_color(mut self, input: crate::types::ConditionalFormattingColor) -> Self {
        self.text_color = ::std::option::Option::Some(input);
        self
    }
    /// <p>The conditional formatting of the actual value's text color.</p>
    pub fn set_text_color(mut self, input: ::std::option::Option<crate::types::ConditionalFormattingColor>) -> Self {
        self.text_color = input; self
    }
    /// <p>The conditional formatting of the actual value's text color.</p>
    pub fn get_text_color(&self) -> &::std::option::Option<crate::types::ConditionalFormattingColor> {
        &self.text_color
    }
    /// <p>The conditional formatting of the actual value's icon.</p>
    pub fn icon(mut self, input: crate::types::ConditionalFormattingIcon) -> Self {
        self.icon = ::std::option::Option::Some(input);
        self
    }
    /// <p>The conditional formatting of the actual value's icon.</p>
    pub fn set_icon(mut self, input: ::std::option::Option<crate::types::ConditionalFormattingIcon>) -> Self {
        self.icon = input; self
    }
    /// <p>The conditional formatting of the actual value's icon.</p>
    pub fn get_icon(&self) -> &::std::option::Option<crate::types::ConditionalFormattingIcon> {
        &self.icon
    }
    /// Consumes the builder and constructs a [`KpiActualValueConditionalFormatting`](crate::types::KpiActualValueConditionalFormatting).
    pub fn build(self) -> crate::types::KpiActualValueConditionalFormatting {
        crate::types::KpiActualValueConditionalFormatting {
            text_color: self.text_color
            ,
            icon: self.icon
            ,
        }
    }
}

