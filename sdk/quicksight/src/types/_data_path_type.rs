// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of the data path value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataPathType  {
    /// <p>The type of data path value utilized in a pivot table. Choose one of the following options:</p> 
    /// <ul> 
    /// <li> <p> <code>HIERARCHY_ROWS_LAYOUT_COLUMN</code> - The type of data path for the rows layout column, when <code>RowsLayout</code> is set to <code>HIERARCHY</code>.</p> </li> 
    /// <li> <p> <code>MULTIPLE_ROW_METRICS_COLUMN</code> - The type of data path for the metric column when the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>EMPTY_COLUMN_HEADER</code> - The type of data path for the column with empty column header, when there is no field in <code>ColumnsFieldWell</code> and the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>COUNT_METRIC_COLUMN</code> - The type of data path for the column with <code>COUNT</code> as the metric, when there is no field in the <code>ValuesFieldWell</code>.</p> </li> 
    /// </ul>
    pub pivot_table_data_path_type: ::std::option::Option<crate::types::PivotTableDataPathType>,
}
impl  DataPathType  {
    /// <p>The type of data path value utilized in a pivot table. Choose one of the following options:</p> 
    /// <ul> 
    /// <li> <p> <code>HIERARCHY_ROWS_LAYOUT_COLUMN</code> - The type of data path for the rows layout column, when <code>RowsLayout</code> is set to <code>HIERARCHY</code>.</p> </li> 
    /// <li> <p> <code>MULTIPLE_ROW_METRICS_COLUMN</code> - The type of data path for the metric column when the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>EMPTY_COLUMN_HEADER</code> - The type of data path for the column with empty column header, when there is no field in <code>ColumnsFieldWell</code> and the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>COUNT_METRIC_COLUMN</code> - The type of data path for the column with <code>COUNT</code> as the metric, when there is no field in the <code>ValuesFieldWell</code>.</p> </li> 
    /// </ul>
    pub fn pivot_table_data_path_type(&self) -> ::std::option::Option<& crate::types::PivotTableDataPathType> {
        self.pivot_table_data_path_type.as_ref()
    }
}
impl DataPathType {
    /// Creates a new builder-style object to manufacture [`DataPathType`](crate::types::DataPathType).
    pub fn builder() -> crate::types::builders::DataPathTypeBuilder {
        crate::types::builders::DataPathTypeBuilder::default()
    }
}

/// A builder for [`DataPathType`](crate::types::DataPathType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataPathTypeBuilder {
    pub(crate) pivot_table_data_path_type: ::std::option::Option<crate::types::PivotTableDataPathType>,
}
impl DataPathTypeBuilder {
    /// <p>The type of data path value utilized in a pivot table. Choose one of the following options:</p> 
    /// <ul> 
    /// <li> <p> <code>HIERARCHY_ROWS_LAYOUT_COLUMN</code> - The type of data path for the rows layout column, when <code>RowsLayout</code> is set to <code>HIERARCHY</code>.</p> </li> 
    /// <li> <p> <code>MULTIPLE_ROW_METRICS_COLUMN</code> - The type of data path for the metric column when the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>EMPTY_COLUMN_HEADER</code> - The type of data path for the column with empty column header, when there is no field in <code>ColumnsFieldWell</code> and the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>COUNT_METRIC_COLUMN</code> - The type of data path for the column with <code>COUNT</code> as the metric, when there is no field in the <code>ValuesFieldWell</code>.</p> </li> 
    /// </ul>
    pub fn pivot_table_data_path_type(mut self, input: crate::types::PivotTableDataPathType) -> Self {
        self.pivot_table_data_path_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data path value utilized in a pivot table. Choose one of the following options:</p> 
    /// <ul> 
    /// <li> <p> <code>HIERARCHY_ROWS_LAYOUT_COLUMN</code> - The type of data path for the rows layout column, when <code>RowsLayout</code> is set to <code>HIERARCHY</code>.</p> </li> 
    /// <li> <p> <code>MULTIPLE_ROW_METRICS_COLUMN</code> - The type of data path for the metric column when the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>EMPTY_COLUMN_HEADER</code> - The type of data path for the column with empty column header, when there is no field in <code>ColumnsFieldWell</code> and the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>COUNT_METRIC_COLUMN</code> - The type of data path for the column with <code>COUNT</code> as the metric, when there is no field in the <code>ValuesFieldWell</code>.</p> </li> 
    /// </ul>
    pub fn set_pivot_table_data_path_type(mut self, input: ::std::option::Option<crate::types::PivotTableDataPathType>) -> Self {
        self.pivot_table_data_path_type = input; self
    }
    /// <p>The type of data path value utilized in a pivot table. Choose one of the following options:</p> 
    /// <ul> 
    /// <li> <p> <code>HIERARCHY_ROWS_LAYOUT_COLUMN</code> - The type of data path for the rows layout column, when <code>RowsLayout</code> is set to <code>HIERARCHY</code>.</p> </li> 
    /// <li> <p> <code>MULTIPLE_ROW_METRICS_COLUMN</code> - The type of data path for the metric column when the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>EMPTY_COLUMN_HEADER</code> - The type of data path for the column with empty column header, when there is no field in <code>ColumnsFieldWell</code> and the row is set to Metric Placement.</p> </li> 
    /// <li> <p> <code>COUNT_METRIC_COLUMN</code> - The type of data path for the column with <code>COUNT</code> as the metric, when there is no field in the <code>ValuesFieldWell</code>.</p> </li> 
    /// </ul>
    pub fn get_pivot_table_data_path_type(&self) -> &::std::option::Option<crate::types::PivotTableDataPathType> {
        &self.pivot_table_data_path_type
    }
    /// Consumes the builder and constructs a [`DataPathType`](crate::types::DataPathType).
    pub fn build(self) -> crate::types::DataPathType {
        crate::types::DataPathType {
            pivot_table_data_path_type: self.pivot_table_data_path_type
            ,
        }
    }
}

