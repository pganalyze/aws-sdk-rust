// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that determine the layout a KPI visual.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KpiVisualLayoutOptions  {
    /// <p>The standard layout of the KPI visual.</p>
    pub standard_layout: ::std::option::Option<crate::types::KpiVisualStandardLayout>,
}
impl  KpiVisualLayoutOptions  {
    /// <p>The standard layout of the KPI visual.</p>
    pub fn standard_layout(&self) -> ::std::option::Option<& crate::types::KpiVisualStandardLayout> {
        self.standard_layout.as_ref()
    }
}
impl KpiVisualLayoutOptions {
    /// Creates a new builder-style object to manufacture [`KpiVisualLayoutOptions`](crate::types::KpiVisualLayoutOptions).
    pub fn builder() -> crate::types::builders::KpiVisualLayoutOptionsBuilder {
        crate::types::builders::KpiVisualLayoutOptionsBuilder::default()
    }
}

/// A builder for [`KpiVisualLayoutOptions`](crate::types::KpiVisualLayoutOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KpiVisualLayoutOptionsBuilder {
    pub(crate) standard_layout: ::std::option::Option<crate::types::KpiVisualStandardLayout>,
}
impl KpiVisualLayoutOptionsBuilder {
    /// <p>The standard layout of the KPI visual.</p>
    pub fn standard_layout(mut self, input: crate::types::KpiVisualStandardLayout) -> Self {
        self.standard_layout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The standard layout of the KPI visual.</p>
    pub fn set_standard_layout(mut self, input: ::std::option::Option<crate::types::KpiVisualStandardLayout>) -> Self {
        self.standard_layout = input; self
    }
    /// <p>The standard layout of the KPI visual.</p>
    pub fn get_standard_layout(&self) -> &::std::option::Option<crate::types::KpiVisualStandardLayout> {
        &self.standard_layout
    }
    /// Consumes the builder and constructs a [`KpiVisualLayoutOptions`](crate::types::KpiVisualLayoutOptions).
    pub fn build(self) -> crate::types::KpiVisualLayoutOptions {
        crate::types::KpiVisualLayoutOptions {
            standard_layout: self.standard_layout
            ,
        }
    }
}

