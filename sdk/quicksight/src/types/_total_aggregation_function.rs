// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An aggregation function that aggregates the total values of a measure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TotalAggregationFunction  {
    /// <p>A built in aggregation function for total values.</p>
    pub simple_total_aggregation_function: ::std::option::Option<crate::types::SimpleTotalAggregationFunction>,
}
impl  TotalAggregationFunction  {
    /// <p>A built in aggregation function for total values.</p>
    pub fn simple_total_aggregation_function(&self) -> ::std::option::Option<& crate::types::SimpleTotalAggregationFunction> {
        self.simple_total_aggregation_function.as_ref()
    }
}
impl TotalAggregationFunction {
    /// Creates a new builder-style object to manufacture [`TotalAggregationFunction`](crate::types::TotalAggregationFunction).
    pub fn builder() -> crate::types::builders::TotalAggregationFunctionBuilder {
        crate::types::builders::TotalAggregationFunctionBuilder::default()
    }
}

/// A builder for [`TotalAggregationFunction`](crate::types::TotalAggregationFunction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TotalAggregationFunctionBuilder {
    pub(crate) simple_total_aggregation_function: ::std::option::Option<crate::types::SimpleTotalAggregationFunction>,
}
impl TotalAggregationFunctionBuilder {
    /// <p>A built in aggregation function for total values.</p>
    pub fn simple_total_aggregation_function(mut self, input: crate::types::SimpleTotalAggregationFunction) -> Self {
        self.simple_total_aggregation_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>A built in aggregation function for total values.</p>
    pub fn set_simple_total_aggregation_function(mut self, input: ::std::option::Option<crate::types::SimpleTotalAggregationFunction>) -> Self {
        self.simple_total_aggregation_function = input; self
    }
    /// <p>A built in aggregation function for total values.</p>
    pub fn get_simple_total_aggregation_function(&self) -> &::std::option::Option<crate::types::SimpleTotalAggregationFunction> {
        &self.simple_total_aggregation_function
    }
    /// Consumes the builder and constructs a [`TotalAggregationFunction`](crate::types::TotalAggregationFunction).
    pub fn build(self) -> crate::types::TotalAggregationFunction {
        crate::types::TotalAggregationFunction {
            simple_total_aggregation_function: self.simple_total_aggregation_function
            ,
        }
    }
}

