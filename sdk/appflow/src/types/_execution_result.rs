// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the end result of the flow run. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionResult  {
    /// <p> Provides any error message information related to the flow run. </p>
    pub error_info: ::std::option::Option<crate::types::ErrorInfo>,
    /// <p> The total number of bytes processed by the flow run. </p>
    pub bytes_processed: ::std::option::Option<i64>,
    /// <p> The total number of bytes written as a result of the flow run. </p>
    pub bytes_written: ::std::option::Option<i64>,
    /// <p> The number of records processed in the flow run. </p>
    pub records_processed: ::std::option::Option<i64>,
    /// <p>The number of processes that Amazon AppFlow ran at the same time when it retrieved your data.</p>
    pub num_parallel_processes: ::std::option::Option<i64>,
    /// <p>The maximum number of records that Amazon AppFlow receives in each page of the response from your SAP application.</p>
    pub max_page_size: ::std::option::Option<i64>,
}
impl  ExecutionResult  {
    /// <p> Provides any error message information related to the flow run. </p>
    pub fn error_info(&self) -> ::std::option::Option<& crate::types::ErrorInfo> {
        self.error_info.as_ref()
    }
    /// <p> The total number of bytes processed by the flow run. </p>
    pub fn bytes_processed(&self) -> ::std::option::Option<i64> {
        self.bytes_processed
    }
    /// <p> The total number of bytes written as a result of the flow run. </p>
    pub fn bytes_written(&self) -> ::std::option::Option<i64> {
        self.bytes_written
    }
    /// <p> The number of records processed in the flow run. </p>
    pub fn records_processed(&self) -> ::std::option::Option<i64> {
        self.records_processed
    }
    /// <p>The number of processes that Amazon AppFlow ran at the same time when it retrieved your data.</p>
    pub fn num_parallel_processes(&self) -> ::std::option::Option<i64> {
        self.num_parallel_processes
    }
    /// <p>The maximum number of records that Amazon AppFlow receives in each page of the response from your SAP application.</p>
    pub fn max_page_size(&self) -> ::std::option::Option<i64> {
        self.max_page_size
    }
}
impl ExecutionResult {
    /// Creates a new builder-style object to manufacture [`ExecutionResult`](crate::types::ExecutionResult).
    pub fn builder() -> crate::types::builders::ExecutionResultBuilder {
        crate::types::builders::ExecutionResultBuilder::default()
    }
}

/// A builder for [`ExecutionResult`](crate::types::ExecutionResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutionResultBuilder {
    pub(crate) error_info: ::std::option::Option<crate::types::ErrorInfo>,
    pub(crate) bytes_processed: ::std::option::Option<i64>,
    pub(crate) bytes_written: ::std::option::Option<i64>,
    pub(crate) records_processed: ::std::option::Option<i64>,
    pub(crate) num_parallel_processes: ::std::option::Option<i64>,
    pub(crate) max_page_size: ::std::option::Option<i64>,
}
impl ExecutionResultBuilder {
    /// <p> Provides any error message information related to the flow run. </p>
    pub fn error_info(mut self, input: crate::types::ErrorInfo) -> Self {
        self.error_info = ::std::option::Option::Some(input);
        self
    }
    /// <p> Provides any error message information related to the flow run. </p>
    pub fn set_error_info(mut self, input: ::std::option::Option<crate::types::ErrorInfo>) -> Self {
        self.error_info = input; self
    }
    /// <p> Provides any error message information related to the flow run. </p>
    pub fn get_error_info(&self) -> &::std::option::Option<crate::types::ErrorInfo> {
        &self.error_info
    }
    /// <p> The total number of bytes processed by the flow run. </p>
    pub fn bytes_processed(mut self, input: i64) -> Self {
        self.bytes_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p> The total number of bytes processed by the flow run. </p>
    pub fn set_bytes_processed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_processed = input; self
    }
    /// <p> The total number of bytes processed by the flow run. </p>
    pub fn get_bytes_processed(&self) -> &::std::option::Option<i64> {
        &self.bytes_processed
    }
    /// <p> The total number of bytes written as a result of the flow run. </p>
    pub fn bytes_written(mut self, input: i64) -> Self {
        self.bytes_written = ::std::option::Option::Some(input);
        self
    }
    /// <p> The total number of bytes written as a result of the flow run. </p>
    pub fn set_bytes_written(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_written = input; self
    }
    /// <p> The total number of bytes written as a result of the flow run. </p>
    pub fn get_bytes_written(&self) -> &::std::option::Option<i64> {
        &self.bytes_written
    }
    /// <p> The number of records processed in the flow run. </p>
    pub fn records_processed(mut self, input: i64) -> Self {
        self.records_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of records processed in the flow run. </p>
    pub fn set_records_processed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.records_processed = input; self
    }
    /// <p> The number of records processed in the flow run. </p>
    pub fn get_records_processed(&self) -> &::std::option::Option<i64> {
        &self.records_processed
    }
    /// <p>The number of processes that Amazon AppFlow ran at the same time when it retrieved your data.</p>
    pub fn num_parallel_processes(mut self, input: i64) -> Self {
        self.num_parallel_processes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of processes that Amazon AppFlow ran at the same time when it retrieved your data.</p>
    pub fn set_num_parallel_processes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.num_parallel_processes = input; self
    }
    /// <p>The number of processes that Amazon AppFlow ran at the same time when it retrieved your data.</p>
    pub fn get_num_parallel_processes(&self) -> &::std::option::Option<i64> {
        &self.num_parallel_processes
    }
    /// <p>The maximum number of records that Amazon AppFlow receives in each page of the response from your SAP application.</p>
    pub fn max_page_size(mut self, input: i64) -> Self {
        self.max_page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records that Amazon AppFlow receives in each page of the response from your SAP application.</p>
    pub fn set_max_page_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_page_size = input; self
    }
    /// <p>The maximum number of records that Amazon AppFlow receives in each page of the response from your SAP application.</p>
    pub fn get_max_page_size(&self) -> &::std::option::Option<i64> {
        &self.max_page_size
    }
    /// Consumes the builder and constructs a [`ExecutionResult`](crate::types::ExecutionResult).
    pub fn build(self) -> crate::types::ExecutionResult {
        crate::types::ExecutionResult {
            error_info: self.error_info
            ,
            bytes_processed: self.bytes_processed
            ,
            bytes_written: self.bytes_written
            ,
            records_processed: self.records_processed
            ,
            num_parallel_processes: self.num_parallel_processes
            ,
            max_page_size: self.max_page_size
            ,
        }
    }
}

