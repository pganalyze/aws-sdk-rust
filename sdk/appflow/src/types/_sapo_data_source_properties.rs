// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The properties that are applied when using SAPOData as a flow source. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SapoDataSourceProperties  {
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub object_path: ::std::option::Option<::std::string::String>,
    /// <p>Sets the number of concurrent processes that transfers OData records from your SAP instance.</p>
    pub parallelism_config: ::std::option::Option<crate::types::SapoDataParallelismConfig>,
    /// <p>Sets the page size for each concurrent process that transfers OData records from your SAP instance.</p>
    pub pagination_config: ::std::option::Option<crate::types::SapoDataPaginationConfig>,
}
impl  SapoDataSourceProperties  {
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn object_path(&self) -> ::std::option::Option<& str> {
        self.object_path.as_deref()
    }
    /// <p>Sets the number of concurrent processes that transfers OData records from your SAP instance.</p>
    pub fn parallelism_config(&self) -> ::std::option::Option<& crate::types::SapoDataParallelismConfig> {
        self.parallelism_config.as_ref()
    }
    /// <p>Sets the page size for each concurrent process that transfers OData records from your SAP instance.</p>
    pub fn pagination_config(&self) -> ::std::option::Option<& crate::types::SapoDataPaginationConfig> {
        self.pagination_config.as_ref()
    }
}
impl SapoDataSourceProperties {
    /// Creates a new builder-style object to manufacture [`SapoDataSourceProperties`](crate::types::SapoDataSourceProperties).
    pub fn builder() -> crate::types::builders::SapoDataSourcePropertiesBuilder {
        crate::types::builders::SapoDataSourcePropertiesBuilder::default()
    }
}

/// A builder for [`SapoDataSourceProperties`](crate::types::SapoDataSourceProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SapoDataSourcePropertiesBuilder {
    pub(crate) object_path: ::std::option::Option<::std::string::String>,
    pub(crate) parallelism_config: ::std::option::Option<crate::types::SapoDataParallelismConfig>,
    pub(crate) pagination_config: ::std::option::Option<crate::types::SapoDataPaginationConfig>,
}
impl SapoDataSourcePropertiesBuilder {
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn object_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn set_object_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_path = input; self
    }
    /// <p> The object path specified in the SAPOData flow source. </p>
    pub fn get_object_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_path
    }
    /// <p>Sets the number of concurrent processes that transfers OData records from your SAP instance.</p>
    pub fn parallelism_config(mut self, input: crate::types::SapoDataParallelismConfig) -> Self {
        self.parallelism_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the number of concurrent processes that transfers OData records from your SAP instance.</p>
    pub fn set_parallelism_config(mut self, input: ::std::option::Option<crate::types::SapoDataParallelismConfig>) -> Self {
        self.parallelism_config = input; self
    }
    /// <p>Sets the number of concurrent processes that transfers OData records from your SAP instance.</p>
    pub fn get_parallelism_config(&self) -> &::std::option::Option<crate::types::SapoDataParallelismConfig> {
        &self.parallelism_config
    }
    /// <p>Sets the page size for each concurrent process that transfers OData records from your SAP instance.</p>
    pub fn pagination_config(mut self, input: crate::types::SapoDataPaginationConfig) -> Self {
        self.pagination_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the page size for each concurrent process that transfers OData records from your SAP instance.</p>
    pub fn set_pagination_config(mut self, input: ::std::option::Option<crate::types::SapoDataPaginationConfig>) -> Self {
        self.pagination_config = input; self
    }
    /// <p>Sets the page size for each concurrent process that transfers OData records from your SAP instance.</p>
    pub fn get_pagination_config(&self) -> &::std::option::Option<crate::types::SapoDataPaginationConfig> {
        &self.pagination_config
    }
    /// Consumes the builder and constructs a [`SapoDataSourceProperties`](crate::types::SapoDataSourceProperties).
    pub fn build(self) -> crate::types::SapoDataSourceProperties {
        crate::types::SapoDataSourceProperties {
            object_path: self.object_path
            ,
            parallelism_config: self.parallelism_config
            ,
            pagination_config: self.pagination_config
            ,
        }
    }
}

