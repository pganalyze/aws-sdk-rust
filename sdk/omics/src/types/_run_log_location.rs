// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The URI for the run log. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RunLogLocation  {
    /// <p> The log stream ARN for the engine log. </p>
    pub engine_log_stream: ::std::option::Option<::std::string::String>,
    /// <p> The log stream ARN for the run log. </p>
    pub run_log_stream: ::std::option::Option<::std::string::String>,
}
impl  RunLogLocation  {
    /// <p> The log stream ARN for the engine log. </p>
    pub fn engine_log_stream(&self) -> ::std::option::Option<& str> {
        self.engine_log_stream.as_deref()
    }
    /// <p> The log stream ARN for the run log. </p>
    pub fn run_log_stream(&self) -> ::std::option::Option<& str> {
        self.run_log_stream.as_deref()
    }
}
impl RunLogLocation {
    /// Creates a new builder-style object to manufacture [`RunLogLocation`](crate::types::RunLogLocation).
    pub fn builder() -> crate::types::builders::RunLogLocationBuilder {
        crate::types::builders::RunLogLocationBuilder::default()
    }
}

/// A builder for [`RunLogLocation`](crate::types::RunLogLocation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RunLogLocationBuilder {
    pub(crate) engine_log_stream: ::std::option::Option<::std::string::String>,
    pub(crate) run_log_stream: ::std::option::Option<::std::string::String>,
}
impl RunLogLocationBuilder {
    /// <p> The log stream ARN for the engine log. </p>
    pub fn engine_log_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_log_stream = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The log stream ARN for the engine log. </p>
    pub fn set_engine_log_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_log_stream = input; self
    }
    /// <p> The log stream ARN for the engine log. </p>
    pub fn get_engine_log_stream(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_log_stream
    }
    /// <p> The log stream ARN for the run log. </p>
    pub fn run_log_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_log_stream = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The log stream ARN for the run log. </p>
    pub fn set_run_log_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_log_stream = input; self
    }
    /// <p> The log stream ARN for the run log. </p>
    pub fn get_run_log_stream(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_log_stream
    }
    /// Consumes the builder and constructs a [`RunLogLocation`](crate::types::RunLogLocation).
    pub fn build(self) -> crate::types::RunLogLocation {
        crate::types::RunLogLocation {
            engine_log_stream: self.engine_log_stream
            ,
            run_log_stream: self.run_log_stream
            ,
        }
    }
}

