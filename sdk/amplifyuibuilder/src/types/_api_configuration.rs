// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the API configuration for a code generation job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ApiConfiguration {
    /// <p>The configuration for an application using DataStore APIs.</p>
    DataStoreConfig(crate::types::DataStoreRenderConfig),
    /// <p>The configuration for an application using GraphQL APIs.</p>
    GraphQlConfig(crate::types::GraphQlRenderConfig),
    /// <p>The configuration for an application with no API being used.</p>
    NoApiConfig(crate::types::NoApiRenderConfig),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ApiConfiguration {
    /// Tries to convert the enum instance into [`DataStoreConfig`](crate::types::ApiConfiguration::DataStoreConfig), extracting the inner [`DataStoreRenderConfig`](crate::types::DataStoreRenderConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_data_store_config(&self) -> ::std::result::Result<&crate::types::DataStoreRenderConfig, &Self> {
        if let ApiConfiguration::DataStoreConfig(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`DataStoreConfig`](crate::types::ApiConfiguration::DataStoreConfig).
    pub fn is_data_store_config(&self) -> bool {
        self.as_data_store_config().is_ok()
    }
    /// Tries to convert the enum instance into [`GraphQlConfig`](crate::types::ApiConfiguration::GraphQlConfig), extracting the inner [`GraphQlRenderConfig`](crate::types::GraphQlRenderConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_graph_ql_config(&self) -> ::std::result::Result<&crate::types::GraphQlRenderConfig, &Self> {
        if let ApiConfiguration::GraphQlConfig(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`GraphQlConfig`](crate::types::ApiConfiguration::GraphQlConfig).
    pub fn is_graph_ql_config(&self) -> bool {
        self.as_graph_ql_config().is_ok()
    }
    /// Tries to convert the enum instance into [`NoApiConfig`](crate::types::ApiConfiguration::NoApiConfig), extracting the inner [`NoApiRenderConfig`](crate::types::NoApiRenderConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_no_api_config(&self) -> ::std::result::Result<&crate::types::NoApiRenderConfig, &Self> {
        if let ApiConfiguration::NoApiConfig(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`NoApiConfig`](crate::types::ApiConfiguration::NoApiConfig).
    pub fn is_no_api_config(&self) -> bool {
        self.as_no_api_config().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

