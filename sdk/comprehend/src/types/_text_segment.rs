// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One of the of text strings. Each string has a size limit of 1KB.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TextSegment  {
    /// <p>The text content.</p>
    pub text: ::std::string::String,
}
impl  TextSegment  {
    /// <p>The text content.</p>
    pub fn text(&self) -> & str {
        use std::ops::Deref; self.text.deref()
    }
}
impl  ::std::fmt::Debug for TextSegment  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextSegment");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TextSegment {
    /// Creates a new builder-style object to manufacture [`TextSegment`](crate::types::TextSegment).
    pub fn builder() -> crate::types::builders::TextSegmentBuilder {
        crate::types::builders::TextSegmentBuilder::default()
    }
}

/// A builder for [`TextSegment`](crate::types::TextSegment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TextSegmentBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
}
impl TextSegmentBuilder {
    /// <p>The text content.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text content.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input; self
    }
    /// <p>The text content.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Consumes the builder and constructs a [`TextSegment`](crate::types::TextSegment).
    /// This method will fail if any of the following fields are not set:
    /// - [`text`](crate::types::builders::TextSegmentBuilder::text)
    pub fn build(self) -> ::std::result::Result<crate::types::TextSegment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::TextSegment {
                text: self.text
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("text", "text was not specified but it is required when building TextSegment")
                    )?
                ,
            }
        )
    }
}
impl ::std::fmt::Debug for TextSegmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextSegmentBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

