// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Toxic content analysis result for one string. For more information about toxicity detection, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/toxicity-detection.html">Toxicity detection</a> in the <i>Amazon Comprehend Developer Guide</i> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ToxicContent  {
    /// <p>The name of the toxic content type.</p>
    pub name: ::std::option::Option<crate::types::ToxicContentType>,
    /// <p> Model confidence in the detected content type. Value range is zero to one, where one is highest confidence.</p>
    pub score: ::std::option::Option<f32>,
}
impl  ToxicContent  {
    /// <p>The name of the toxic content type.</p>
    pub fn name(&self) -> ::std::option::Option<& crate::types::ToxicContentType> {
        self.name.as_ref()
    }
    /// <p> Model confidence in the detected content type. Value range is zero to one, where one is highest confidence.</p>
    pub fn score(&self) -> ::std::option::Option<f32> {
        self.score
    }
}
impl ToxicContent {
    /// Creates a new builder-style object to manufacture [`ToxicContent`](crate::types::ToxicContent).
    pub fn builder() -> crate::types::builders::ToxicContentBuilder {
        crate::types::builders::ToxicContentBuilder::default()
    }
}

/// A builder for [`ToxicContent`](crate::types::ToxicContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ToxicContentBuilder {
    pub(crate) name: ::std::option::Option<crate::types::ToxicContentType>,
    pub(crate) score: ::std::option::Option<f32>,
}
impl ToxicContentBuilder {
    /// <p>The name of the toxic content type.</p>
    pub fn name(mut self, input: crate::types::ToxicContentType) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the toxic content type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::ToxicContentType>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the toxic content type.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::ToxicContentType> {
        &self.name
    }
    /// <p> Model confidence in the detected content type. Value range is zero to one, where one is highest confidence.</p>
    pub fn score(mut self, input: f32) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p> Model confidence in the detected content type. Value range is zero to one, where one is highest confidence.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f32>) -> Self {
        self.score = input; self
    }
    /// <p> Model confidence in the detected content type. Value range is zero to one, where one is highest confidence.</p>
    pub fn get_score(&self) -> &::std::option::Option<f32> {
        &self.score
    }
    /// Consumes the builder and constructs a [`ToxicContent`](crate::types::ToxicContent).
    pub fn build(self) -> crate::types::ToxicContent {
        crate::types::ToxicContent {
            name: self.name
            ,
            score: self.score
            ,
        }
    }
}

