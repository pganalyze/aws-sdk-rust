// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DICOM attributes returned as a part of a response. Each image set has these properties as part of a search result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DicomTags  {
    /// <p>The unique identifier for a patient in a DICOM Study.</p>
    pub dicom_patient_id: ::std::option::Option<::std::string::String>,
    /// <p>The patient name.</p>
    pub dicom_patient_name: ::std::option::Option<::std::string::String>,
    /// <p>The patient birth date.</p>
    pub dicom_patient_birth_date: ::std::option::Option<::std::string::String>,
    /// <p>The patient sex.</p>
    pub dicom_patient_sex: ::std::option::Option<::std::string::String>,
    /// <p>The DICOM provided identifier for studyInstanceUid.&gt;</p>
    pub dicom_study_instance_uid: ::std::option::Option<::std::string::String>,
    /// <p>The DICOM provided studyId.</p>
    pub dicom_study_id: ::std::option::Option<::std::string::String>,
    /// <p>The description of the study.</p>
    pub dicom_study_description: ::std::option::Option<::std::string::String>,
    /// <p>The total number of series in the DICOM study.</p>
    pub dicom_number_of_study_related_series: i32,
    /// <p>The total number of instances in the DICOM study.</p>
    pub dicom_number_of_study_related_instances: i32,
    /// <p>The accession number for the DICOM study.</p>
    pub dicom_accession_number: ::std::option::Option<::std::string::String>,
    /// <p>The study date.</p>
    pub dicom_study_date: ::std::option::Option<::std::string::String>,
    /// <p>The study time.</p>
    pub dicom_study_time: ::std::option::Option<::std::string::String>,
}
impl  DicomTags  {
    /// <p>The unique identifier for a patient in a DICOM Study.</p>
    pub fn dicom_patient_id(&self) -> ::std::option::Option<& str> {
        self.dicom_patient_id.as_deref()
    }
    /// <p>The patient name.</p>
    pub fn dicom_patient_name(&self) -> ::std::option::Option<& str> {
        self.dicom_patient_name.as_deref()
    }
    /// <p>The patient birth date.</p>
    pub fn dicom_patient_birth_date(&self) -> ::std::option::Option<& str> {
        self.dicom_patient_birth_date.as_deref()
    }
    /// <p>The patient sex.</p>
    pub fn dicom_patient_sex(&self) -> ::std::option::Option<& str> {
        self.dicom_patient_sex.as_deref()
    }
    /// <p>The DICOM provided identifier for studyInstanceUid.&gt;</p>
    pub fn dicom_study_instance_uid(&self) -> ::std::option::Option<& str> {
        self.dicom_study_instance_uid.as_deref()
    }
    /// <p>The DICOM provided studyId.</p>
    pub fn dicom_study_id(&self) -> ::std::option::Option<& str> {
        self.dicom_study_id.as_deref()
    }
    /// <p>The description of the study.</p>
    pub fn dicom_study_description(&self) -> ::std::option::Option<& str> {
        self.dicom_study_description.as_deref()
    }
    /// <p>The total number of series in the DICOM study.</p>
    pub fn dicom_number_of_study_related_series(&self) -> i32 {
        self.dicom_number_of_study_related_series
    }
    /// <p>The total number of instances in the DICOM study.</p>
    pub fn dicom_number_of_study_related_instances(&self) -> i32 {
        self.dicom_number_of_study_related_instances
    }
    /// <p>The accession number for the DICOM study.</p>
    pub fn dicom_accession_number(&self) -> ::std::option::Option<& str> {
        self.dicom_accession_number.as_deref()
    }
    /// <p>The study date.</p>
    pub fn dicom_study_date(&self) -> ::std::option::Option<& str> {
        self.dicom_study_date.as_deref()
    }
    /// <p>The study time.</p>
    pub fn dicom_study_time(&self) -> ::std::option::Option<& str> {
        self.dicom_study_time.as_deref()
    }
}
impl  ::std::fmt::Debug for DicomTags  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DicomTags");
        formatter.field("dicom_patient_id", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_patient_name", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_patient_birth_date", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_patient_sex", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_instance_uid", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_id", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_description", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_number_of_study_related_series", &self.dicom_number_of_study_related_series);
        formatter.field("dicom_number_of_study_related_instances", &self.dicom_number_of_study_related_instances);
        formatter.field("dicom_accession_number", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_date", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_time", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DicomTags {
    /// Creates a new builder-style object to manufacture [`DicomTags`](crate::types::DicomTags).
    pub fn builder() -> crate::types::builders::DicomTagsBuilder {
        crate::types::builders::DicomTagsBuilder::default()
    }
}

/// A builder for [`DicomTags`](crate::types::DicomTags).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DicomTagsBuilder {
    pub(crate) dicom_patient_id: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_patient_name: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_patient_birth_date: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_patient_sex: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_study_instance_uid: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_study_id: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_study_description: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_number_of_study_related_series: ::std::option::Option<i32>,
    pub(crate) dicom_number_of_study_related_instances: ::std::option::Option<i32>,
    pub(crate) dicom_accession_number: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_study_date: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_study_time: ::std::option::Option<::std::string::String>,
}
impl DicomTagsBuilder {
    /// <p>The unique identifier for a patient in a DICOM Study.</p>
    pub fn dicom_patient_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_patient_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a patient in a DICOM Study.</p>
    pub fn set_dicom_patient_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_patient_id = input; self
    }
    /// <p>The unique identifier for a patient in a DICOM Study.</p>
    pub fn get_dicom_patient_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_patient_id
    }
    /// <p>The patient name.</p>
    pub fn dicom_patient_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_patient_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The patient name.</p>
    pub fn set_dicom_patient_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_patient_name = input; self
    }
    /// <p>The patient name.</p>
    pub fn get_dicom_patient_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_patient_name
    }
    /// <p>The patient birth date.</p>
    pub fn dicom_patient_birth_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_patient_birth_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The patient birth date.</p>
    pub fn set_dicom_patient_birth_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_patient_birth_date = input; self
    }
    /// <p>The patient birth date.</p>
    pub fn get_dicom_patient_birth_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_patient_birth_date
    }
    /// <p>The patient sex.</p>
    pub fn dicom_patient_sex(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_patient_sex = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The patient sex.</p>
    pub fn set_dicom_patient_sex(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_patient_sex = input; self
    }
    /// <p>The patient sex.</p>
    pub fn get_dicom_patient_sex(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_patient_sex
    }
    /// <p>The DICOM provided identifier for studyInstanceUid.&gt;</p>
    pub fn dicom_study_instance_uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_instance_uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DICOM provided identifier for studyInstanceUid.&gt;</p>
    pub fn set_dicom_study_instance_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_instance_uid = input; self
    }
    /// <p>The DICOM provided identifier for studyInstanceUid.&gt;</p>
    pub fn get_dicom_study_instance_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_instance_uid
    }
    /// <p>The DICOM provided studyId.</p>
    pub fn dicom_study_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DICOM provided studyId.</p>
    pub fn set_dicom_study_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_id = input; self
    }
    /// <p>The DICOM provided studyId.</p>
    pub fn get_dicom_study_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_id
    }
    /// <p>The description of the study.</p>
    pub fn dicom_study_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the study.</p>
    pub fn set_dicom_study_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_description = input; self
    }
    /// <p>The description of the study.</p>
    pub fn get_dicom_study_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_description
    }
    /// <p>The total number of series in the DICOM study.</p>
    pub fn dicom_number_of_study_related_series(mut self, input: i32) -> Self {
        self.dicom_number_of_study_related_series = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of series in the DICOM study.</p>
    pub fn set_dicom_number_of_study_related_series(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dicom_number_of_study_related_series = input; self
    }
    /// <p>The total number of series in the DICOM study.</p>
    pub fn get_dicom_number_of_study_related_series(&self) -> &::std::option::Option<i32> {
        &self.dicom_number_of_study_related_series
    }
    /// <p>The total number of instances in the DICOM study.</p>
    pub fn dicom_number_of_study_related_instances(mut self, input: i32) -> Self {
        self.dicom_number_of_study_related_instances = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of instances in the DICOM study.</p>
    pub fn set_dicom_number_of_study_related_instances(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dicom_number_of_study_related_instances = input; self
    }
    /// <p>The total number of instances in the DICOM study.</p>
    pub fn get_dicom_number_of_study_related_instances(&self) -> &::std::option::Option<i32> {
        &self.dicom_number_of_study_related_instances
    }
    /// <p>The accession number for the DICOM study.</p>
    pub fn dicom_accession_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_accession_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The accession number for the DICOM study.</p>
    pub fn set_dicom_accession_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_accession_number = input; self
    }
    /// <p>The accession number for the DICOM study.</p>
    pub fn get_dicom_accession_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_accession_number
    }
    /// <p>The study date.</p>
    pub fn dicom_study_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The study date.</p>
    pub fn set_dicom_study_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_date = input; self
    }
    /// <p>The study date.</p>
    pub fn get_dicom_study_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_date
    }
    /// <p>The study time.</p>
    pub fn dicom_study_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dicom_study_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The study time.</p>
    pub fn set_dicom_study_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dicom_study_time = input; self
    }
    /// <p>The study time.</p>
    pub fn get_dicom_study_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.dicom_study_time
    }
    /// Consumes the builder and constructs a [`DicomTags`](crate::types::DicomTags).
    pub fn build(self) -> crate::types::DicomTags {
        crate::types::DicomTags {
            dicom_patient_id: self.dicom_patient_id
            ,
            dicom_patient_name: self.dicom_patient_name
            ,
            dicom_patient_birth_date: self.dicom_patient_birth_date
            ,
            dicom_patient_sex: self.dicom_patient_sex
            ,
            dicom_study_instance_uid: self.dicom_study_instance_uid
            ,
            dicom_study_id: self.dicom_study_id
            ,
            dicom_study_description: self.dicom_study_description
            ,
            dicom_number_of_study_related_series: self.dicom_number_of_study_related_series
                .unwrap_or_default()
            ,
            dicom_number_of_study_related_instances: self.dicom_number_of_study_related_instances
                .unwrap_or_default()
            ,
            dicom_accession_number: self.dicom_accession_number
            ,
            dicom_study_date: self.dicom_study_date
            ,
            dicom_study_time: self.dicom_study_time
            ,
        }
    }
}
impl ::std::fmt::Debug for DicomTagsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DicomTagsBuilder");
        formatter.field("dicom_patient_id", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_patient_name", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_patient_birth_date", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_patient_sex", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_instance_uid", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_id", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_description", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_number_of_study_related_series", &self.dicom_number_of_study_related_series);
        formatter.field("dicom_number_of_study_related_instances", &self.dicom_number_of_study_related_instances);
        formatter.field("dicom_accession_number", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_date", &"*** Sensitive Data Redacted ***");
        formatter.field("dicom_study_time", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

