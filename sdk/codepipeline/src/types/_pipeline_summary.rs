// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns a summary of a pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipelineSummary  {
    /// <p>The name of the pipeline.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the pipeline.</p>
    pub version: ::std::option::Option<i32>,
    /// <p>CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.</p> 
    /// <ul> 
    /// <li> <p>V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.</p> </li> 
    /// <li> <p>V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.</p> </li> 
    /// </ul> <important> 
    /// <p>Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs.</p> 
    /// </important> 
    /// <p>For information about pricing for CodePipeline, see <a href="https://aws.amazon.com/codepipeline/pricing/">Pricing</a>.</p> 
    /// <p> For information about which type of pipeline to choose, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html">What type of pipeline is right for me?</a>.</p>
    pub pipeline_type: ::std::option::Option<crate::types::PipelineType>,
    /// <p>The date and time the pipeline was created, in timestamp format.</p>
    pub created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time of the last update to the pipeline, in timestamp format.</p>
    pub updated: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  PipelineSummary  {
    /// <p>The name of the pipeline.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The version number of the pipeline.</p>
    pub fn version(&self) -> ::std::option::Option<i32> {
        self.version
    }
    /// <p>CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.</p> 
    /// <ul> 
    /// <li> <p>V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.</p> </li> 
    /// <li> <p>V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.</p> </li> 
    /// </ul> <important> 
    /// <p>Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs.</p> 
    /// </important> 
    /// <p>For information about pricing for CodePipeline, see <a href="https://aws.amazon.com/codepipeline/pricing/">Pricing</a>.</p> 
    /// <p> For information about which type of pipeline to choose, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html">What type of pipeline is right for me?</a>.</p>
    pub fn pipeline_type(&self) -> ::std::option::Option<& crate::types::PipelineType> {
        self.pipeline_type.as_ref()
    }
    /// <p>The date and time the pipeline was created, in timestamp format.</p>
    pub fn created(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The date and time of the last update to the pipeline, in timestamp format.</p>
    pub fn updated(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.updated.as_ref()
    }
}
impl PipelineSummary {
    /// Creates a new builder-style object to manufacture [`PipelineSummary`](crate::types::PipelineSummary).
    pub fn builder() -> crate::types::builders::PipelineSummaryBuilder {
        crate::types::builders::PipelineSummaryBuilder::default()
    }
}

/// A builder for [`PipelineSummary`](crate::types::PipelineSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PipelineSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<i32>,
    pub(crate) pipeline_type: ::std::option::Option<crate::types::PipelineType>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PipelineSummaryBuilder {
    /// <p>The name of the pipeline.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipeline.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the pipeline.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The version number of the pipeline.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the pipeline.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version = input; self
    }
    /// <p>The version number of the pipeline.</p>
    pub fn get_version(&self) -> &::std::option::Option<i32> {
        &self.version
    }
    /// <p>CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.</p> 
    /// <ul> 
    /// <li> <p>V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.</p> </li> 
    /// <li> <p>V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.</p> </li> 
    /// </ul> <important> 
    /// <p>Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs.</p> 
    /// </important> 
    /// <p>For information about pricing for CodePipeline, see <a href="https://aws.amazon.com/codepipeline/pricing/">Pricing</a>.</p> 
    /// <p> For information about which type of pipeline to choose, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html">What type of pipeline is right for me?</a>.</p>
    pub fn pipeline_type(mut self, input: crate::types::PipelineType) -> Self {
        self.pipeline_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.</p> 
    /// <ul> 
    /// <li> <p>V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.</p> </li> 
    /// <li> <p>V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.</p> </li> 
    /// </ul> <important> 
    /// <p>Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs.</p> 
    /// </important> 
    /// <p>For information about pricing for CodePipeline, see <a href="https://aws.amazon.com/codepipeline/pricing/">Pricing</a>.</p> 
    /// <p> For information about which type of pipeline to choose, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html">What type of pipeline is right for me?</a>.</p>
    pub fn set_pipeline_type(mut self, input: ::std::option::Option<crate::types::PipelineType>) -> Self {
        self.pipeline_type = input; self
    }
    /// <p>CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.</p> 
    /// <ul> 
    /// <li> <p>V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.</p> </li> 
    /// <li> <p>V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.</p> </li> 
    /// </ul> <important> 
    /// <p>Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs.</p> 
    /// </important> 
    /// <p>For information about pricing for CodePipeline, see <a href="https://aws.amazon.com/codepipeline/pricing/">Pricing</a>.</p> 
    /// <p> For information about which type of pipeline to choose, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html">What type of pipeline is right for me?</a>.</p>
    pub fn get_pipeline_type(&self) -> &::std::option::Option<crate::types::PipelineType> {
        &self.pipeline_type
    }
    /// <p>The date and time the pipeline was created, in timestamp format.</p>
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the pipeline was created, in timestamp format.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input; self
    }
    /// <p>The date and time the pipeline was created, in timestamp format.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// <p>The date and time of the last update to the pipeline, in timestamp format.</p>
    pub fn updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time of the last update to the pipeline, in timestamp format.</p>
    pub fn set_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated = input; self
    }
    /// <p>The date and time of the last update to the pipeline, in timestamp format.</p>
    pub fn get_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated
    }
    /// Consumes the builder and constructs a [`PipelineSummary`](crate::types::PipelineSummary).
    pub fn build(self) -> crate::types::PipelineSummary {
        crate::types::PipelineSummary {
            name: self.name
            ,
            version: self.version
            ,
            pipeline_type: self.pipeline_type
            ,
            created: self.created
            ,
            updated: self.updated
            ,
        }
    }
}

