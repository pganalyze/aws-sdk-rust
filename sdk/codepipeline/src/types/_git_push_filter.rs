// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GitPushFilter  {
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub tags: ::std::option::Option<crate::types::GitTagFilterCriteria>,
}
impl  GitPushFilter  {
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<& crate::types::GitTagFilterCriteria> {
        self.tags.as_ref()
    }
}
impl GitPushFilter {
    /// Creates a new builder-style object to manufacture [`GitPushFilter`](crate::types::GitPushFilter).
    pub fn builder() -> crate::types::builders::GitPushFilterBuilder {
        crate::types::builders::GitPushFilterBuilder::default()
    }
}

/// A builder for [`GitPushFilter`](crate::types::GitPushFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GitPushFilterBuilder {
    pub(crate) tags: ::std::option::Option<crate::types::GitTagFilterCriteria>,
}
impl GitPushFilterBuilder {
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn tags(mut self, input: crate::types::GitTagFilterCriteria) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::GitTagFilterCriteria>) -> Self {
        self.tags = input; self
    }
    /// <p>The field that contains the details for the Git tags trigger configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::GitTagFilterCriteria> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`GitPushFilter`](crate::types::GitPushFilter).
    pub fn build(self) -> crate::types::GitPushFilter {
        crate::types::GitPushFilter {
            tags: self.tags
            ,
        }
    }
}

