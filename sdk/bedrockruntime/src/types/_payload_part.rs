// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Payload content included in the response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PayloadPart  {
    /// <p>Base64-encoded bytes of payload data.</p>
    pub bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl  PayloadPart  {
    /// <p>Base64-encoded bytes of payload data.</p>
    pub fn bytes(&self) -> ::std::option::Option<& ::aws_smithy_types::Blob> {
        self.bytes.as_ref()
    }
}
impl  ::std::fmt::Debug for PayloadPart  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PayloadPart");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PayloadPart {
    /// Creates a new builder-style object to manufacture [`PayloadPart`](crate::types::PayloadPart).
    pub fn builder() -> crate::types::builders::PayloadPartBuilder {
        crate::types::builders::PayloadPartBuilder::default()
    }
}

/// A builder for [`PayloadPart`](crate::types::PayloadPart).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PayloadPartBuilder {
    pub(crate) bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl PayloadPartBuilder {
    /// <p>Base64-encoded bytes of payload data.</p>
    pub fn bytes(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Base64-encoded bytes of payload data.</p>
    pub fn set_bytes(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.bytes = input; self
    }
    /// <p>Base64-encoded bytes of payload data.</p>
    pub fn get_bytes(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.bytes
    }
    /// Consumes the builder and constructs a [`PayloadPart`](crate::types::PayloadPart).
    pub fn build(self) -> crate::types::PayloadPart {
        crate::types::PayloadPart {
            bytes: self.bytes
            ,
        }
    }
}
impl ::std::fmt::Debug for PayloadPartBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PayloadPartBuilder");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

