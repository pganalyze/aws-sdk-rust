// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
            #[derive(Debug)]
            pub struct ResponseStreamUnmarshaller;

            impl ResponseStreamUnmarshaller {
                pub fn new() -> Self {
                    ResponseStreamUnmarshaller
                }
            }
impl ::aws_smithy_eventstream::frame::UnmarshallMessage for ResponseStreamUnmarshaller {
    type Output = crate::types::ResponseStream;
    type Error = crate::types::error::ResponseStreamError;
    fn unmarshall(
                        &self,
                        message: &::aws_smithy_types::event_stream::Message
                    ) -> std::result::Result<::aws_smithy_eventstream::frame::UnmarshalledMessage<Self::Output, Self::Error>, ::aws_smithy_eventstream::error::Error> {
        let response_headers = ::aws_smithy_eventstream::smithy::parse_response_headers(message)?;
        match response_headers.message_type.as_str() {
            "event" =>  {
                match response_headers.smithy_type.as_str() {
                    "chunk" =>  {
                        let parsed =
                            crate::protocol_serde::shape_payload_part::de_payload_part_payload(&message.payload()[..])
                                            .map_err(|err| {
                                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall Chunk: {}", err))
                                            })?
                        ;
                        Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Event(crate::types::ResponseStream::Chunk(parsed)))
                    }
                    _unknown_variant =>  {
                        Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Event(crate::types::ResponseStream::Unknown))
                    }
                }
            }
            "exception" =>  {
                let generic = match crate::protocol_serde::parse_event_stream_error_metadata(message.payload()) {
                                        Ok(builder) => builder.build(),
                                        Err(err) => return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(crate::types::error::ResponseStreamError::unhandled(err))),
                                    };
                match response_headers.smithy_type.as_str() {
                "internalServerException" =>  {
                    let mut builder = crate::types::error::builders::InternalServerExceptionBuilder::default();
                    builder = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall internalServerException: {}", err))
                                                            })?;
                                                        builder.set_meta(Some(generic));
                                                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                                            crate::types::error::ResponseStreamError::InternalServerException(
                                                                builder.build()
                                                            )
                                                        ))
                }
                "modelStreamErrorException" =>  {
                    let mut builder = crate::types::error::builders::ModelStreamErrorExceptionBuilder::default();
                    builder = crate::protocol_serde::shape_model_stream_error_exception::de_model_stream_error_exception_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall modelStreamErrorException: {}", err))
                                                            })?;
                                                        builder.set_meta(Some(generic));
                                                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                                            crate::types::error::ResponseStreamError::ModelStreamErrorException(
                                                                builder.build()
                                                            )
                                                        ))
                }
                "validationException" =>  {
                    let mut builder = crate::types::error::builders::ValidationExceptionBuilder::default();
                    builder = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall validationException: {}", err))
                                                            })?;
                                                        builder.set_meta(Some(generic));
                                                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                                            crate::types::error::ResponseStreamError::ValidationException(
                                                                builder.build()
                                                            )
                                                        ))
                }
                "throttlingException" =>  {
                    let mut builder = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                    builder = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall throttlingException: {}", err))
                                                            })?;
                                                        builder.set_meta(Some(generic));
                                                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                                            crate::types::error::ResponseStreamError::ThrottlingException(
                                                                builder.build()
                                                            )
                                                        ))
                }
                "modelTimeoutException" =>  {
                    let mut builder = crate::types::error::builders::ModelTimeoutExceptionBuilder::default();
                    builder = crate::protocol_serde::shape_model_timeout_exception::de_model_timeout_exception_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                ::aws_smithy_eventstream::error::Error::unmarshalling(format!("failed to unmarshall modelTimeoutException: {}", err))
                                                            })?;
                                                        builder.set_meta(Some(generic));
                                                        return Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                                            crate::types::error::ResponseStreamError::ModelTimeoutException(
                                                                builder.build()
                                                            )
                                                        ))
                }
                _ => {}
                }
                Ok(::aws_smithy_eventstream::frame::UnmarshalledMessage::Error(crate::types::error::ResponseStreamError::generic(generic)))
            }
            value =>  {
                return Err(::aws_smithy_eventstream::error::Error::unmarshalling(format!("unrecognized :message-type: {}", value)));
            }
        }
    }
}

