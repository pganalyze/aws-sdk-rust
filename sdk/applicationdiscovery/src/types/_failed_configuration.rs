// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A configuration ID paired with an error message. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedConfiguration  {
    /// <p> The unique identifier of the configuration the failed to delete. </p>
    pub configuration_id: ::std::option::Option<::std::string::String>,
    /// <p> The integer error code associated with the error message. </p>
    pub error_status_code: i32,
    /// <p> A descriptive message indicating why the associated configuration failed to delete. </p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl  FailedConfiguration  {
    /// <p> The unique identifier of the configuration the failed to delete. </p>
    pub fn configuration_id(&self) -> ::std::option::Option<& str> {
        self.configuration_id.as_deref()
    }
    /// <p> The integer error code associated with the error message. </p>
    pub fn error_status_code(&self) -> i32 {
        self.error_status_code
    }
    /// <p> A descriptive message indicating why the associated configuration failed to delete. </p>
    pub fn error_message(&self) -> ::std::option::Option<& str> {
        self.error_message.as_deref()
    }
}
impl FailedConfiguration {
    /// Creates a new builder-style object to manufacture [`FailedConfiguration`](crate::types::FailedConfiguration).
    pub fn builder() -> crate::types::builders::FailedConfigurationBuilder {
        crate::types::builders::FailedConfigurationBuilder::default()
    }
}

/// A builder for [`FailedConfiguration`](crate::types::FailedConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailedConfigurationBuilder {
    pub(crate) configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_status_code: ::std::option::Option<i32>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl FailedConfigurationBuilder {
    /// <p> The unique identifier of the configuration the failed to delete. </p>
    pub fn configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier of the configuration the failed to delete. </p>
    pub fn set_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_id = input; self
    }
    /// <p> The unique identifier of the configuration the failed to delete. </p>
    pub fn get_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_id
    }
    /// <p> The integer error code associated with the error message. </p>
    pub fn error_status_code(mut self, input: i32) -> Self {
        self.error_status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p> The integer error code associated with the error message. </p>
    pub fn set_error_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error_status_code = input; self
    }
    /// <p> The integer error code associated with the error message. </p>
    pub fn get_error_status_code(&self) -> &::std::option::Option<i32> {
        &self.error_status_code
    }
    /// <p> A descriptive message indicating why the associated configuration failed to delete. </p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A descriptive message indicating why the associated configuration failed to delete. </p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input; self
    }
    /// <p> A descriptive message indicating why the associated configuration failed to delete. </p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`FailedConfiguration`](crate::types::FailedConfiguration).
    pub fn build(self) -> crate::types::FailedConfiguration {
        crate::types::FailedConfiguration {
            configuration_id: self.configuration_id
            ,
            error_status_code: self.error_status_code
                .unwrap_or_default()
            ,
            error_message: self.error_message
            ,
        }
    }
}

