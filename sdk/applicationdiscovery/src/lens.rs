// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_agents_output_output_next_token(input: &crate::operation::describe_agents::DescribeAgentsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_continuous_exports_output_output_next_token(input: &crate::operation::describe_continuous_exports::DescribeContinuousExportsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_export_configurations_output_output_next_token(input: &crate::operation::describe_export_configurations::DescribeExportConfigurationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_export_tasks_output_output_next_token(input: &crate::operation::describe_export_tasks::DescribeExportTasksOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_import_tasks_output_output_next_token(input: &crate::operation::describe_import_tasks::DescribeImportTasksOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_describe_tags_output_output_next_token(input: &crate::operation::describe_tags::DescribeTagsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_configurations_output_output_next_token(input: &crate::operation::list_configurations::ListConfigurationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_describe_agents_output_output_agents_info(input: crate::operation::describe_agents::DescribeAgentsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::AgentInfo>> {
                    let input = match input.agents_info {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_describe_continuous_exports_output_output_descriptions(input: crate::operation::describe_continuous_exports::DescribeContinuousExportsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::ContinuousExportDescription>> {
                    let input = match input.descriptions {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_describe_export_configurations_output_output_exports_info(input: crate::operation::describe_export_configurations::DescribeExportConfigurationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::ExportInfo>> {
                    let input = match input.exports_info {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_describe_export_tasks_output_output_exports_info(input: crate::operation::describe_export_tasks::DescribeExportTasksOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::ExportInfo>> {
                    let input = match input.exports_info {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_describe_import_tasks_output_output_tasks(input: crate::operation::describe_import_tasks::DescribeImportTasksOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::ImportTask>> {
                    let input = match input.tasks {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_describe_tags_output_output_tags(input: crate::operation::describe_tags::DescribeTagsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::ConfigurationTag>> {
                    let input = match input.tags {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_configurations_output_output_configurations(input: crate::operation::list_configurations::ListConfigurationsOutput) -> ::std::option::Option<::std::vec::Vec::<::std::collections::HashMap::<::std::string::String, ::std::string::String>>> {
                    let input = match input.configurations {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

