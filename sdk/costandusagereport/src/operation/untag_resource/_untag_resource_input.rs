// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UntagResourceInput  {
    /// <p>The report name of the report definition that tags are to be disassociated from.</p>
    pub report_name: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be disassociated from the report definition resource.</p>
    pub tag_keys: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl  UntagResourceInput  {
    /// <p>The report name of the report definition that tags are to be disassociated from.</p>
    pub fn report_name(&self) -> ::std::option::Option<& str> {
        self.report_name.as_deref()
    }
    /// <p>The tags to be disassociated from the report definition resource.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_keys.is_none()`.
    pub fn tag_keys(&self) -> & [::std::string::String] {
        self.tag_keys.as_deref()
        .unwrap_or_default()
    }
}
impl UntagResourceInput {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::operation::untag_resource::UntagResourceInput).
    pub fn builder() -> crate::operation::untag_resource::builders::UntagResourceInputBuilder {
        crate::operation::untag_resource::builders::UntagResourceInputBuilder::default()
    }
}

/// A builder for [`UntagResourceInput`](crate::operation::untag_resource::UntagResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UntagResourceInputBuilder {
    pub(crate) report_name: ::std::option::Option<::std::string::String>,
    pub(crate) tag_keys: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl UntagResourceInputBuilder {
    /// <p>The report name of the report definition that tags are to be disassociated from.</p>
    /// This field is required.
    pub fn report_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The report name of the report definition that tags are to be disassociated from.</p>
    pub fn set_report_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_name = input; self
    }
    /// <p>The report name of the report definition that tags are to be disassociated from.</p>
    pub fn get_report_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_name
    }
    /// Appends an item to `tag_keys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>The tags to be disassociated from the report definition resource.</p>
    pub fn tag_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tag_keys.unwrap_or_default();
                        v.push(input.into());
                        self.tag_keys = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The tags to be disassociated from the report definition resource.</p>
    pub fn set_tag_keys(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.tag_keys = input; self
    }
    /// <p>The tags to be disassociated from the report definition resource.</p>
    pub fn get_tag_keys(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.tag_keys
    }
    /// Consumes the builder and constructs a [`UntagResourceInput`](crate::operation::untag_resource::UntagResourceInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::untag_resource::UntagResourceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::untag_resource::UntagResourceInput {
                report_name: self.report_name
                ,
                tag_keys: self.tag_keys
                ,
            }
        )
    }
}

