// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagResourceInput  {
    /// <p>The report name of the report definition that tags are to be associated with.</p>
    pub report_name: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be assigned to the report definition resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec::<crate::types::Tag>>,
}
impl  TagResourceInput  {
    /// <p>The report name of the report definition that tags are to be associated with.</p>
    pub fn report_name(&self) -> ::std::option::Option<& str> {
        self.report_name.as_deref()
    }
    /// <p>The tags to be assigned to the report definition resource.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> & [crate::types::Tag] {
        self.tags.as_deref()
        .unwrap_or_default()
    }
}
impl TagResourceInput {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::operation::tag_resource::TagResourceInput).
    pub fn builder() -> crate::operation::tag_resource::builders::TagResourceInputBuilder {
        crate::operation::tag_resource::builders::TagResourceInputBuilder::default()
    }
}

/// A builder for [`TagResourceInput`](crate::operation::tag_resource::TagResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagResourceInputBuilder {
    pub(crate) report_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec::<crate::types::Tag>>,
}
impl TagResourceInputBuilder {
    /// <p>The report name of the report definition that tags are to be associated with.</p>
    /// This field is required.
    pub fn report_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The report name of the report definition that tags are to be associated with.</p>
    pub fn set_report_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_name = input; self
    }
    /// <p>The report name of the report definition that tags are to be associated with.</p>
    pub fn get_report_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to the report definition resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
                        v.push(input);
                        self.tags = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The tags to be assigned to the report definition resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Tag>>) -> Self {
        self.tags = input; self
    }
    /// <p>The tags to be assigned to the report definition resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`TagResourceInput`](crate::operation::tag_resource::TagResourceInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::tag_resource::TagResourceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::tag_resource::TagResourceInput {
                report_name: self.report_name
                ,
                tags: self.tags
                ,
            }
        )
    }
}

