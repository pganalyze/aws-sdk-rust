// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The logging configuration settings for the pipe.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipeLogConfiguration  {
    /// <p>The Amazon S3 logging configuration settings for the pipe.</p>
    pub s3_log_destination: ::std::option::Option<crate::types::S3LogDestination>,
    /// <p>The Amazon Kinesis Data Firehose logging configuration settings for the pipe.</p>
    pub firehose_log_destination: ::std::option::Option<crate::types::FirehoseLogDestination>,
    /// <p>The Amazon CloudWatch Logs logging configuration settings for the pipe.</p>
    pub cloudwatch_logs_log_destination: ::std::option::Option<crate::types::CloudwatchLogsLogDestination>,
    /// <p>The level of logging detail to include. This applies to all log destinations for the pipe.</p>
    pub level: ::std::option::Option<crate::types::LogLevel>,
    /// <p>Whether the execution data (specifically, the <code>payload</code>, <code>awsRequest</code>, and <code>awsResponse</code> fields) is included in the log messages for this pipe.</p> 
    /// <p>This applies to all log destinations for the pipe.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-execution-data">Including execution data in logs</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub include_execution_data: ::std::option::Option<::std::vec::Vec::<crate::types::IncludeExecutionDataOption>>,
}
impl  PipeLogConfiguration  {
    /// <p>The Amazon S3 logging configuration settings for the pipe.</p>
    pub fn s3_log_destination(&self) -> ::std::option::Option<& crate::types::S3LogDestination> {
        self.s3_log_destination.as_ref()
    }
    /// <p>The Amazon Kinesis Data Firehose logging configuration settings for the pipe.</p>
    pub fn firehose_log_destination(&self) -> ::std::option::Option<& crate::types::FirehoseLogDestination> {
        self.firehose_log_destination.as_ref()
    }
    /// <p>The Amazon CloudWatch Logs logging configuration settings for the pipe.</p>
    pub fn cloudwatch_logs_log_destination(&self) -> ::std::option::Option<& crate::types::CloudwatchLogsLogDestination> {
        self.cloudwatch_logs_log_destination.as_ref()
    }
    /// <p>The level of logging detail to include. This applies to all log destinations for the pipe.</p>
    pub fn level(&self) -> ::std::option::Option<& crate::types::LogLevel> {
        self.level.as_ref()
    }
    /// <p>Whether the execution data (specifically, the <code>payload</code>, <code>awsRequest</code>, and <code>awsResponse</code> fields) is included in the log messages for this pipe.</p> 
    /// <p>This applies to all log destinations for the pipe.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-execution-data">Including execution data in logs</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_execution_data.is_none()`.
    pub fn include_execution_data(&self) -> & [crate::types::IncludeExecutionDataOption] {
        self.include_execution_data.as_deref()
        .unwrap_or_default()
    }
}
impl PipeLogConfiguration {
    /// Creates a new builder-style object to manufacture [`PipeLogConfiguration`](crate::types::PipeLogConfiguration).
    pub fn builder() -> crate::types::builders::PipeLogConfigurationBuilder {
        crate::types::builders::PipeLogConfigurationBuilder::default()
    }
}

/// A builder for [`PipeLogConfiguration`](crate::types::PipeLogConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PipeLogConfigurationBuilder {
    pub(crate) s3_log_destination: ::std::option::Option<crate::types::S3LogDestination>,
    pub(crate) firehose_log_destination: ::std::option::Option<crate::types::FirehoseLogDestination>,
    pub(crate) cloudwatch_logs_log_destination: ::std::option::Option<crate::types::CloudwatchLogsLogDestination>,
    pub(crate) level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) include_execution_data: ::std::option::Option<::std::vec::Vec::<crate::types::IncludeExecutionDataOption>>,
}
impl PipeLogConfigurationBuilder {
    /// <p>The Amazon S3 logging configuration settings for the pipe.</p>
    pub fn s3_log_destination(mut self, input: crate::types::S3LogDestination) -> Self {
        self.s3_log_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 logging configuration settings for the pipe.</p>
    pub fn set_s3_log_destination(mut self, input: ::std::option::Option<crate::types::S3LogDestination>) -> Self {
        self.s3_log_destination = input; self
    }
    /// <p>The Amazon S3 logging configuration settings for the pipe.</p>
    pub fn get_s3_log_destination(&self) -> &::std::option::Option<crate::types::S3LogDestination> {
        &self.s3_log_destination
    }
    /// <p>The Amazon Kinesis Data Firehose logging configuration settings for the pipe.</p>
    pub fn firehose_log_destination(mut self, input: crate::types::FirehoseLogDestination) -> Self {
        self.firehose_log_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Kinesis Data Firehose logging configuration settings for the pipe.</p>
    pub fn set_firehose_log_destination(mut self, input: ::std::option::Option<crate::types::FirehoseLogDestination>) -> Self {
        self.firehose_log_destination = input; self
    }
    /// <p>The Amazon Kinesis Data Firehose logging configuration settings for the pipe.</p>
    pub fn get_firehose_log_destination(&self) -> &::std::option::Option<crate::types::FirehoseLogDestination> {
        &self.firehose_log_destination
    }
    /// <p>The Amazon CloudWatch Logs logging configuration settings for the pipe.</p>
    pub fn cloudwatch_logs_log_destination(mut self, input: crate::types::CloudwatchLogsLogDestination) -> Self {
        self.cloudwatch_logs_log_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon CloudWatch Logs logging configuration settings for the pipe.</p>
    pub fn set_cloudwatch_logs_log_destination(mut self, input: ::std::option::Option<crate::types::CloudwatchLogsLogDestination>) -> Self {
        self.cloudwatch_logs_log_destination = input; self
    }
    /// <p>The Amazon CloudWatch Logs logging configuration settings for the pipe.</p>
    pub fn get_cloudwatch_logs_log_destination(&self) -> &::std::option::Option<crate::types::CloudwatchLogsLogDestination> {
        &self.cloudwatch_logs_log_destination
    }
    /// <p>The level of logging detail to include. This applies to all log destinations for the pipe.</p>
    pub fn level(mut self, input: crate::types::LogLevel) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of logging detail to include. This applies to all log destinations for the pipe.</p>
    pub fn set_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.level = input; self
    }
    /// <p>The level of logging detail to include. This applies to all log destinations for the pipe.</p>
    pub fn get_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.level
    }
    /// Appends an item to `include_execution_data`.
    ///
    /// To override the contents of this collection use [`set_include_execution_data`](Self::set_include_execution_data).
    ///
    /// <p>Whether the execution data (specifically, the <code>payload</code>, <code>awsRequest</code>, and <code>awsResponse</code> fields) is included in the log messages for this pipe.</p> 
    /// <p>This applies to all log destinations for the pipe.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-execution-data">Including execution data in logs</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn include_execution_data(mut self, input: crate::types::IncludeExecutionDataOption) -> Self {
        let mut v = self.include_execution_data.unwrap_or_default();
                        v.push(input);
                        self.include_execution_data = ::std::option::Option::Some(v);
                        self
    }
    /// <p>Whether the execution data (specifically, the <code>payload</code>, <code>awsRequest</code>, and <code>awsResponse</code> fields) is included in the log messages for this pipe.</p> 
    /// <p>This applies to all log destinations for the pipe.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-execution-data">Including execution data in logs</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn set_include_execution_data(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::IncludeExecutionDataOption>>) -> Self {
        self.include_execution_data = input; self
    }
    /// <p>Whether the execution data (specifically, the <code>payload</code>, <code>awsRequest</code>, and <code>awsResponse</code> fields) is included in the log messages for this pipe.</p> 
    /// <p>This applies to all log destinations for the pipe.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-execution-data">Including execution data in logs</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn get_include_execution_data(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::IncludeExecutionDataOption>> {
        &self.include_execution_data
    }
    /// Consumes the builder and constructs a [`PipeLogConfiguration`](crate::types::PipeLogConfiguration).
    pub fn build(self) -> crate::types::PipeLogConfiguration {
        crate::types::PipeLogConfiguration {
            s3_log_destination: self.s3_log_destination
            ,
            firehose_log_destination: self.firehose_log_destination
            ,
            cloudwatch_logs_log_destination: self.cloudwatch_logs_log_destination
            ,
            level: self.level
            ,
            include_execution_data: self.include_execution_data
            ,
        }
    }
}

