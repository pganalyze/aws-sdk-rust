// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_pipe_input_input(
                     object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::operation::create_pipe::CreatePipeInput,
                ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.desired_state {
        object.key("DesiredState").string(var_2.as_str());
    }
    if let Some(var_3) = &input.enrichment {
        object.key("Enrichment").string(var_3.as_str());
    }
    if let Some(var_4) = &input.enrichment_parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("EnrichmentParameters").start_object();
        crate::protocol_serde::shape_pipe_enrichment_parameters::ser_pipe_enrichment_parameters(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_pipe_log_configuration_parameters::ser_pipe_log_configuration_parameters(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.role_arn {
        object.key("RoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.source {
        object.key("Source").string(var_9.as_str());
    }
    if let Some(var_10) = &input.source_parameters {
        #[allow(unused_mut)]
        let mut object_11 = object.key("SourceParameters").start_object();
        crate::protocol_serde::shape_pipe_source_parameters::ser_pipe_source_parameters(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
             {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.target {
        object.key("Target").string(var_16.as_str());
    }
    if let Some(var_17) = &input.target_parameters {
        #[allow(unused_mut)]
        let mut object_18 = object.key("TargetParameters").start_object();
        crate::protocol_serde::shape_pipe_target_parameters::ser_pipe_target_parameters(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}

