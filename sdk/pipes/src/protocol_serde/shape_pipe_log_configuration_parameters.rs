// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_pipe_log_configuration_parameters(
                     object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::types::PipeLogConfigurationParameters,
                ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.s3_log_destination {
        #[allow(unused_mut)]
        let mut object_2 = object.key("S3LogDestination").start_object();
        crate::protocol_serde::shape_s3_log_destination_parameters::ser_s3_log_destination_parameters(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.firehose_log_destination {
        #[allow(unused_mut)]
        let mut object_4 = object.key("FirehoseLogDestination").start_object();
        crate::protocol_serde::shape_firehose_log_destination_parameters::ser_firehose_log_destination_parameters(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.cloudwatch_logs_log_destination {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CloudwatchLogsLogDestination").start_object();
        crate::protocol_serde::shape_cloudwatch_logs_log_destination_parameters::ser_cloudwatch_logs_log_destination_parameters(&mut object_6, var_5)?;
        object_6.finish();
    }
     {
        object.key("Level").string(input.level.as_str());
    }
    if let Some(var_7) = &input.include_execution_data {
        let mut array_8 = object.key("IncludeExecutionData").start_array();
        for item_9 in var_7 {
             {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    Ok(())
}

