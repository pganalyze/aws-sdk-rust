// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartRetrainingSchedulerOutput  {
    /// <p>The name of the model whose retraining scheduler is being started. </p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the model whose retraining scheduler is being started. </p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the retraining scheduler. </p>
    pub status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    _request_id: Option<String>,
}
impl  StartRetrainingSchedulerOutput  {
    /// <p>The name of the model whose retraining scheduler is being started. </p>
    pub fn model_name(&self) -> ::std::option::Option<& str> {
        self.model_name.as_deref()
    }
    /// <p>The ARN of the model whose retraining scheduler is being started. </p>
    pub fn model_arn(&self) -> ::std::option::Option<& str> {
        self.model_arn.as_deref()
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::RetrainingSchedulerStatus> {
        self.status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for StartRetrainingSchedulerOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl StartRetrainingSchedulerOutput {
    /// Creates a new builder-style object to manufacture [`StartRetrainingSchedulerOutput`](crate::operation::start_retraining_scheduler::StartRetrainingSchedulerOutput).
    pub fn builder() -> crate::operation::start_retraining_scheduler::builders::StartRetrainingSchedulerOutputBuilder {
        crate::operation::start_retraining_scheduler::builders::StartRetrainingSchedulerOutputBuilder::default()
    }
}

/// A builder for [`StartRetrainingSchedulerOutput`](crate::operation::start_retraining_scheduler::StartRetrainingSchedulerOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartRetrainingSchedulerOutputBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    _request_id: Option<String>,
}
impl StartRetrainingSchedulerOutputBuilder {
    /// <p>The name of the model whose retraining scheduler is being started. </p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model whose retraining scheduler is being started. </p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input; self
    }
    /// <p>The name of the model whose retraining scheduler is being started. </p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The ARN of the model whose retraining scheduler is being started. </p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model whose retraining scheduler is being started. </p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input; self
    }
    /// <p>The ARN of the model whose retraining scheduler is being started. </p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn status(mut self, input: crate::types::RetrainingSchedulerStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RetrainingSchedulerStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RetrainingSchedulerStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`StartRetrainingSchedulerOutput`](crate::operation::start_retraining_scheduler::StartRetrainingSchedulerOutput).
    pub fn build(self) -> crate::operation::start_retraining_scheduler::StartRetrainingSchedulerOutput {
        crate::operation::start_retraining_scheduler::StartRetrainingSchedulerOutput {
            model_name: self.model_name
            ,
            model_arn: self.model_arn
            ,
            status: self.status
            ,
            _request_id: self._request_id,
        }
    }
}

