// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeRetrainingSchedulerOutput  {
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub retraining_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub retraining_frequency: ::std::option::Option<::std::string::String>,
    /// <p>The number of past days of data used for retraining.</p>
    pub lookback_window: ::std::option::Option<::std::string::String>,
    /// <p>The status of the retraining scheduler. </p>
    pub status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    /// <p>Indicates how the service uses new models. In <code>MANAGED</code> mode, new models are used for inference if they have better performance than the current model. In <code>MANUAL</code> mode, the new models are not used until they are <a href="https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation">manually activated</a>.</p>
    pub promote_mode: ::std::option::Option<crate::types::ModelPromoteMode>,
    /// <p>Indicates the time and date at which the retraining scheduler was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the time and date at which the retraining scheduler was updated. </p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl  DescribeRetrainingSchedulerOutput  {
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn model_name(&self) -> ::std::option::Option<& str> {
        self.model_name.as_deref()
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn model_arn(&self) -> ::std::option::Option<& str> {
        self.model_arn.as_deref()
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn retraining_start_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.retraining_start_date.as_ref()
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn retraining_frequency(&self) -> ::std::option::Option<& str> {
        self.retraining_frequency.as_deref()
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn lookback_window(&self) -> ::std::option::Option<& str> {
        self.lookback_window.as_deref()
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::RetrainingSchedulerStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates how the service uses new models. In <code>MANAGED</code> mode, new models are used for inference if they have better performance than the current model. In <code>MANUAL</code> mode, the new models are not used until they are <a href="https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation">manually activated</a>.</p>
    pub fn promote_mode(&self) -> ::std::option::Option<& crate::types::ModelPromoteMode> {
        self.promote_mode.as_ref()
    }
    /// <p>Indicates the time and date at which the retraining scheduler was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Indicates the time and date at which the retraining scheduler was updated. </p>
    pub fn updated_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeRetrainingSchedulerOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DescribeRetrainingSchedulerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRetrainingSchedulerOutput`](crate::operation::describe_retraining_scheduler::DescribeRetrainingSchedulerOutput).
    pub fn builder() -> crate::operation::describe_retraining_scheduler::builders::DescribeRetrainingSchedulerOutputBuilder {
        crate::operation::describe_retraining_scheduler::builders::DescribeRetrainingSchedulerOutputBuilder::default()
    }
}

/// A builder for [`DescribeRetrainingSchedulerOutput`](crate::operation::describe_retraining_scheduler::DescribeRetrainingSchedulerOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeRetrainingSchedulerOutputBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) retraining_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retraining_frequency: ::std::option::Option<::std::string::String>,
    pub(crate) lookback_window: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    pub(crate) promote_mode: ::std::option::Option<crate::types::ModelPromoteMode>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeRetrainingSchedulerOutputBuilder {
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input; self
    }
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input; self
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn retraining_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.retraining_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn set_retraining_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.retraining_start_date = input; self
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn get_retraining_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.retraining_start_date
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn retraining_frequency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retraining_frequency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn set_retraining_frequency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retraining_frequency = input; self
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn get_retraining_frequency(&self) -> &::std::option::Option<::std::string::String> {
        &self.retraining_frequency
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn lookback_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lookback_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn set_lookback_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lookback_window = input; self
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn get_lookback_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.lookback_window
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn status(mut self, input: crate::types::RetrainingSchedulerStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RetrainingSchedulerStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RetrainingSchedulerStatus> {
        &self.status
    }
    /// <p>Indicates how the service uses new models. In <code>MANAGED</code> mode, new models are used for inference if they have better performance than the current model. In <code>MANUAL</code> mode, the new models are not used until they are <a href="https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation">manually activated</a>.</p>
    pub fn promote_mode(mut self, input: crate::types::ModelPromoteMode) -> Self {
        self.promote_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how the service uses new models. In <code>MANAGED</code> mode, new models are used for inference if they have better performance than the current model. In <code>MANUAL</code> mode, the new models are not used until they are <a href="https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation">manually activated</a>.</p>
    pub fn set_promote_mode(mut self, input: ::std::option::Option<crate::types::ModelPromoteMode>) -> Self {
        self.promote_mode = input; self
    }
    /// <p>Indicates how the service uses new models. In <code>MANAGED</code> mode, new models are used for inference if they have better performance than the current model. In <code>MANUAL</code> mode, the new models are not used until they are <a href="https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/versioning-model.html#model-activation">manually activated</a>.</p>
    pub fn get_promote_mode(&self) -> &::std::option::Option<crate::types::ModelPromoteMode> {
        &self.promote_mode
    }
    /// <p>Indicates the time and date at which the retraining scheduler was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the time and date at which the retraining scheduler was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    /// <p>Indicates the time and date at which the retraining scheduler was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Indicates the time and date at which the retraining scheduler was updated. </p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the time and date at which the retraining scheduler was updated. </p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input; self
    }
    /// <p>Indicates the time and date at which the retraining scheduler was updated. </p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DescribeRetrainingSchedulerOutput`](crate::operation::describe_retraining_scheduler::DescribeRetrainingSchedulerOutput).
    pub fn build(self) -> crate::operation::describe_retraining_scheduler::DescribeRetrainingSchedulerOutput {
        crate::operation::describe_retraining_scheduler::DescribeRetrainingSchedulerOutput {
            model_name: self.model_name
            ,
            model_arn: self.model_arn
            ,
            retraining_start_date: self.retraining_start_date
            ,
            retraining_frequency: self.retraining_frequency
            ,
            lookback_window: self.lookback_window
            ,
            status: self.status
            ,
            promote_mode: self.promote_mode
            ,
            created_at: self.created_at
            ,
            updated_at: self.updated_at
            ,
            _request_id: self._request_id,
        }
    }
}

