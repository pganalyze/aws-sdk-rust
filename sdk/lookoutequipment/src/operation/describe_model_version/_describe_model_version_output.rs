// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeModelVersionOutput  {
    /// <p>The name of the machine learning model that this version belongs to.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.</p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The version of the machine learning model.</p>
    pub model_version: ::std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of the model version.</p>
    pub model_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the model version.</p>
    pub status: ::std::option::Option<crate::types::ModelVersionStatus>,
    /// <p>Indicates whether this model version was created by training or by importing.</p>
    pub source_type: ::std::option::Option<crate::types::ModelVersionSourceType>,
    /// <p>The name of the dataset used to train the model version.</p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset used to train the model version.</p>
    pub dataset_arn: ::std::option::Option<::std::string::String>,
    /// <p>The schema of the data used to train the model version.</p>
    pub schema: ::std::option::Option<::std::string::String>,
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub labels_input_configuration: ::std::option::Option<crate::types::LabelsInputConfiguration>,
    /// <p>The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.</p>
    pub training_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.</p>
    pub training_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.</p>
    pub evaluation_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.</p>
    pub evaluation_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the role that was used to train the model version.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub data_pre_processing_configuration: ::std::option::Option<crate::types::DataPreProcessingConfiguration>,
    /// <p>The time when the training of the version began.</p>
    pub training_execution_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the training of the version completed.</p>
    pub training_execution_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The failure message if the training of the model version failed.</p>
    pub failed_reason: ::std::option::Option<::std::string::String>,
    /// <p>Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.</p>
    pub model_metrics: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the last time the machine learning model version was updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the time and date at which the machine learning model version was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.</p>
    pub server_side_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub off_condition: ::std::option::Option<::std::string::String>,
    /// <p>If model version was imported, then this field is the arn of the source model version.</p>
    pub source_model_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the import job began. This field appears if the model version was imported.</p>
    pub import_job_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the import job completed. This field appears if the model version was imported.</p>
    pub import_job_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The size in bytes of the imported data. This field appears if the model version was imported.</p>
    pub imported_data_size_in_bytes: ::std::option::Option<i64>,
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub prior_model_metrics: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub retraining_available_data_in_days: ::std::option::Option<i32>,
    /// <p>Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining. </p>
    pub auto_promotion_result: ::std::option::Option<crate::types::AutoPromotionResult>,
    /// <p>Indicates the reason for the <code>AutoPromotionResult</code>. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using <code>MANUAL</code> promote mode. The model will be promoted in <code>MANAGED</code> promote mode if the performance is better than the previous model. </p>
    pub auto_promotion_result_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl  DescribeModelVersionOutput  {
    /// <p>The name of the machine learning model that this version belongs to.</p>
    pub fn model_name(&self) -> ::std::option::Option<& str> {
        self.model_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.</p>
    pub fn model_arn(&self) -> ::std::option::Option<& str> {
        self.model_arn.as_deref()
    }
    /// <p>The version of the machine learning model.</p>
    pub fn model_version(&self) -> ::std::option::Option<i64> {
        self.model_version
    }
    /// <p>The Amazon Resource Name (ARN) of the model version.</p>
    pub fn model_version_arn(&self) -> ::std::option::Option<& str> {
        self.model_version_arn.as_deref()
    }
    /// <p>The current status of the model version.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::ModelVersionStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates whether this model version was created by training or by importing.</p>
    pub fn source_type(&self) -> ::std::option::Option<& crate::types::ModelVersionSourceType> {
        self.source_type.as_ref()
    }
    /// <p>The name of the dataset used to train the model version.</p>
    pub fn dataset_name(&self) -> ::std::option::Option<& str> {
        self.dataset_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset used to train the model version.</p>
    pub fn dataset_arn(&self) -> ::std::option::Option<& str> {
        self.dataset_arn.as_deref()
    }
    /// <p>The schema of the data used to train the model version.</p>
    pub fn schema(&self) -> ::std::option::Option<& str> {
        self.schema.as_deref()
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn labels_input_configuration(&self) -> ::std::option::Option<& crate::types::LabelsInputConfiguration> {
        self.labels_input_configuration.as_ref()
    }
    /// <p>The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.</p>
    pub fn training_data_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_data_start_time.as_ref()
    }
    /// <p>The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.</p>
    pub fn training_data_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_data_end_time.as_ref()
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.</p>
    pub fn evaluation_data_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.evaluation_data_start_time.as_ref()
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.</p>
    pub fn evaluation_data_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.evaluation_data_end_time.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role that was used to train the model version.</p>
    pub fn role_arn(&self) -> ::std::option::Option<& str> {
        self.role_arn.as_deref()
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn data_pre_processing_configuration(&self) -> ::std::option::Option<& crate::types::DataPreProcessingConfiguration> {
        self.data_pre_processing_configuration.as_ref()
    }
    /// <p>The time when the training of the version began.</p>
    pub fn training_execution_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_execution_start_time.as_ref()
    }
    /// <p>The time when the training of the version completed.</p>
    pub fn training_execution_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_execution_end_time.as_ref()
    }
    /// <p>The failure message if the training of the model version failed.</p>
    pub fn failed_reason(&self) -> ::std::option::Option<& str> {
        self.failed_reason.as_deref()
    }
    /// <p>Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.</p>
    pub fn model_metrics(&self) -> ::std::option::Option<& str> {
        self.model_metrics.as_deref()
    }
    /// <p>Indicates the last time the machine learning model version was updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Indicates the time and date at which the machine learning model version was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.</p>
    pub fn server_side_kms_key_id(&self) -> ::std::option::Option<& str> {
        self.server_side_kms_key_id.as_deref()
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn off_condition(&self) -> ::std::option::Option<& str> {
        self.off_condition.as_deref()
    }
    /// <p>If model version was imported, then this field is the arn of the source model version.</p>
    pub fn source_model_version_arn(&self) -> ::std::option::Option<& str> {
        self.source_model_version_arn.as_deref()
    }
    /// <p>The date and time when the import job began. This field appears if the model version was imported.</p>
    pub fn import_job_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.import_job_start_time.as_ref()
    }
    /// <p>The date and time when the import job completed. This field appears if the model version was imported.</p>
    pub fn import_job_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.import_job_end_time.as_ref()
    }
    /// <p>The size in bytes of the imported data. This field appears if the model version was imported.</p>
    pub fn imported_data_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.imported_data_size_in_bytes
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn prior_model_metrics(&self) -> ::std::option::Option<& str> {
        self.prior_model_metrics.as_deref()
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn retraining_available_data_in_days(&self) -> ::std::option::Option<i32> {
        self.retraining_available_data_in_days
    }
    /// <p>Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining. </p>
    pub fn auto_promotion_result(&self) -> ::std::option::Option<& crate::types::AutoPromotionResult> {
        self.auto_promotion_result.as_ref()
    }
    /// <p>Indicates the reason for the <code>AutoPromotionResult</code>. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using <code>MANUAL</code> promote mode. The model will be promoted in <code>MANAGED</code> promote mode if the performance is better than the previous model. </p>
    pub fn auto_promotion_result_reason(&self) -> ::std::option::Option<& str> {
        self.auto_promotion_result_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeModelVersionOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DescribeModelVersionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeModelVersionOutput`](crate::operation::describe_model_version::DescribeModelVersionOutput).
    pub fn builder() -> crate::operation::describe_model_version::builders::DescribeModelVersionOutputBuilder {
        crate::operation::describe_model_version::builders::DescribeModelVersionOutputBuilder::default()
    }
}

/// A builder for [`DescribeModelVersionOutput`](crate::operation::describe_model_version::DescribeModelVersionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeModelVersionOutputBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_version: ::std::option::Option<i64>,
    pub(crate) model_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ModelVersionStatus>,
    pub(crate) source_type: ::std::option::Option<crate::types::ModelVersionSourceType>,
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) labels_input_configuration: ::std::option::Option<crate::types::LabelsInputConfiguration>,
    pub(crate) training_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_pre_processing_configuration: ::std::option::Option<crate::types::DataPreProcessingConfiguration>,
    pub(crate) training_execution_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_execution_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failed_reason: ::std::option::Option<::std::string::String>,
    pub(crate) model_metrics: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) server_side_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) off_condition: ::std::option::Option<::std::string::String>,
    pub(crate) source_model_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) import_job_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) import_job_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) imported_data_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) prior_model_metrics: ::std::option::Option<::std::string::String>,
    pub(crate) retraining_available_data_in_days: ::std::option::Option<i32>,
    pub(crate) auto_promotion_result: ::std::option::Option<crate::types::AutoPromotionResult>,
    pub(crate) auto_promotion_result_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeModelVersionOutputBuilder {
    /// <p>The name of the machine learning model that this version belongs to.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the machine learning model that this version belongs to.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input; self
    }
    /// <p>The name of the machine learning model that this version belongs to.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.</p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the parent machine learning model that this version belong to.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The version of the machine learning model.</p>
    pub fn model_version(mut self, input: i64) -> Self {
        self.model_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the machine learning model.</p>
    pub fn set_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.model_version = input; self
    }
    /// <p>The version of the machine learning model.</p>
    pub fn get_model_version(&self) -> &::std::option::Option<i64> {
        &self.model_version
    }
    /// <p>The Amazon Resource Name (ARN) of the model version.</p>
    pub fn model_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version.</p>
    pub fn set_model_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_version_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version.</p>
    pub fn get_model_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_version_arn
    }
    /// <p>The current status of the model version.</p>
    pub fn status(mut self, input: crate::types::ModelVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the model version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelVersionStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The current status of the model version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelVersionStatus> {
        &self.status
    }
    /// <p>Indicates whether this model version was created by training or by importing.</p>
    pub fn source_type(mut self, input: crate::types::ModelVersionSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this model version was created by training or by importing.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::ModelVersionSourceType>) -> Self {
        self.source_type = input; self
    }
    /// <p>Indicates whether this model version was created by training or by importing.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::ModelVersionSourceType> {
        &self.source_type
    }
    /// <p>The name of the dataset used to train the model version.</p>
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset used to train the model version.</p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input; self
    }
    /// <p>The name of the dataset used to train the model version.</p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset used to train the model version.</p>
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset used to train the model version.</p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset used to train the model version.</p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>The schema of the data used to train the model version.</p>
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema of the data used to train the model version.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input; self
    }
    /// <p>The schema of the data used to train the model version.</p>
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn labels_input_configuration(mut self, input: crate::types::LabelsInputConfiguration) -> Self {
        self.labels_input_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn set_labels_input_configuration(mut self, input: ::std::option::Option<crate::types::LabelsInputConfiguration>) -> Self {
        self.labels_input_configuration = input; self
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn get_labels_input_configuration(&self) -> &::std::option::Option<crate::types::LabelsInputConfiguration> {
        &self.labels_input_configuration
    }
    /// <p>The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.</p>
    pub fn training_data_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_data_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.</p>
    pub fn set_training_data_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_data_start_time = input; self
    }
    /// <p>The date on which the training data began being gathered. If you imported the version, this is the date that the training data in the source version began being gathered.</p>
    pub fn get_training_data_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_data_start_time
    }
    /// <p>The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.</p>
    pub fn training_data_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_data_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.</p>
    pub fn set_training_data_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_data_end_time = input; self
    }
    /// <p>The date on which the training data finished being gathered. If you imported the version, this is the date that the training data in the source version finished being gathered.</p>
    pub fn get_training_data_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_data_end_time
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.</p>
    pub fn evaluation_data_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.evaluation_data_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.</p>
    pub fn set_evaluation_data_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.evaluation_data_start_time = input; self
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version began being gathered.</p>
    pub fn get_evaluation_data_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.evaluation_data_start_time
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.</p>
    pub fn evaluation_data_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.evaluation_data_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.</p>
    pub fn set_evaluation_data_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.evaluation_data_end_time = input; self
    }
    /// <p>The date on which the data in the evaluation set began being gathered. If you imported the version, this is the date that the evaluation set data in the source version finished being gathered.</p>
    pub fn get_evaluation_data_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.evaluation_data_end_time
    }
    /// <p>The Amazon Resource Name (ARN) of the role that was used to train the model version.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role that was used to train the model version.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the role that was used to train the model version.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn data_pre_processing_configuration(mut self, input: crate::types::DataPreProcessingConfiguration) -> Self {
        self.data_pre_processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn set_data_pre_processing_configuration(mut self, input: ::std::option::Option<crate::types::DataPreProcessingConfiguration>) -> Self {
        self.data_pre_processing_configuration = input; self
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn get_data_pre_processing_configuration(&self) -> &::std::option::Option<crate::types::DataPreProcessingConfiguration> {
        &self.data_pre_processing_configuration
    }
    /// <p>The time when the training of the version began.</p>
    pub fn training_execution_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_execution_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the training of the version began.</p>
    pub fn set_training_execution_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_execution_start_time = input; self
    }
    /// <p>The time when the training of the version began.</p>
    pub fn get_training_execution_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_execution_start_time
    }
    /// <p>The time when the training of the version completed.</p>
    pub fn training_execution_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_execution_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the training of the version completed.</p>
    pub fn set_training_execution_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_execution_end_time = input; self
    }
    /// <p>The time when the training of the version completed.</p>
    pub fn get_training_execution_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_execution_end_time
    }
    /// <p>The failure message if the training of the model version failed.</p>
    pub fn failed_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failed_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure message if the training of the model version failed.</p>
    pub fn set_failed_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failed_reason = input; self
    }
    /// <p>The failure message if the training of the model version failed.</p>
    pub fn get_failed_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failed_reason
    }
    /// <p>Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.</p>
    pub fn model_metrics(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_metrics = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.</p>
    pub fn set_model_metrics(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_metrics = input; self
    }
    /// <p>Shows an aggregated summary, in JSON format, of the model's performance within the evaluation time range. These metrics are created when evaluating the model.</p>
    pub fn get_model_metrics(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_metrics
    }
    /// <p>Indicates the last time the machine learning model version was updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the last time the machine learning model version was updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input; self
    }
    /// <p>Indicates the last time the machine learning model version was updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>Indicates the time and date at which the machine learning model version was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the time and date at which the machine learning model version was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    /// <p>Indicates the time and date at which the machine learning model version was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.</p>
    pub fn server_side_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_side_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.</p>
    pub fn set_server_side_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_side_kms_key_id = input; self
    }
    /// <p>The identifier of the KMS key key used to encrypt model version data by Amazon Lookout for Equipment.</p>
    pub fn get_server_side_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_side_kms_key_id
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn off_condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.off_condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn set_off_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.off_condition = input; self
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn get_off_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.off_condition
    }
    /// <p>If model version was imported, then this field is the arn of the source model version.</p>
    pub fn source_model_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_model_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If model version was imported, then this field is the arn of the source model version.</p>
    pub fn set_source_model_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_model_version_arn = input; self
    }
    /// <p>If model version was imported, then this field is the arn of the source model version.</p>
    pub fn get_source_model_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_model_version_arn
    }
    /// <p>The date and time when the import job began. This field appears if the model version was imported.</p>
    pub fn import_job_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.import_job_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the import job began. This field appears if the model version was imported.</p>
    pub fn set_import_job_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.import_job_start_time = input; self
    }
    /// <p>The date and time when the import job began. This field appears if the model version was imported.</p>
    pub fn get_import_job_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.import_job_start_time
    }
    /// <p>The date and time when the import job completed. This field appears if the model version was imported.</p>
    pub fn import_job_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.import_job_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the import job completed. This field appears if the model version was imported.</p>
    pub fn set_import_job_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.import_job_end_time = input; self
    }
    /// <p>The date and time when the import job completed. This field appears if the model version was imported.</p>
    pub fn get_import_job_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.import_job_end_time
    }
    /// <p>The size in bytes of the imported data. This field appears if the model version was imported.</p>
    pub fn imported_data_size_in_bytes(mut self, input: i64) -> Self {
        self.imported_data_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size in bytes of the imported data. This field appears if the model version was imported.</p>
    pub fn set_imported_data_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.imported_data_size_in_bytes = input; self
    }
    /// <p>The size in bytes of the imported data. This field appears if the model version was imported.</p>
    pub fn get_imported_data_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.imported_data_size_in_bytes
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn prior_model_metrics(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prior_model_metrics = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn set_prior_model_metrics(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prior_model_metrics = input; self
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn get_prior_model_metrics(&self) -> &::std::option::Option<::std::string::String> {
        &self.prior_model_metrics
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn retraining_available_data_in_days(mut self, input: i32) -> Self {
        self.retraining_available_data_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn set_retraining_available_data_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retraining_available_data_in_days = input; self
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn get_retraining_available_data_in_days(&self) -> &::std::option::Option<i32> {
        &self.retraining_available_data_in_days
    }
    /// <p>Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining. </p>
    pub fn auto_promotion_result(mut self, input: crate::types::AutoPromotionResult) -> Self {
        self.auto_promotion_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining. </p>
    pub fn set_auto_promotion_result(mut self, input: ::std::option::Option<crate::types::AutoPromotionResult>) -> Self {
        self.auto_promotion_result = input; self
    }
    /// <p>Indicates whether the model version was promoted to be the active version after retraining or if there was an error with or cancellation of the retraining. </p>
    pub fn get_auto_promotion_result(&self) -> &::std::option::Option<crate::types::AutoPromotionResult> {
        &self.auto_promotion_result
    }
    /// <p>Indicates the reason for the <code>AutoPromotionResult</code>. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using <code>MANUAL</code> promote mode. The model will be promoted in <code>MANAGED</code> promote mode if the performance is better than the previous model. </p>
    pub fn auto_promotion_result_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auto_promotion_result_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the reason for the <code>AutoPromotionResult</code>. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using <code>MANUAL</code> promote mode. The model will be promoted in <code>MANAGED</code> promote mode if the performance is better than the previous model. </p>
    pub fn set_auto_promotion_result_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auto_promotion_result_reason = input; self
    }
    /// <p>Indicates the reason for the <code>AutoPromotionResult</code>. For example, a model might not be promoted if its performance was worse than the active version, if there was an error during training, or if the retraining scheduler was using <code>MANUAL</code> promote mode. The model will be promoted in <code>MANAGED</code> promote mode if the performance is better than the previous model. </p>
    pub fn get_auto_promotion_result_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.auto_promotion_result_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DescribeModelVersionOutput`](crate::operation::describe_model_version::DescribeModelVersionOutput).
    pub fn build(self) -> crate::operation::describe_model_version::DescribeModelVersionOutput {
        crate::operation::describe_model_version::DescribeModelVersionOutput {
            model_name: self.model_name
            ,
            model_arn: self.model_arn
            ,
            model_version: self.model_version
            ,
            model_version_arn: self.model_version_arn
            ,
            status: self.status
            ,
            source_type: self.source_type
            ,
            dataset_name: self.dataset_name
            ,
            dataset_arn: self.dataset_arn
            ,
            schema: self.schema
            ,
            labels_input_configuration: self.labels_input_configuration
            ,
            training_data_start_time: self.training_data_start_time
            ,
            training_data_end_time: self.training_data_end_time
            ,
            evaluation_data_start_time: self.evaluation_data_start_time
            ,
            evaluation_data_end_time: self.evaluation_data_end_time
            ,
            role_arn: self.role_arn
            ,
            data_pre_processing_configuration: self.data_pre_processing_configuration
            ,
            training_execution_start_time: self.training_execution_start_time
            ,
            training_execution_end_time: self.training_execution_end_time
            ,
            failed_reason: self.failed_reason
            ,
            model_metrics: self.model_metrics
            ,
            last_updated_time: self.last_updated_time
            ,
            created_at: self.created_at
            ,
            server_side_kms_key_id: self.server_side_kms_key_id
            ,
            off_condition: self.off_condition
            ,
            source_model_version_arn: self.source_model_version_arn
            ,
            import_job_start_time: self.import_job_start_time
            ,
            import_job_end_time: self.import_job_end_time
            ,
            imported_data_size_in_bytes: self.imported_data_size_in_bytes
            ,
            prior_model_metrics: self.prior_model_metrics
            ,
            retraining_available_data_in_days: self.retraining_available_data_in_days
            ,
            auto_promotion_result: self.auto_promotion_result
            ,
            auto_promotion_result_reason: self.auto_promotion_result_reason
            ,
            _request_id: self._request_id,
        }
    }
}

