// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeModelOutput  {
    /// <p>The name of the machine learning model being described. </p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the machine learning model being described. </p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dataset being used by the machine learning being described. </p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described. </p>
    pub dataset_arn: ::std::option::Option<::std::string::String>,
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub schema: ::std::option::Option<::std::string::String>,
    /// <p>Specifies configuration information about the labels input, including its S3 location. </p>
    pub labels_input_configuration: ::std::option::Option<crate::types::LabelsInputConfiguration>,
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model. </p>
    pub training_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model. </p>
    pub training_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model. </p>
    pub evaluation_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model. </p>
    pub evaluation_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described. </p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub data_pre_processing_configuration: ::std::option::Option<crate::types::DataPreProcessingConfiguration>,
    /// <p>Specifies the current status of the model being described. Status describes the status of the most recent action of the model. </p>
    pub status: ::std::option::Option<crate::types::ModelStatus>,
    /// <p>Indicates the time at which the training of the machine learning model began. </p>
    pub training_execution_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the time at which the training of the machine learning model was completed. </p>
    pub training_execution_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If the training of the machine learning model failed, this indicates the reason for that failure. </p>
    pub failed_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model. </p>
    pub model_metrics: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the last time the machine learning model was updated. The type of update is not specified. </p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the time and date at which the machine learning model was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub server_side_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub off_condition: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.</p>
    pub source_model_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the import job was started. This field appears if the active model version was imported.</p>
    pub import_job_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the import job was completed. This field appears if the active model version was imported.</p>
    pub import_job_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the model version used by the inference schedular when running a scheduled inference execution.</p>
    pub active_model_version: ::std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.</p>
    pub active_model_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date the active model version was activated.</p>
    pub model_version_activated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The model version that was set as the active model version prior to the current active model version.</p>
    pub previous_active_model_version: ::std::option::Option<i64>,
    /// <p>The ARN of the model version that was set as the active model version prior to the current active model version.</p>
    pub previous_active_model_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the previous active model version was activated.</p>
    pub previous_model_version_activated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub prior_model_metrics: ::std::option::Option<::std::string::String>,
    /// <p>If the model version was generated by retraining and the training failed, this indicates the reason for that failure. </p>
    pub latest_scheduled_retraining_failed_reason: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the status of the most recent scheduled retraining run. </p>
    pub latest_scheduled_retraining_status: ::std::option::Option<crate::types::ModelVersionStatus>,
    /// <p>Indicates the most recent model version that was generated by retraining. </p>
    pub latest_scheduled_retraining_model_version: ::std::option::Option<i64>,
    /// <p>Indicates the start time of the most recent scheduled retraining run. </p>
    pub latest_scheduled_retraining_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub latest_scheduled_retraining_available_data_in_days: ::std::option::Option<i32>,
    /// <p>Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub next_scheduled_retraining_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the start time of the inference data that has been accumulated. </p>
    pub accumulated_inference_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the end time of the inference data that has been accumulated. </p>
    pub accumulated_inference_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the status of the retraining scheduler. </p>
    pub retraining_scheduler_status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    _request_id: Option<String>,
}
impl  DescribeModelOutput  {
    /// <p>The name of the machine learning model being described. </p>
    pub fn model_name(&self) -> ::std::option::Option<& str> {
        self.model_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the machine learning model being described. </p>
    pub fn model_arn(&self) -> ::std::option::Option<& str> {
        self.model_arn.as_deref()
    }
    /// <p>The name of the dataset being used by the machine learning being described. </p>
    pub fn dataset_name(&self) -> ::std::option::Option<& str> {
        self.dataset_name.as_deref()
    }
    /// <p>The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described. </p>
    pub fn dataset_arn(&self) -> ::std::option::Option<& str> {
        self.dataset_arn.as_deref()
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn schema(&self) -> ::std::option::Option<& str> {
        self.schema.as_deref()
    }
    /// <p>Specifies configuration information about the labels input, including its S3 location. </p>
    pub fn labels_input_configuration(&self) -> ::std::option::Option<& crate::types::LabelsInputConfiguration> {
        self.labels_input_configuration.as_ref()
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model. </p>
    pub fn training_data_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_data_start_time.as_ref()
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model. </p>
    pub fn training_data_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_data_end_time.as_ref()
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model. </p>
    pub fn evaluation_data_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.evaluation_data_start_time.as_ref()
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model. </p>
    pub fn evaluation_data_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.evaluation_data_end_time.as_ref()
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described. </p>
    pub fn role_arn(&self) -> ::std::option::Option<& str> {
        self.role_arn.as_deref()
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn data_pre_processing_configuration(&self) -> ::std::option::Option<& crate::types::DataPreProcessingConfiguration> {
        self.data_pre_processing_configuration.as_ref()
    }
    /// <p>Specifies the current status of the model being described. Status describes the status of the most recent action of the model. </p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::ModelStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates the time at which the training of the machine learning model began. </p>
    pub fn training_execution_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_execution_start_time.as_ref()
    }
    /// <p>Indicates the time at which the training of the machine learning model was completed. </p>
    pub fn training_execution_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.training_execution_end_time.as_ref()
    }
    /// <p>If the training of the machine learning model failed, this indicates the reason for that failure. </p>
    pub fn failed_reason(&self) -> ::std::option::Option<& str> {
        self.failed_reason.as_deref()
    }
    /// <p>The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model. </p>
    pub fn model_metrics(&self) -> ::std::option::Option<& str> {
        self.model_metrics.as_deref()
    }
    /// <p>Indicates the last time the machine learning model was updated. The type of update is not specified. </p>
    pub fn last_updated_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Indicates the time and date at which the machine learning model was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(&self) -> ::std::option::Option<& str> {
        self.server_side_kms_key_id.as_deref()
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn off_condition(&self) -> ::std::option::Option<& str> {
        self.off_condition.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.</p>
    pub fn source_model_version_arn(&self) -> ::std::option::Option<& str> {
        self.source_model_version_arn.as_deref()
    }
    /// <p>The date and time when the import job was started. This field appears if the active model version was imported.</p>
    pub fn import_job_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.import_job_start_time.as_ref()
    }
    /// <p>The date and time when the import job was completed. This field appears if the active model version was imported.</p>
    pub fn import_job_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.import_job_end_time.as_ref()
    }
    /// <p>The name of the model version used by the inference schedular when running a scheduled inference execution.</p>
    pub fn active_model_version(&self) -> ::std::option::Option<i64> {
        self.active_model_version
    }
    /// <p>The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.</p>
    pub fn active_model_version_arn(&self) -> ::std::option::Option<& str> {
        self.active_model_version_arn.as_deref()
    }
    /// <p>The date the active model version was activated.</p>
    pub fn model_version_activated_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.model_version_activated_at.as_ref()
    }
    /// <p>The model version that was set as the active model version prior to the current active model version.</p>
    pub fn previous_active_model_version(&self) -> ::std::option::Option<i64> {
        self.previous_active_model_version
    }
    /// <p>The ARN of the model version that was set as the active model version prior to the current active model version.</p>
    pub fn previous_active_model_version_arn(&self) -> ::std::option::Option<& str> {
        self.previous_active_model_version_arn.as_deref()
    }
    /// <p>The date and time when the previous active model version was activated.</p>
    pub fn previous_model_version_activated_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.previous_model_version_activated_at.as_ref()
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn prior_model_metrics(&self) -> ::std::option::Option<& str> {
        self.prior_model_metrics.as_deref()
    }
    /// <p>If the model version was generated by retraining and the training failed, this indicates the reason for that failure. </p>
    pub fn latest_scheduled_retraining_failed_reason(&self) -> ::std::option::Option<& str> {
        self.latest_scheduled_retraining_failed_reason.as_deref()
    }
    /// <p>Indicates the status of the most recent scheduled retraining run. </p>
    pub fn latest_scheduled_retraining_status(&self) -> ::std::option::Option<& crate::types::ModelVersionStatus> {
        self.latest_scheduled_retraining_status.as_ref()
    }
    /// <p>Indicates the most recent model version that was generated by retraining. </p>
    pub fn latest_scheduled_retraining_model_version(&self) -> ::std::option::Option<i64> {
        self.latest_scheduled_retraining_model_version
    }
    /// <p>Indicates the start time of the most recent scheduled retraining run. </p>
    pub fn latest_scheduled_retraining_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.latest_scheduled_retraining_start_time.as_ref()
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn latest_scheduled_retraining_available_data_in_days(&self) -> ::std::option::Option<i32> {
        self.latest_scheduled_retraining_available_data_in_days
    }
    /// <p>Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn next_scheduled_retraining_start_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.next_scheduled_retraining_start_date.as_ref()
    }
    /// <p>Indicates the start time of the inference data that has been accumulated. </p>
    pub fn accumulated_inference_data_start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.accumulated_inference_data_start_time.as_ref()
    }
    /// <p>Indicates the end time of the inference data that has been accumulated. </p>
    pub fn accumulated_inference_data_end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.accumulated_inference_data_end_time.as_ref()
    }
    /// <p>Indicates the status of the retraining scheduler. </p>
    pub fn retraining_scheduler_status(&self) -> ::std::option::Option<& crate::types::RetrainingSchedulerStatus> {
        self.retraining_scheduler_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeModelOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DescribeModelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeModelOutput`](crate::operation::describe_model::DescribeModelOutput).
    pub fn builder() -> crate::operation::describe_model::builders::DescribeModelOutputBuilder {
        crate::operation::describe_model::builders::DescribeModelOutputBuilder::default()
    }
}

/// A builder for [`DescribeModelOutput`](crate::operation::describe_model::DescribeModelOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeModelOutputBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) labels_input_configuration: ::std::option::Option<crate::types::LabelsInputConfiguration>,
    pub(crate) training_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_pre_processing_configuration: ::std::option::Option<crate::types::DataPreProcessingConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::ModelStatus>,
    pub(crate) training_execution_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) training_execution_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failed_reason: ::std::option::Option<::std::string::String>,
    pub(crate) model_metrics: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) server_side_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) off_condition: ::std::option::Option<::std::string::String>,
    pub(crate) source_model_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) import_job_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) import_job_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) active_model_version: ::std::option::Option<i64>,
    pub(crate) active_model_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_version_activated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) previous_active_model_version: ::std::option::Option<i64>,
    pub(crate) previous_active_model_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) previous_model_version_activated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) prior_model_metrics: ::std::option::Option<::std::string::String>,
    pub(crate) latest_scheduled_retraining_failed_reason: ::std::option::Option<::std::string::String>,
    pub(crate) latest_scheduled_retraining_status: ::std::option::Option<crate::types::ModelVersionStatus>,
    pub(crate) latest_scheduled_retraining_model_version: ::std::option::Option<i64>,
    pub(crate) latest_scheduled_retraining_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) latest_scheduled_retraining_available_data_in_days: ::std::option::Option<i32>,
    pub(crate) next_scheduled_retraining_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) accumulated_inference_data_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) accumulated_inference_data_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retraining_scheduler_status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    _request_id: Option<String>,
}
impl DescribeModelOutputBuilder {
    /// <p>The name of the machine learning model being described. </p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the machine learning model being described. </p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input; self
    }
    /// <p>The name of the machine learning model being described. </p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The Amazon Resource Name (ARN) of the machine learning model being described. </p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the machine learning model being described. </p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the machine learning model being described. </p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The name of the dataset being used by the machine learning being described. </p>
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset being used by the machine learning being described. </p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input; self
    }
    /// <p>The name of the dataset being used by the machine learning being described. </p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p>The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described. </p>
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described. </p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input; self
    }
    /// <p>The Amazon Resouce Name (ARN) of the dataset used to create the machine learning model being described. </p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input; self
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// <p>Specifies configuration information about the labels input, including its S3 location. </p>
    pub fn labels_input_configuration(mut self, input: crate::types::LabelsInputConfiguration) -> Self {
        self.labels_input_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies configuration information about the labels input, including its S3 location. </p>
    pub fn set_labels_input_configuration(mut self, input: ::std::option::Option<crate::types::LabelsInputConfiguration>) -> Self {
        self.labels_input_configuration = input; self
    }
    /// <p>Specifies configuration information about the labels input, including its S3 location. </p>
    pub fn get_labels_input_configuration(&self) -> &::std::option::Option<crate::types::LabelsInputConfiguration> {
        &self.labels_input_configuration
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model. </p>
    pub fn training_data_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_data_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model. </p>
    pub fn set_training_data_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_data_start_time = input; self
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of training data for the machine learning model. </p>
    pub fn get_training_data_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_data_start_time
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model. </p>
    pub fn training_data_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_data_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model. </p>
    pub fn set_training_data_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_data_end_time = input; self
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of training data for the machine learning model. </p>
    pub fn get_training_data_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_data_end_time
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model. </p>
    pub fn evaluation_data_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.evaluation_data_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model. </p>
    pub fn set_evaluation_data_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.evaluation_data_start_time = input; self
    }
    /// <p> Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the machine learning model. </p>
    pub fn get_evaluation_data_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.evaluation_data_start_time
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model. </p>
    pub fn evaluation_data_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.evaluation_data_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model. </p>
    pub fn set_evaluation_data_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.evaluation_data_end_time = input; self
    }
    /// <p> Indicates the time reference in the dataset that was used to end the subset of evaluation data for the machine learning model. </p>
    pub fn get_evaluation_data_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.evaluation_data_end_time
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described. </p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described. </p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input; self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the machine learning model being described. </p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn data_pre_processing_configuration(mut self, input: crate::types::DataPreProcessingConfiguration) -> Self {
        self.data_pre_processing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn set_data_pre_processing_configuration(mut self, input: ::std::option::Option<crate::types::DataPreProcessingConfiguration>) -> Self {
        self.data_pre_processing_configuration = input; self
    }
    /// <p>The configuration is the <code>TargetSamplingRate</code>, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the <code>TargetSamplingRate</code> is 1 minute.</p> 
    /// <p>When providing a value for the <code>TargetSamplingRate</code>, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore <i>PT1S</i>, the value for a 15 minute rate is <i>PT15M</i>, and the value for a 1 hour rate is <i>PT1H</i> </p>
    pub fn get_data_pre_processing_configuration(&self) -> &::std::option::Option<crate::types::DataPreProcessingConfiguration> {
        &self.data_pre_processing_configuration
    }
    /// <p>Specifies the current status of the model being described. Status describes the status of the most recent action of the model. </p>
    pub fn status(mut self, input: crate::types::ModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the current status of the model being described. Status describes the status of the most recent action of the model. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelStatus>) -> Self {
        self.status = input; self
    }
    /// <p>Specifies the current status of the model being described. Status describes the status of the most recent action of the model. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelStatus> {
        &self.status
    }
    /// <p>Indicates the time at which the training of the machine learning model began. </p>
    pub fn training_execution_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_execution_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the time at which the training of the machine learning model began. </p>
    pub fn set_training_execution_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_execution_start_time = input; self
    }
    /// <p>Indicates the time at which the training of the machine learning model began. </p>
    pub fn get_training_execution_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_execution_start_time
    }
    /// <p>Indicates the time at which the training of the machine learning model was completed. </p>
    pub fn training_execution_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.training_execution_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the time at which the training of the machine learning model was completed. </p>
    pub fn set_training_execution_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.training_execution_end_time = input; self
    }
    /// <p>Indicates the time at which the training of the machine learning model was completed. </p>
    pub fn get_training_execution_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.training_execution_end_time
    }
    /// <p>If the training of the machine learning model failed, this indicates the reason for that failure. </p>
    pub fn failed_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failed_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the training of the machine learning model failed, this indicates the reason for that failure. </p>
    pub fn set_failed_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failed_reason = input; self
    }
    /// <p>If the training of the machine learning model failed, this indicates the reason for that failure. </p>
    pub fn get_failed_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failed_reason
    }
    /// <p>The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model. </p>
    pub fn model_metrics(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_metrics = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model. </p>
    pub fn set_model_metrics(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_metrics = input; self
    }
    /// <p>The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model. </p>
    pub fn get_model_metrics(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_metrics
    }
    /// <p>Indicates the last time the machine learning model was updated. The type of update is not specified. </p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the last time the machine learning model was updated. The type of update is not specified. </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input; self
    }
    /// <p>Indicates the last time the machine learning model was updated. The type of update is not specified. </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>Indicates the time and date at which the machine learning model was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the time and date at which the machine learning model was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    /// <p>Indicates the time and date at which the machine learning model was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_side_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn set_server_side_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_side_kms_key_id = input; self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment. </p>
    pub fn get_server_side_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_side_kms_key_id
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn off_condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.off_condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn set_off_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.off_condition = input; self
    }
    /// <p>Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.</p>
    pub fn get_off_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.off_condition
    }
    /// <p>The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.</p>
    pub fn source_model_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_model_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.</p>
    pub fn set_source_model_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_model_version_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the source model version. This field appears if the active model version was imported.</p>
    pub fn get_source_model_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_model_version_arn
    }
    /// <p>The date and time when the import job was started. This field appears if the active model version was imported.</p>
    pub fn import_job_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.import_job_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the import job was started. This field appears if the active model version was imported.</p>
    pub fn set_import_job_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.import_job_start_time = input; self
    }
    /// <p>The date and time when the import job was started. This field appears if the active model version was imported.</p>
    pub fn get_import_job_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.import_job_start_time
    }
    /// <p>The date and time when the import job was completed. This field appears if the active model version was imported.</p>
    pub fn import_job_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.import_job_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the import job was completed. This field appears if the active model version was imported.</p>
    pub fn set_import_job_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.import_job_end_time = input; self
    }
    /// <p>The date and time when the import job was completed. This field appears if the active model version was imported.</p>
    pub fn get_import_job_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.import_job_end_time
    }
    /// <p>The name of the model version used by the inference schedular when running a scheduled inference execution.</p>
    pub fn active_model_version(mut self, input: i64) -> Self {
        self.active_model_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the model version used by the inference schedular when running a scheduled inference execution.</p>
    pub fn set_active_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.active_model_version = input; self
    }
    /// <p>The name of the model version used by the inference schedular when running a scheduled inference execution.</p>
    pub fn get_active_model_version(&self) -> &::std::option::Option<i64> {
        &self.active_model_version
    }
    /// <p>The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.</p>
    pub fn active_model_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.active_model_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.</p>
    pub fn set_active_model_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.active_model_version_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version used by the inference scheduler when running a scheduled inference execution.</p>
    pub fn get_active_model_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.active_model_version_arn
    }
    /// <p>The date the active model version was activated.</p>
    pub fn model_version_activated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.model_version_activated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the active model version was activated.</p>
    pub fn set_model_version_activated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.model_version_activated_at = input; self
    }
    /// <p>The date the active model version was activated.</p>
    pub fn get_model_version_activated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.model_version_activated_at
    }
    /// <p>The model version that was set as the active model version prior to the current active model version.</p>
    pub fn previous_active_model_version(mut self, input: i64) -> Self {
        self.previous_active_model_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model version that was set as the active model version prior to the current active model version.</p>
    pub fn set_previous_active_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.previous_active_model_version = input; self
    }
    /// <p>The model version that was set as the active model version prior to the current active model version.</p>
    pub fn get_previous_active_model_version(&self) -> &::std::option::Option<i64> {
        &self.previous_active_model_version
    }
    /// <p>The ARN of the model version that was set as the active model version prior to the current active model version.</p>
    pub fn previous_active_model_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_active_model_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model version that was set as the active model version prior to the current active model version.</p>
    pub fn set_previous_active_model_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_active_model_version_arn = input; self
    }
    /// <p>The ARN of the model version that was set as the active model version prior to the current active model version.</p>
    pub fn get_previous_active_model_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_active_model_version_arn
    }
    /// <p>The date and time when the previous active model version was activated.</p>
    pub fn previous_model_version_activated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.previous_model_version_activated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the previous active model version was activated.</p>
    pub fn set_previous_model_version_activated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.previous_model_version_activated_at = input; self
    }
    /// <p>The date and time when the previous active model version was activated.</p>
    pub fn get_previous_model_version_activated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.previous_model_version_activated_at
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn prior_model_metrics(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prior_model_metrics = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn set_prior_model_metrics(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prior_model_metrics = input; self
    }
    /// <p>If the model version was retrained, this field shows a summary of the performance of the prior model on the new training range. You can use the information in this JSON-formatted object to compare the new model version and the prior model version.</p>
    pub fn get_prior_model_metrics(&self) -> &::std::option::Option<::std::string::String> {
        &self.prior_model_metrics
    }
    /// <p>If the model version was generated by retraining and the training failed, this indicates the reason for that failure. </p>
    pub fn latest_scheduled_retraining_failed_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_scheduled_retraining_failed_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the model version was generated by retraining and the training failed, this indicates the reason for that failure. </p>
    pub fn set_latest_scheduled_retraining_failed_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_scheduled_retraining_failed_reason = input; self
    }
    /// <p>If the model version was generated by retraining and the training failed, this indicates the reason for that failure. </p>
    pub fn get_latest_scheduled_retraining_failed_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_scheduled_retraining_failed_reason
    }
    /// <p>Indicates the status of the most recent scheduled retraining run. </p>
    pub fn latest_scheduled_retraining_status(mut self, input: crate::types::ModelVersionStatus) -> Self {
        self.latest_scheduled_retraining_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of the most recent scheduled retraining run. </p>
    pub fn set_latest_scheduled_retraining_status(mut self, input: ::std::option::Option<crate::types::ModelVersionStatus>) -> Self {
        self.latest_scheduled_retraining_status = input; self
    }
    /// <p>Indicates the status of the most recent scheduled retraining run. </p>
    pub fn get_latest_scheduled_retraining_status(&self) -> &::std::option::Option<crate::types::ModelVersionStatus> {
        &self.latest_scheduled_retraining_status
    }
    /// <p>Indicates the most recent model version that was generated by retraining. </p>
    pub fn latest_scheduled_retraining_model_version(mut self, input: i64) -> Self {
        self.latest_scheduled_retraining_model_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the most recent model version that was generated by retraining. </p>
    pub fn set_latest_scheduled_retraining_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.latest_scheduled_retraining_model_version = input; self
    }
    /// <p>Indicates the most recent model version that was generated by retraining. </p>
    pub fn get_latest_scheduled_retraining_model_version(&self) -> &::std::option::Option<i64> {
        &self.latest_scheduled_retraining_model_version
    }
    /// <p>Indicates the start time of the most recent scheduled retraining run. </p>
    pub fn latest_scheduled_retraining_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_scheduled_retraining_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the start time of the most recent scheduled retraining run. </p>
    pub fn set_latest_scheduled_retraining_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_scheduled_retraining_start_time = input; self
    }
    /// <p>Indicates the start time of the most recent scheduled retraining run. </p>
    pub fn get_latest_scheduled_retraining_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_scheduled_retraining_start_time
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn latest_scheduled_retraining_available_data_in_days(mut self, input: i32) -> Self {
        self.latest_scheduled_retraining_available_data_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn set_latest_scheduled_retraining_available_data_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.latest_scheduled_retraining_available_data_in_days = input; self
    }
    /// <p>Indicates the number of days of data used in the most recent scheduled retraining run. </p>
    pub fn get_latest_scheduled_retraining_available_data_in_days(&self) -> &::std::option::Option<i32> {
        &self.latest_scheduled_retraining_available_data_in_days
    }
    /// <p>Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn next_scheduled_retraining_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.next_scheduled_retraining_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn set_next_scheduled_retraining_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.next_scheduled_retraining_start_date = input; self
    }
    /// <p>Indicates the date and time that the next scheduled retraining run will start on. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn get_next_scheduled_retraining_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.next_scheduled_retraining_start_date
    }
    /// <p>Indicates the start time of the inference data that has been accumulated. </p>
    pub fn accumulated_inference_data_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.accumulated_inference_data_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the start time of the inference data that has been accumulated. </p>
    pub fn set_accumulated_inference_data_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.accumulated_inference_data_start_time = input; self
    }
    /// <p>Indicates the start time of the inference data that has been accumulated. </p>
    pub fn get_accumulated_inference_data_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.accumulated_inference_data_start_time
    }
    /// <p>Indicates the end time of the inference data that has been accumulated. </p>
    pub fn accumulated_inference_data_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.accumulated_inference_data_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the end time of the inference data that has been accumulated. </p>
    pub fn set_accumulated_inference_data_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.accumulated_inference_data_end_time = input; self
    }
    /// <p>Indicates the end time of the inference data that has been accumulated. </p>
    pub fn get_accumulated_inference_data_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.accumulated_inference_data_end_time
    }
    /// <p>Indicates the status of the retraining scheduler. </p>
    pub fn retraining_scheduler_status(mut self, input: crate::types::RetrainingSchedulerStatus) -> Self {
        self.retraining_scheduler_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of the retraining scheduler. </p>
    pub fn set_retraining_scheduler_status(mut self, input: ::std::option::Option<crate::types::RetrainingSchedulerStatus>) -> Self {
        self.retraining_scheduler_status = input; self
    }
    /// <p>Indicates the status of the retraining scheduler. </p>
    pub fn get_retraining_scheduler_status(&self) -> &::std::option::Option<crate::types::RetrainingSchedulerStatus> {
        &self.retraining_scheduler_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DescribeModelOutput`](crate::operation::describe_model::DescribeModelOutput).
    pub fn build(self) -> crate::operation::describe_model::DescribeModelOutput {
        crate::operation::describe_model::DescribeModelOutput {
            model_name: self.model_name
            ,
            model_arn: self.model_arn
            ,
            dataset_name: self.dataset_name
            ,
            dataset_arn: self.dataset_arn
            ,
            schema: self.schema
            ,
            labels_input_configuration: self.labels_input_configuration
            ,
            training_data_start_time: self.training_data_start_time
            ,
            training_data_end_time: self.training_data_end_time
            ,
            evaluation_data_start_time: self.evaluation_data_start_time
            ,
            evaluation_data_end_time: self.evaluation_data_end_time
            ,
            role_arn: self.role_arn
            ,
            data_pre_processing_configuration: self.data_pre_processing_configuration
            ,
            status: self.status
            ,
            training_execution_start_time: self.training_execution_start_time
            ,
            training_execution_end_time: self.training_execution_end_time
            ,
            failed_reason: self.failed_reason
            ,
            model_metrics: self.model_metrics
            ,
            last_updated_time: self.last_updated_time
            ,
            created_at: self.created_at
            ,
            server_side_kms_key_id: self.server_side_kms_key_id
            ,
            off_condition: self.off_condition
            ,
            source_model_version_arn: self.source_model_version_arn
            ,
            import_job_start_time: self.import_job_start_time
            ,
            import_job_end_time: self.import_job_end_time
            ,
            active_model_version: self.active_model_version
            ,
            active_model_version_arn: self.active_model_version_arn
            ,
            model_version_activated_at: self.model_version_activated_at
            ,
            previous_active_model_version: self.previous_active_model_version
            ,
            previous_active_model_version_arn: self.previous_active_model_version_arn
            ,
            previous_model_version_activated_at: self.previous_model_version_activated_at
            ,
            prior_model_metrics: self.prior_model_metrics
            ,
            latest_scheduled_retraining_failed_reason: self.latest_scheduled_retraining_failed_reason
            ,
            latest_scheduled_retraining_status: self.latest_scheduled_retraining_status
            ,
            latest_scheduled_retraining_model_version: self.latest_scheduled_retraining_model_version
            ,
            latest_scheduled_retraining_start_time: self.latest_scheduled_retraining_start_time
            ,
            latest_scheduled_retraining_available_data_in_days: self.latest_scheduled_retraining_available_data_in_days
            ,
            next_scheduled_retraining_start_date: self.next_scheduled_retraining_start_date
            ,
            accumulated_inference_data_start_time: self.accumulated_inference_data_start_time
            ,
            accumulated_inference_data_end_time: self.accumulated_inference_data_end_time
            ,
            retraining_scheduler_status: self.retraining_scheduler_status
            ,
            _request_id: self._request_id,
        }
    }
}

