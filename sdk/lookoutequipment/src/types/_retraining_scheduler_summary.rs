// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the specified retraining scheduler, including model name, status, start date, frequency, and lookback window. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetrainingSchedulerSummary  {
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the retraining scheduler. </p>
    pub status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub retraining_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub retraining_frequency: ::std::option::Option<::std::string::String>,
    /// <p>The number of past days of data used for retraining.</p>
    pub lookback_window: ::std::option::Option<::std::string::String>,
}
impl  RetrainingSchedulerSummary  {
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn model_name(&self) -> ::std::option::Option<& str> {
        self.model_name.as_deref()
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn model_arn(&self) -> ::std::option::Option<& str> {
        self.model_arn.as_deref()
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::RetrainingSchedulerStatus> {
        self.status.as_ref()
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn retraining_start_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.retraining_start_date.as_ref()
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn retraining_frequency(&self) -> ::std::option::Option<& str> {
        self.retraining_frequency.as_deref()
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn lookback_window(&self) -> ::std::option::Option<& str> {
        self.lookback_window.as_deref()
    }
}
impl RetrainingSchedulerSummary {
    /// Creates a new builder-style object to manufacture [`RetrainingSchedulerSummary`](crate::types::RetrainingSchedulerSummary).
    pub fn builder() -> crate::types::builders::RetrainingSchedulerSummaryBuilder {
        crate::types::builders::RetrainingSchedulerSummaryBuilder::default()
    }
}

/// A builder for [`RetrainingSchedulerSummary`](crate::types::RetrainingSchedulerSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RetrainingSchedulerSummaryBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RetrainingSchedulerStatus>,
    pub(crate) retraining_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retraining_frequency: ::std::option::Option<::std::string::String>,
    pub(crate) lookback_window: ::std::option::Option<::std::string::String>,
}
impl RetrainingSchedulerSummaryBuilder {
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input; self
    }
    /// <p>The name of the model that the retraining scheduler is attached to. </p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input; self
    }
    /// <p>The ARN of the model that the retraining scheduler is attached to. </p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn status(mut self, input: crate::types::RetrainingSchedulerStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RetrainingSchedulerStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the retraining scheduler. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RetrainingSchedulerStatus> {
        &self.status
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn retraining_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.retraining_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn set_retraining_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.retraining_start_date = input; self
    }
    /// <p>The start date for the retraining scheduler. Lookout for Equipment truncates the time you provide to the nearest UTC day.</p>
    pub fn get_retraining_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.retraining_start_date
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn retraining_frequency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retraining_frequency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn set_retraining_frequency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retraining_frequency = input; self
    }
    /// <p>The frequency at which the model retraining is set. This follows the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> guidelines.</p>
    pub fn get_retraining_frequency(&self) -> &::std::option::Option<::std::string::String> {
        &self.retraining_frequency
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn lookback_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lookback_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn set_lookback_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lookback_window = input; self
    }
    /// <p>The number of past days of data used for retraining.</p>
    pub fn get_lookback_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.lookback_window
    }
    /// Consumes the builder and constructs a [`RetrainingSchedulerSummary`](crate::types::RetrainingSchedulerSummary).
    pub fn build(self) -> crate::types::RetrainingSchedulerSummary {
        crate::types::RetrainingSchedulerSummary {
            model_name: self.model_name
            ,
            model_arn: self.model_arn
            ,
            status: self.status
            ,
            retraining_start_date: self.retraining_start_date
            ,
            retraining_frequency: self.retraining_frequency
            ,
            lookback_window: self.lookback_window
            ,
        }
    }
}

