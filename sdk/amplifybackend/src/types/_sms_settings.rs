// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>SMS settings for authentication.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SmsSettings  {
    /// <p>The contents of the SMS message.</p>
    pub sms_message: ::std::option::Option<::std::string::String>,
}
impl  SmsSettings  {
    /// <p>The contents of the SMS message.</p>
    pub fn sms_message(&self) -> ::std::option::Option<& str> {
        self.sms_message.as_deref()
    }
}
impl  ::std::fmt::Debug for SmsSettings  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SmsSettings");
        formatter.field("sms_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SmsSettings {
    /// Creates a new builder-style object to manufacture [`SmsSettings`](crate::types::SmsSettings).
    pub fn builder() -> crate::types::builders::SmsSettingsBuilder {
        crate::types::builders::SmsSettingsBuilder::default()
    }
}

/// A builder for [`SmsSettings`](crate::types::SmsSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SmsSettingsBuilder {
    pub(crate) sms_message: ::std::option::Option<::std::string::String>,
}
impl SmsSettingsBuilder {
    /// <p>The contents of the SMS message.</p>
    pub fn sms_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sms_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contents of the SMS message.</p>
    pub fn set_sms_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sms_message = input; self
    }
    /// <p>The contents of the SMS message.</p>
    pub fn get_sms_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.sms_message
    }
    /// Consumes the builder and constructs a [`SmsSettings`](crate::types::SmsSettings).
    pub fn build(self) -> crate::types::SmsSettings {
        crate::types::SmsSettings {
            sms_message: self.sms_message
            ,
        }
    }
}
impl ::std::fmt::Debug for SmsSettingsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SmsSettingsBuilder");
        formatter.field("sms_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

