// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon Web Services resource that is supported by Global Accelerator and can be added as an endpoint for an accelerator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Resource  {
    /// <p>The endpoint ID for the endpoint (Amazon Web Services resource).</p>
    pub endpoint_id: ::std::string::String,
    /// <p>The Amazon Web Services Region where a resource is located.</p>
    pub region: ::std::option::Option<::std::string::String>,
}
impl  Resource  {
    /// <p>The endpoint ID for the endpoint (Amazon Web Services resource).</p>
    pub fn endpoint_id(&self) -> & str {
        use std::ops::Deref; self.endpoint_id.deref()
    }
    /// <p>The Amazon Web Services Region where a resource is located.</p>
    pub fn region(&self) -> ::std::option::Option<& str> {
        self.region.as_deref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::types::Resource).
    pub fn builder() -> crate::types::builders::ResourceBuilder {
        crate::types::builders::ResourceBuilder::default()
    }
}

/// A builder for [`Resource`](crate::types::Resource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceBuilder {
    pub(crate) endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
}
impl ResourceBuilder {
    /// <p>The endpoint ID for the endpoint (Amazon Web Services resource).</p>
    /// This field is required.
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint ID for the endpoint (Amazon Web Services resource).</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id = input; self
    }
    /// <p>The endpoint ID for the endpoint (Amazon Web Services resource).</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id
    }
    /// <p>The Amazon Web Services Region where a resource is located.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where a resource is located.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input; self
    }
    /// <p>The Amazon Web Services Region where a resource is located.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Consumes the builder and constructs a [`Resource`](crate::types::Resource).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoint_id`](crate::types::builders::ResourceBuilder::endpoint_id)
    pub fn build(self) -> ::std::result::Result<crate::types::Resource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::Resource {
                endpoint_id: self.endpoint_id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("endpoint_id", "endpoint_id was not specified but it is required when building Resource")
                    )?
                ,
                region: self.region
                ,
            }
        )
    }
}

