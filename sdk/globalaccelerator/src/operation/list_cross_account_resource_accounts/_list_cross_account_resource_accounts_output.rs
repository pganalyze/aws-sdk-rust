// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCrossAccountResourceAccountsOutput  {
    /// <p>The account IDs of principals (resource owners) in a cross-account attachment who can add endpoints (resources) listed in the same attachment.</p>
    pub resource_owner_aws_account_ids: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    _request_id: Option<String>,
}
impl  ListCrossAccountResourceAccountsOutput  {
    /// <p>The account IDs of principals (resource owners) in a cross-account attachment who can add endpoints (resources) listed in the same attachment.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_owner_aws_account_ids.is_none()`.
    pub fn resource_owner_aws_account_ids(&self) -> & [::std::string::String] {
        self.resource_owner_aws_account_ids.as_deref()
        .unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListCrossAccountResourceAccountsOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl ListCrossAccountResourceAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListCrossAccountResourceAccountsOutput`](crate::operation::list_cross_account_resource_accounts::ListCrossAccountResourceAccountsOutput).
    pub fn builder() -> crate::operation::list_cross_account_resource_accounts::builders::ListCrossAccountResourceAccountsOutputBuilder {
        crate::operation::list_cross_account_resource_accounts::builders::ListCrossAccountResourceAccountsOutputBuilder::default()
    }
}

/// A builder for [`ListCrossAccountResourceAccountsOutput`](crate::operation::list_cross_account_resource_accounts::ListCrossAccountResourceAccountsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCrossAccountResourceAccountsOutputBuilder {
    pub(crate) resource_owner_aws_account_ids: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    _request_id: Option<String>,
}
impl ListCrossAccountResourceAccountsOutputBuilder {
    /// Appends an item to `resource_owner_aws_account_ids`.
    ///
    /// To override the contents of this collection use [`set_resource_owner_aws_account_ids`](Self::set_resource_owner_aws_account_ids).
    ///
    /// <p>The account IDs of principals (resource owners) in a cross-account attachment who can add endpoints (resources) listed in the same attachment.</p>
    pub fn resource_owner_aws_account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_owner_aws_account_ids.unwrap_or_default();
                        v.push(input.into());
                        self.resource_owner_aws_account_ids = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The account IDs of principals (resource owners) in a cross-account attachment who can add endpoints (resources) listed in the same attachment.</p>
    pub fn set_resource_owner_aws_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.resource_owner_aws_account_ids = input; self
    }
    /// <p>The account IDs of principals (resource owners) in a cross-account attachment who can add endpoints (resources) listed in the same attachment.</p>
    pub fn get_resource_owner_aws_account_ids(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.resource_owner_aws_account_ids
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`ListCrossAccountResourceAccountsOutput`](crate::operation::list_cross_account_resource_accounts::ListCrossAccountResourceAccountsOutput).
    pub fn build(self) -> crate::operation::list_cross_account_resource_accounts::ListCrossAccountResourceAccountsOutput {
        crate::operation::list_cross_account_resource_accounts::ListCrossAccountResourceAccountsOutput {
            resource_owner_aws_account_ids: self.resource_owner_aws_account_ids
            ,
            _request_id: self._request_id,
        }
    }
}

