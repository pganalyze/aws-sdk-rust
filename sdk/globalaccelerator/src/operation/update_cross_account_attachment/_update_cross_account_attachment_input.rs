// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCrossAccountAttachmentInput  {
    /// <p>The Amazon Resource Name (ARN) of the cross-account attachment to update.</p>
    pub attachment_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the cross-account attachment. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The principals to add to the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that the attachment gives permission to add the resources from another account, listed in the attachment.</p> 
    /// <p>To add more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub add_principals: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    /// <p>The principals to remove from the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that is given permission to add the resources from another account, listed in the cross-account attachment.</p> 
    /// <p>To remove more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub remove_principals: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    /// <p>The resources to add to the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator by the principals that are listed in the attachment.</p> 
    /// <p>To add more than one resource, separate the resource ARNs with commas.</p>
    pub add_resources: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>,
    /// <p>The resources to remove from the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator fy principals that are listed in the cross-account attachment.</p> 
    /// <p>To remove more than one resource, separate the resource ARNs with commas.</p>
    pub remove_resources: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>,
}
impl  UpdateCrossAccountAttachmentInput  {
    /// <p>The Amazon Resource Name (ARN) of the cross-account attachment to update.</p>
    pub fn attachment_arn(&self) -> ::std::option::Option<& str> {
        self.attachment_arn.as_deref()
    }
    /// <p>The name of the cross-account attachment. </p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The principals to add to the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that the attachment gives permission to add the resources from another account, listed in the attachment.</p> 
    /// <p>To add more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_principals.is_none()`.
    pub fn add_principals(&self) -> & [::std::string::String] {
        self.add_principals.as_deref()
        .unwrap_or_default()
    }
    /// <p>The principals to remove from the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that is given permission to add the resources from another account, listed in the cross-account attachment.</p> 
    /// <p>To remove more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_principals.is_none()`.
    pub fn remove_principals(&self) -> & [::std::string::String] {
        self.remove_principals.as_deref()
        .unwrap_or_default()
    }
    /// <p>The resources to add to the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator by the principals that are listed in the attachment.</p> 
    /// <p>To add more than one resource, separate the resource ARNs with commas.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_resources.is_none()`.
    pub fn add_resources(&self) -> & [crate::types::Resource] {
        self.add_resources.as_deref()
        .unwrap_or_default()
    }
    /// <p>The resources to remove from the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator fy principals that are listed in the cross-account attachment.</p> 
    /// <p>To remove more than one resource, separate the resource ARNs with commas.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_resources.is_none()`.
    pub fn remove_resources(&self) -> & [crate::types::Resource] {
        self.remove_resources.as_deref()
        .unwrap_or_default()
    }
}
impl UpdateCrossAccountAttachmentInput {
    /// Creates a new builder-style object to manufacture [`UpdateCrossAccountAttachmentInput`](crate::operation::update_cross_account_attachment::UpdateCrossAccountAttachmentInput).
    pub fn builder() -> crate::operation::update_cross_account_attachment::builders::UpdateCrossAccountAttachmentInputBuilder {
        crate::operation::update_cross_account_attachment::builders::UpdateCrossAccountAttachmentInputBuilder::default()
    }
}

/// A builder for [`UpdateCrossAccountAttachmentInput`](crate::operation::update_cross_account_attachment::UpdateCrossAccountAttachmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateCrossAccountAttachmentInputBuilder {
    pub(crate) attachment_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) add_principals: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) remove_principals: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) add_resources: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>,
    pub(crate) remove_resources: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>,
}
impl UpdateCrossAccountAttachmentInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the cross-account attachment to update.</p>
    /// This field is required.
    pub fn attachment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cross-account attachment to update.</p>
    pub fn set_attachment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the cross-account attachment to update.</p>
    pub fn get_attachment_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_arn
    }
    /// <p>The name of the cross-account attachment. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cross-account attachment. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the cross-account attachment. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `add_principals`.
    ///
    /// To override the contents of this collection use [`set_add_principals`](Self::set_add_principals).
    ///
    /// <p>The principals to add to the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that the attachment gives permission to add the resources from another account, listed in the attachment.</p> 
    /// <p>To add more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub fn add_principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.add_principals.unwrap_or_default();
                        v.push(input.into());
                        self.add_principals = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The principals to add to the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that the attachment gives permission to add the resources from another account, listed in the attachment.</p> 
    /// <p>To add more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub fn set_add_principals(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.add_principals = input; self
    }
    /// <p>The principals to add to the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that the attachment gives permission to add the resources from another account, listed in the attachment.</p> 
    /// <p>To add more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub fn get_add_principals(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.add_principals
    }
    /// Appends an item to `remove_principals`.
    ///
    /// To override the contents of this collection use [`set_remove_principals`](Self::set_remove_principals).
    ///
    /// <p>The principals to remove from the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that is given permission to add the resources from another account, listed in the cross-account attachment.</p> 
    /// <p>To remove more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub fn remove_principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.remove_principals.unwrap_or_default();
                        v.push(input.into());
                        self.remove_principals = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The principals to remove from the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that is given permission to add the resources from another account, listed in the cross-account attachment.</p> 
    /// <p>To remove more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub fn set_remove_principals(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.remove_principals = input; self
    }
    /// <p>The principals to remove from the cross-account attachment. A principal is an account or the Amazon Resource Name (ARN) of an accelerator that is given permission to add the resources from another account, listed in the cross-account attachment.</p> 
    /// <p>To remove more than one principal, separate the account numbers or accelerator ARNs, or both, with commas.</p>
    pub fn get_remove_principals(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.remove_principals
    }
    /// Appends an item to `add_resources`.
    ///
    /// To override the contents of this collection use [`set_add_resources`](Self::set_add_resources).
    ///
    /// <p>The resources to add to the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator by the principals that are listed in the attachment.</p> 
    /// <p>To add more than one resource, separate the resource ARNs with commas.</p>
    pub fn add_resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.add_resources.unwrap_or_default();
                        v.push(input);
                        self.add_resources = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The resources to add to the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator by the principals that are listed in the attachment.</p> 
    /// <p>To add more than one resource, separate the resource ARNs with commas.</p>
    pub fn set_add_resources(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>) -> Self {
        self.add_resources = input; self
    }
    /// <p>The resources to add to the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator by the principals that are listed in the attachment.</p> 
    /// <p>To add more than one resource, separate the resource ARNs with commas.</p>
    pub fn get_add_resources(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Resource>> {
        &self.add_resources
    }
    /// Appends an item to `remove_resources`.
    ///
    /// To override the contents of this collection use [`set_remove_resources`](Self::set_remove_resources).
    ///
    /// <p>The resources to remove from the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator fy principals that are listed in the cross-account attachment.</p> 
    /// <p>To remove more than one resource, separate the resource ARNs with commas.</p>
    pub fn remove_resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.remove_resources.unwrap_or_default();
                        v.push(input);
                        self.remove_resources = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The resources to remove from the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator fy principals that are listed in the cross-account attachment.</p> 
    /// <p>To remove more than one resource, separate the resource ARNs with commas.</p>
    pub fn set_remove_resources(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>) -> Self {
        self.remove_resources = input; self
    }
    /// <p>The resources to remove from the cross-account attachment. A resource listed in a cross-account attachment can be added to an accelerator fy principals that are listed in the cross-account attachment.</p> 
    /// <p>To remove more than one resource, separate the resource ARNs with commas.</p>
    pub fn get_remove_resources(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Resource>> {
        &self.remove_resources
    }
    /// Consumes the builder and constructs a [`UpdateCrossAccountAttachmentInput`](crate::operation::update_cross_account_attachment::UpdateCrossAccountAttachmentInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_cross_account_attachment::UpdateCrossAccountAttachmentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::update_cross_account_attachment::UpdateCrossAccountAttachmentInput {
                attachment_arn: self.attachment_arn
                ,
                name: self.name
                ,
                add_principals: self.add_principals
                ,
                remove_principals: self.remove_principals
                ,
                add_resources: self.add_resources
                ,
                remove_resources: self.remove_resources
                ,
            }
        )
    }
}

