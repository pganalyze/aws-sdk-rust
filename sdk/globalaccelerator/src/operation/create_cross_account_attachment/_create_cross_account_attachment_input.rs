// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCrossAccountAttachmentInput  {
    /// <p>The name of the cross-account attachment. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The principals to list in the cross-account attachment. A principal can be an Amazon Web Services account number or the Amazon Resource Name (ARN) for an accelerator. </p>
    pub principals: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    /// <p>The Amazon Resource Names (ARNs) for the resources to list in the cross-account attachment. A resource can be any supported Amazon Web Services resource type for Global Accelerator. </p>
    pub resources: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency—that is, the uniqueness—of the request.</p>
    pub idempotency_token: ::std::option::Option<::std::string::String>,
    /// <p>Create tags for cross-account attachment.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html">Tagging in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec::<crate::types::Tag>>,
}
impl  CreateCrossAccountAttachmentInput  {
    /// <p>The name of the cross-account attachment. </p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The principals to list in the cross-account attachment. A principal can be an Amazon Web Services account number or the Amazon Resource Name (ARN) for an accelerator. </p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.principals.is_none()`.
    pub fn principals(&self) -> & [::std::string::String] {
        self.principals.as_deref()
        .unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources to list in the cross-account attachment. A resource can be any supported Amazon Web Services resource type for Global Accelerator. </p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> & [crate::types::Resource] {
        self.resources.as_deref()
        .unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency—that is, the uniqueness—of the request.</p>
    pub fn idempotency_token(&self) -> ::std::option::Option<& str> {
        self.idempotency_token.as_deref()
    }
    /// <p>Create tags for cross-account attachment.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html">Tagging in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> & [crate::types::Tag] {
        self.tags.as_deref()
        .unwrap_or_default()
    }
}
impl CreateCrossAccountAttachmentInput {
    /// Creates a new builder-style object to manufacture [`CreateCrossAccountAttachmentInput`](crate::operation::create_cross_account_attachment::CreateCrossAccountAttachmentInput).
    pub fn builder() -> crate::operation::create_cross_account_attachment::builders::CreateCrossAccountAttachmentInputBuilder {
        crate::operation::create_cross_account_attachment::builders::CreateCrossAccountAttachmentInputBuilder::default()
    }
}

/// A builder for [`CreateCrossAccountAttachmentInput`](crate::operation::create_cross_account_attachment::CreateCrossAccountAttachmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateCrossAccountAttachmentInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) principals: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>,
    pub(crate) idempotency_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec::<crate::types::Tag>>,
}
impl CreateCrossAccountAttachmentInputBuilder {
    /// <p>The name of the cross-account attachment. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cross-account attachment. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the cross-account attachment. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `principals`.
    ///
    /// To override the contents of this collection use [`set_principals`](Self::set_principals).
    ///
    /// <p>The principals to list in the cross-account attachment. A principal can be an Amazon Web Services account number or the Amazon Resource Name (ARN) for an accelerator. </p>
    pub fn principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.principals.unwrap_or_default();
                        v.push(input.into());
                        self.principals = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The principals to list in the cross-account attachment. A principal can be an Amazon Web Services account number or the Amazon Resource Name (ARN) for an accelerator. </p>
    pub fn set_principals(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.principals = input; self
    }
    /// <p>The principals to list in the cross-account attachment. A principal can be an Amazon Web Services account number or the Amazon Resource Name (ARN) for an accelerator. </p>
    pub fn get_principals(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.principals
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The Amazon Resource Names (ARNs) for the resources to list in the cross-account attachment. A resource can be any supported Amazon Web Services resource type for Global Accelerator. </p>
    pub fn resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.resources.unwrap_or_default();
                        v.push(input);
                        self.resources = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources to list in the cross-account attachment. A resource can be any supported Amazon Web Services resource type for Global Accelerator. </p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Resource>>) -> Self {
        self.resources = input; self
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources to list in the cross-account attachment. A resource can be any supported Amazon Web Services resource type for Global Accelerator. </p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Resource>> {
        &self.resources
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency—that is, the uniqueness—of the request.</p>
    /// This field is required.
    pub fn idempotency_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idempotency_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency—that is, the uniqueness—of the request.</p>
    pub fn set_idempotency_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idempotency_token = input; self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency—that is, the uniqueness—of the request.</p>
    pub fn get_idempotency_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.idempotency_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Create tags for cross-account attachment.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html">Tagging in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
                        v.push(input);
                        self.tags = ::std::option::Option::Some(v);
                        self
    }
    /// <p>Create tags for cross-account attachment.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html">Tagging in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Tag>>) -> Self {
        self.tags = input; self
    }
    /// <p>Create tags for cross-account attachment.</p> 
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html">Tagging in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateCrossAccountAttachmentInput`](crate::operation::create_cross_account_attachment::CreateCrossAccountAttachmentInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_cross_account_attachment::CreateCrossAccountAttachmentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::create_cross_account_attachment::CreateCrossAccountAttachmentInput {
                name: self.name
                ,
                principals: self.principals
                ,
                resources: self.resources
                ,
                idempotency_token: self.idempotency_token
                ,
                tags: self.tags
                ,
            }
        )
    }
}

