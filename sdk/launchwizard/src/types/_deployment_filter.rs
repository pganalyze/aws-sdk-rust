// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentFilter  {
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub name: ::std::option::Option<crate::types::DeploymentFilterKey>,
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub values: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl  DeploymentFilter  {
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub fn name(&self) -> ::std::option::Option<& crate::types::DeploymentFilterKey> {
        self.name.as_ref()
    }
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> & [::std::string::String] {
        self.values.as_deref()
        .unwrap_or_default()
    }
}
impl DeploymentFilter {
    /// Creates a new builder-style object to manufacture [`DeploymentFilter`](crate::types::DeploymentFilter).
    pub fn builder() -> crate::types::builders::DeploymentFilterBuilder {
        crate::types::builders::DeploymentFilterBuilder::default()
    }
}

/// A builder for [`DeploymentFilter`](crate::types::DeploymentFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeploymentFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::DeploymentFilterKey>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl DeploymentFilterBuilder {
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub fn name(mut self, input: crate::types::DeploymentFilterKey) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::DeploymentFilterKey>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::DeploymentFilterKey> {
        &self.name
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
                        v.push(input.into());
                        self.values = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.values = input; self
    }
    /// <p>The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`DeploymentFilter`](crate::types::DeploymentFilter).
    pub fn build(self) -> crate::types::DeploymentFilter {
        crate::types::DeploymentFilter {
            name: self.name
            ,
            values: self.values
            ,
        }
    }
}

