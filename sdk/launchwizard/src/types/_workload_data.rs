// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a workload.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkloadData  {
    /// <p>The name of the workload.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of a workload.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of a workload.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The URL of a workload document.</p>
    pub documentation_url: ::std::option::Option<::std::string::String>,
    /// <p>The URL of a workload icon.</p>
    pub icon_url: ::std::option::Option<::std::string::String>,
    /// <p>The status of a workload.</p>
    pub status: ::std::option::Option<crate::types::WorkloadStatus>,
    /// <p>The message about a workload's status.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl  WorkloadData  {
    /// <p>The name of the workload.</p>
    pub fn workload_name(&self) -> ::std::option::Option<& str> {
        self.workload_name.as_deref()
    }
    /// <p>The display name of a workload.</p>
    pub fn display_name(&self) -> ::std::option::Option<& str> {
        self.display_name.as_deref()
    }
    /// <p>The description of a workload.</p>
    pub fn description(&self) -> ::std::option::Option<& str> {
        self.description.as_deref()
    }
    /// <p>The URL of a workload document.</p>
    pub fn documentation_url(&self) -> ::std::option::Option<& str> {
        self.documentation_url.as_deref()
    }
    /// <p>The URL of a workload icon.</p>
    pub fn icon_url(&self) -> ::std::option::Option<& str> {
        self.icon_url.as_deref()
    }
    /// <p>The status of a workload.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::WorkloadStatus> {
        self.status.as_ref()
    }
    /// <p>The message about a workload's status.</p>
    pub fn status_message(&self) -> ::std::option::Option<& str> {
        self.status_message.as_deref()
    }
}
impl WorkloadData {
    /// Creates a new builder-style object to manufacture [`WorkloadData`](crate::types::WorkloadData).
    pub fn builder() -> crate::types::builders::WorkloadDataBuilder {
        crate::types::builders::WorkloadDataBuilder::default()
    }
}

/// A builder for [`WorkloadData`](crate::types::WorkloadData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkloadDataBuilder {
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) documentation_url: ::std::option::Option<::std::string::String>,
    pub(crate) icon_url: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkloadStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl WorkloadDataBuilder {
    /// <p>The name of the workload.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input; self
    }
    /// <p>The name of the workload.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The display name of a workload.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of a workload.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input; self
    }
    /// <p>The display name of a workload.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of a workload.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a workload.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input; self
    }
    /// <p>The description of a workload.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The URL of a workload document.</p>
    pub fn documentation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documentation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of a workload document.</p>
    pub fn set_documentation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documentation_url = input; self
    }
    /// <p>The URL of a workload document.</p>
    pub fn get_documentation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.documentation_url
    }
    /// <p>The URL of a workload icon.</p>
    pub fn icon_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.icon_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of a workload icon.</p>
    pub fn set_icon_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.icon_url = input; self
    }
    /// <p>The URL of a workload icon.</p>
    pub fn get_icon_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.icon_url
    }
    /// <p>The status of a workload.</p>
    pub fn status(mut self, input: crate::types::WorkloadStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a workload.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkloadStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of a workload.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkloadStatus> {
        &self.status
    }
    /// <p>The message about a workload's status.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message about a workload's status.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input; self
    }
    /// <p>The message about a workload's status.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`WorkloadData`](crate::types::WorkloadData).
    pub fn build(self) -> crate::types::WorkloadData {
        crate::types::WorkloadData {
            workload_name: self.workload_name
            ,
            display_name: self.display_name
            ,
            description: self.description
            ,
            documentation_url: self.documentation_url
            ,
            icon_url: self.icon_url
            ,
            status: self.status
            ,
            status_message: self.status_message
            ,
        }
    }
}

