// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data associated with a deployment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeploymentData  {
    /// <p>The name of the deployment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the deployment.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workload.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The pattern name of the deployment.</p>
    pub pattern_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the deployment.</p>
    pub status: ::std::option::Option<crate::types::DeploymentStatus>,
    /// <p>The time the deployment was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The specifications of the deployment. For more information on specifications for each deployment, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications.html">Workload specifications</a>.</p>
    pub specifications: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
    /// <p>The resource group of the deployment.</p>
    pub resource_group: ::std::option::Option<::std::string::String>,
    /// <p>The time the deployment was deleted.</p>
    pub deleted_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  DeploymentData  {
    /// <p>The name of the deployment.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The ID of the deployment.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The name of the workload.</p>
    pub fn workload_name(&self) -> ::std::option::Option<& str> {
        self.workload_name.as_deref()
    }
    /// <p>The pattern name of the deployment.</p>
    pub fn pattern_name(&self) -> ::std::option::Option<& str> {
        self.pattern_name.as_deref()
    }
    /// <p>The status of the deployment.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::DeploymentStatus> {
        self.status.as_ref()
    }
    /// <p>The time the deployment was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The specifications of the deployment. For more information on specifications for each deployment, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications.html">Workload specifications</a>.</p>
    pub fn specifications(&self) -> ::std::option::Option<& ::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        self.specifications.as_ref()
    }
    /// <p>The resource group of the deployment.</p>
    pub fn resource_group(&self) -> ::std::option::Option<& str> {
        self.resource_group.as_deref()
    }
    /// <p>The time the deployment was deleted.</p>
    pub fn deleted_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.deleted_at.as_ref()
    }
}
impl  ::std::fmt::Debug for DeploymentData  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeploymentData");
        formatter.field("name", &self.name);
        formatter.field("id", &self.id);
        formatter.field("workload_name", &self.workload_name);
        formatter.field("pattern_name", &self.pattern_name);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("specifications", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_group", &self.resource_group);
        formatter.field("deleted_at", &self.deleted_at);
        formatter.finish()
    }
}
impl DeploymentData {
    /// Creates a new builder-style object to manufacture [`DeploymentData`](crate::types::DeploymentData).
    pub fn builder() -> crate::types::builders::DeploymentDataBuilder {
        crate::types::builders::DeploymentDataBuilder::default()
    }
}

/// A builder for [`DeploymentData`](crate::types::DeploymentData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DeploymentDataBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) pattern_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) specifications: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
    pub(crate) resource_group: ::std::option::Option<::std::string::String>,
    pub(crate) deleted_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DeploymentDataBuilder {
    /// <p>The name of the deployment.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the deployment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the deployment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the deployment.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the deployment.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The ID of the deployment.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the workload.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input; self
    }
    /// <p>The name of the workload.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The pattern name of the deployment.</p>
    pub fn pattern_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pattern_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern name of the deployment.</p>
    pub fn set_pattern_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pattern_name = input; self
    }
    /// <p>The pattern name of the deployment.</p>
    pub fn get_pattern_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pattern_name
    }
    /// <p>The status of the deployment.</p>
    pub fn status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the deployment.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DeploymentStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the deployment.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DeploymentStatus> {
        &self.status
    }
    /// <p>The time the deployment was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the deployment was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    /// <p>The time the deployment was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Adds a key-value pair to `specifications`.
    ///
    /// To override the contents of this collection use [`set_specifications`](Self::set_specifications).
    ///
    /// <p>The specifications of the deployment. For more information on specifications for each deployment, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications.html">Workload specifications</a>.</p>
    pub fn specifications(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.specifications.unwrap_or_default();
                        hash_map.insert(k.into(), v.into());
                        self.specifications = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>The specifications of the deployment. For more information on specifications for each deployment, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications.html">Workload specifications</a>.</p>
    pub fn set_specifications(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>) -> Self {
        self.specifications = input; self
    }
    /// <p>The specifications of the deployment. For more information on specifications for each deployment, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications.html">Workload specifications</a>.</p>
    pub fn get_specifications(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        &self.specifications
    }
    /// <p>The resource group of the deployment.</p>
    pub fn resource_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource group of the deployment.</p>
    pub fn set_resource_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_group = input; self
    }
    /// <p>The resource group of the deployment.</p>
    pub fn get_resource_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_group
    }
    /// <p>The time the deployment was deleted.</p>
    pub fn deleted_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deleted_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the deployment was deleted.</p>
    pub fn set_deleted_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deleted_at = input; self
    }
    /// <p>The time the deployment was deleted.</p>
    pub fn get_deleted_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deleted_at
    }
    /// Consumes the builder and constructs a [`DeploymentData`](crate::types::DeploymentData).
    pub fn build(self) -> crate::types::DeploymentData {
        crate::types::DeploymentData {
            name: self.name
            ,
            id: self.id
            ,
            workload_name: self.workload_name
            ,
            pattern_name: self.pattern_name
            ,
            status: self.status
            ,
            created_at: self.created_at
            ,
            specifications: self.specifications
            ,
            resource_group: self.resource_group
            ,
            deleted_at: self.deleted_at
            ,
        }
    }
}
impl ::std::fmt::Debug for DeploymentDataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeploymentDataBuilder");
        formatter.field("name", &self.name);
        formatter.field("id", &self.id);
        formatter.field("workload_name", &self.workload_name);
        formatter.field("pattern_name", &self.pattern_name);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("specifications", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_group", &self.resource_group);
        formatter.field("deleted_at", &self.deleted_at);
        formatter.finish()
    }
}

