// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the deployment event data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentEventDataSummary  {
    /// <p>The name of the deployment event.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the deployment event.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the deployment event.</p>
    pub status: ::std::option::Option<crate::types::EventStatus>,
    /// <p>The reason of the deployment event status.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the deployment event.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  DeploymentEventDataSummary  {
    /// <p>The name of the deployment event.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The description of the deployment event.</p>
    pub fn description(&self) -> ::std::option::Option<& str> {
        self.description.as_deref()
    }
    /// <p>The status of the deployment event.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::EventStatus> {
        self.status.as_ref()
    }
    /// <p>The reason of the deployment event status.</p>
    pub fn status_reason(&self) -> ::std::option::Option<& str> {
        self.status_reason.as_deref()
    }
    /// <p>The timestamp of the deployment event.</p>
    pub fn timestamp(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl DeploymentEventDataSummary {
    /// Creates a new builder-style object to manufacture [`DeploymentEventDataSummary`](crate::types::DeploymentEventDataSummary).
    pub fn builder() -> crate::types::builders::DeploymentEventDataSummaryBuilder {
        crate::types::builders::DeploymentEventDataSummaryBuilder::default()
    }
}

/// A builder for [`DeploymentEventDataSummary`](crate::types::DeploymentEventDataSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeploymentEventDataSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EventStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DeploymentEventDataSummaryBuilder {
    /// <p>The name of the deployment event.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the deployment event.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the deployment event.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the deployment event.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the deployment event.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input; self
    }
    /// <p>The description of the deployment event.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the deployment event.</p>
    pub fn status(mut self, input: crate::types::EventStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the deployment event.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EventStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the deployment event.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EventStatus> {
        &self.status
    }
    /// <p>The reason of the deployment event status.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason of the deployment event status.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input; self
    }
    /// <p>The reason of the deployment event status.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The timestamp of the deployment event.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the deployment event.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input; self
    }
    /// <p>The timestamp of the deployment event.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`DeploymentEventDataSummary`](crate::types::DeploymentEventDataSummary).
    pub fn build(self) -> crate::types::DeploymentEventDataSummary {
        crate::types::DeploymentEventDataSummary {
            name: self.name
            ,
            description: self.description
            ,
            status: self.status
            ,
            status_reason: self.status_reason
            ,
            timestamp: self.timestamp
            ,
        }
    }
}

