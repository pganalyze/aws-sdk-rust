// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(result: ::std::result::Result<O, E>) -> ::std::result::Result<::aws_smithy_runtime_api::client::interceptors::context::Output, ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>>
            where
                O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
                E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
            {
                result.map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
                    .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
                    .map_err(::std::convert::Into::into)
            }

pub fn parse_http_error_metadata(_response_status: u16, response_headers: &::aws_smithy_runtime_api::http::Headers, response_body: &[u8]) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
                    crate::json_errors::parse_error_metadata(response_body, response_headers)
                }

pub(crate) mod shape_create_deployment;

pub(crate) mod shape_delete_deployment;

pub(crate) mod shape_get_deployment;

pub(crate) mod shape_get_workload;

pub(crate) mod shape_list_deployment_events;

pub(crate) mod shape_list_deployments;

pub(crate) mod shape_list_workload_deployment_patterns;

pub(crate) mod shape_list_workloads;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
                if data.is_empty() {
                    b"{}"
                } else {
                    data
                }
            }

pub(crate) mod shape_create_deployment_input;

pub(crate) mod shape_delete_deployment_input;

pub(crate) mod shape_get_deployment_input;

pub(crate) mod shape_get_workload_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_deployment_events_input;

pub(crate) mod shape_list_deployments_input;

pub(crate) mod shape_list_workload_deployment_patterns_input;

pub(crate) mod shape_list_workloads_input;

pub(crate) mod shape_resource_limit_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_deployment_data;

pub(crate) mod shape_deployment_data_summary_list;

pub(crate) mod shape_deployment_event_data_summary_list;

pub(crate) mod shape_deployment_filter;

pub(crate) mod shape_workload_data;

pub(crate) mod shape_workload_data_summary_list;

pub(crate) mod shape_workload_deployment_pattern_data_summary_list;

pub(crate) mod shape_deployment_data_summary;

pub(crate) mod shape_deployment_event_data_summary;

pub(crate) mod shape_deployment_specifications;

pub(crate) mod shape_workload_data_summary;

pub(crate) mod shape_workload_deployment_pattern_data_summary;

