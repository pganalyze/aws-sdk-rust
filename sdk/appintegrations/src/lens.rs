// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_applications_output_output_next_token(input: &crate::operation::list_applications::ListApplicationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_data_integration_associations_output_output_next_token(input: &crate::operation::list_data_integration_associations::ListDataIntegrationAssociationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_data_integrations_output_output_next_token(input: &crate::operation::list_data_integrations::ListDataIntegrationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_event_integration_associations_output_output_next_token(input: &crate::operation::list_event_integration_associations::ListEventIntegrationAssociationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_event_integrations_output_output_next_token(input: &crate::operation::list_event_integrations::ListEventIntegrationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_applications_output_output_applications(input: crate::operation::list_applications::ListApplicationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::ApplicationSummary>> {
                    let input = match input.applications {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_data_integration_associations_output_output_data_integration_associations(input: crate::operation::list_data_integration_associations::ListDataIntegrationAssociationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::DataIntegrationAssociationSummary>> {
                    let input = match input.data_integration_associations {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_data_integrations_output_output_data_integrations(input: crate::operation::list_data_integrations::ListDataIntegrationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::DataIntegrationSummary>> {
                    let input = match input.data_integrations {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_event_integration_associations_output_output_event_integration_associations(input: crate::operation::list_event_integration_associations::ListEventIntegrationAssociationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::EventIntegrationAssociation>> {
                    let input = match input.event_integration_associations {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_event_integrations_output_output_event_integrations(input: crate::operation::list_event_integrations::ListEventIntegrationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::EventIntegration>> {
                    let input = match input.event_integrations {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

