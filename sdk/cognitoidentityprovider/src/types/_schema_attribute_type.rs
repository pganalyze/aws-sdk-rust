// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of the user attributes and their properties in your user pool. The attribute schema contains standard attributes, custom attributes with a <code>custom:</code> prefix, and developer attributes with a <code>dev:</code> prefix. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html">User pool attributes</a>.</p> 
/// <p>Developer-only attributes are a legacy feature of user pools, are read-only to all app clients. You can create and update developer-only attributes only with IAM-authenticated API operations. Use app client read/write permissions instead.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchemaAttributeType  {
    /// <p>The name of your user pool attribute, for example <code>username</code> or <code>custom:costcenter</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The data format of the values for your attribute.</p>
    pub attribute_data_type: ::std::option::Option<crate::types::AttributeDataType>,
    /// <note> 
    /// <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p> 
    /// </note> 
    /// <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
    pub developer_only_attribute: ::std::option::Option<bool>,
    /// <p>Specifies whether the value of the attribute can be changed.</p> 
    /// <p>Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>
    pub mutable: ::std::option::Option<bool>,
    /// <p>Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.</p>
    pub required: ::std::option::Option<bool>,
    /// <p>Specifies the constraints for an attribute of the number type.</p>
    pub number_attribute_constraints: ::std::option::Option<crate::types::NumberAttributeConstraintsType>,
    /// <p>Specifies the constraints for an attribute of the string type.</p>
    pub string_attribute_constraints: ::std::option::Option<crate::types::StringAttributeConstraintsType>,
}
impl  SchemaAttributeType  {
    /// <p>The name of your user pool attribute, for example <code>username</code> or <code>custom:costcenter</code>.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The data format of the values for your attribute.</p>
    pub fn attribute_data_type(&self) -> ::std::option::Option<& crate::types::AttributeDataType> {
        self.attribute_data_type.as_ref()
    }
    /// <note> 
    /// <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p> 
    /// </note> 
    /// <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
    pub fn developer_only_attribute(&self) -> ::std::option::Option<bool> {
        self.developer_only_attribute
    }
    /// <p>Specifies whether the value of the attribute can be changed.</p> 
    /// <p>Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>
    pub fn mutable(&self) -> ::std::option::Option<bool> {
        self.mutable
    }
    /// <p>Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.</p>
    pub fn required(&self) -> ::std::option::Option<bool> {
        self.required
    }
    /// <p>Specifies the constraints for an attribute of the number type.</p>
    pub fn number_attribute_constraints(&self) -> ::std::option::Option<& crate::types::NumberAttributeConstraintsType> {
        self.number_attribute_constraints.as_ref()
    }
    /// <p>Specifies the constraints for an attribute of the string type.</p>
    pub fn string_attribute_constraints(&self) -> ::std::option::Option<& crate::types::StringAttributeConstraintsType> {
        self.string_attribute_constraints.as_ref()
    }
}
impl SchemaAttributeType {
    /// Creates a new builder-style object to manufacture [`SchemaAttributeType`](crate::types::SchemaAttributeType).
    pub fn builder() -> crate::types::builders::SchemaAttributeTypeBuilder {
        crate::types::builders::SchemaAttributeTypeBuilder::default()
    }
}

/// A builder for [`SchemaAttributeType`](crate::types::SchemaAttributeType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SchemaAttributeTypeBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_data_type: ::std::option::Option<crate::types::AttributeDataType>,
    pub(crate) developer_only_attribute: ::std::option::Option<bool>,
    pub(crate) mutable: ::std::option::Option<bool>,
    pub(crate) required: ::std::option::Option<bool>,
    pub(crate) number_attribute_constraints: ::std::option::Option<crate::types::NumberAttributeConstraintsType>,
    pub(crate) string_attribute_constraints: ::std::option::Option<crate::types::StringAttributeConstraintsType>,
}
impl SchemaAttributeTypeBuilder {
    /// <p>The name of your user pool attribute, for example <code>username</code> or <code>custom:costcenter</code>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your user pool attribute, for example <code>username</code> or <code>custom:costcenter</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of your user pool attribute, for example <code>username</code> or <code>custom:costcenter</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The data format of the values for your attribute.</p>
    pub fn attribute_data_type(mut self, input: crate::types::AttributeDataType) -> Self {
        self.attribute_data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data format of the values for your attribute.</p>
    pub fn set_attribute_data_type(mut self, input: ::std::option::Option<crate::types::AttributeDataType>) -> Self {
        self.attribute_data_type = input; self
    }
    /// <p>The data format of the values for your attribute.</p>
    pub fn get_attribute_data_type(&self) -> &::std::option::Option<crate::types::AttributeDataType> {
        &self.attribute_data_type
    }
    /// <note> 
    /// <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p> 
    /// </note> 
    /// <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
    pub fn developer_only_attribute(mut self, input: bool) -> Self {
        self.developer_only_attribute = ::std::option::Option::Some(input);
        self
    }
    /// <note> 
    /// <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p> 
    /// </note> 
    /// <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
    pub fn set_developer_only_attribute(mut self, input: ::std::option::Option<bool>) -> Self {
        self.developer_only_attribute = input; self
    }
    /// <note> 
    /// <p>You should use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes">WriteAttributes</a> in the user pool client to control how attributes can be mutated for new use cases instead of using <code>DeveloperOnlyAttribute</code>.</p> 
    /// </note> 
    /// <p>Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users won't be able to modify this attribute using their access token. For example, <code>DeveloperOnlyAttribute</code> can be modified using AdminUpdateUserAttributes but can't be updated using UpdateUserAttributes.</p>
    pub fn get_developer_only_attribute(&self) -> &::std::option::Option<bool> {
        &self.developer_only_attribute
    }
    /// <p>Specifies whether the value of the attribute can be changed.</p> 
    /// <p>Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>
    pub fn mutable(mut self, input: bool) -> Self {
        self.mutable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the value of the attribute can be changed.</p> 
    /// <p>Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>
    pub fn set_mutable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.mutable = input; self
    }
    /// <p>Specifies whether the value of the attribute can be changed.</p> 
    /// <p>Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of <code>true</code>. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User Pool</a>.</p>
    pub fn get_mutable(&self) -> &::std::option::Option<bool> {
        &self.mutable
    }
    /// <p>Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input; self
    }
    /// <p>Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// <p>Specifies the constraints for an attribute of the number type.</p>
    pub fn number_attribute_constraints(mut self, input: crate::types::NumberAttributeConstraintsType) -> Self {
        self.number_attribute_constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the constraints for an attribute of the number type.</p>
    pub fn set_number_attribute_constraints(mut self, input: ::std::option::Option<crate::types::NumberAttributeConstraintsType>) -> Self {
        self.number_attribute_constraints = input; self
    }
    /// <p>Specifies the constraints for an attribute of the number type.</p>
    pub fn get_number_attribute_constraints(&self) -> &::std::option::Option<crate::types::NumberAttributeConstraintsType> {
        &self.number_attribute_constraints
    }
    /// <p>Specifies the constraints for an attribute of the string type.</p>
    pub fn string_attribute_constraints(mut self, input: crate::types::StringAttributeConstraintsType) -> Self {
        self.string_attribute_constraints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the constraints for an attribute of the string type.</p>
    pub fn set_string_attribute_constraints(mut self, input: ::std::option::Option<crate::types::StringAttributeConstraintsType>) -> Self {
        self.string_attribute_constraints = input; self
    }
    /// <p>Specifies the constraints for an attribute of the string type.</p>
    pub fn get_string_attribute_constraints(&self) -> &::std::option::Option<crate::types::StringAttributeConstraintsType> {
        &self.string_attribute_constraints
    }
    /// Consumes the builder and constructs a [`SchemaAttributeType`](crate::types::SchemaAttributeType).
    pub fn build(self) -> crate::types::SchemaAttributeType {
        crate::types::SchemaAttributeType {
            name: self.name
            ,
            attribute_data_type: self.attribute_data_type
            ,
            developer_only_attribute: self.developer_only_attribute
            ,
            mutable: self.mutable
            ,
            required: self.required
            ,
            number_attribute_constraints: self.number_attribute_constraints
            ,
            string_attribute_constraints: self.string_attribute_constraints
            ,
        }
    }
}

