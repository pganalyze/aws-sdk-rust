// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Failed to connect to server, or didnâ€™t receive response within expected time period.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionTimeoutException  {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::string::String,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl ExecutionTimeoutException {
    /// Returns `Some(ErrorKind)` if the error is retryable. Otherwise, returns `None`.
    pub fn retryable_error_kind(&self) -> ::aws_smithy_types::retry::ErrorKind {
        ::aws_smithy_types::retry::ErrorKind::ServerError
    }
    /// Returns the error message.
                        pub fn message(&self) -> &str { &self.message }
}
impl ::std::fmt::Display for ExecutionTimeoutException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "ExecutionTimeoutException")?;
         {
            ::std::write!(f, ": {}", &self.message)?;
        }
        Ok(())
    }
}
impl ::std::error::Error for ExecutionTimeoutException {}
impl ::aws_types::request_id::RequestId for crate::types::error::ExecutionTimeoutException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for ExecutionTimeoutException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata { &self.meta }
}
impl ExecutionTimeoutException {
    /// Creates a new builder-style object to manufacture [`ExecutionTimeoutException`](crate::types::error::ExecutionTimeoutException).
    pub fn builder() -> crate::types::error::builders::ExecutionTimeoutExceptionBuilder {
        crate::types::error::builders::ExecutionTimeoutExceptionBuilder::default()
    }
}

/// A builder for [`ExecutionTimeoutException`](crate::types::error::ExecutionTimeoutException).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutionTimeoutExceptionBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl ExecutionTimeoutExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
                                            pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
                                                self.meta = Some(meta);
                                                self
                                            }
    
                                            /// Sets error metadata
                                            pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
                                                self.meta = meta;
                                                self
                                            }
    /// Consumes the builder and constructs a [`ExecutionTimeoutException`](crate::types::error::ExecutionTimeoutException).
    /// This method will fail if any of the following fields are not set:
    /// - [`message`](crate::types::error::builders::ExecutionTimeoutExceptionBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::error::ExecutionTimeoutException, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::error::ExecutionTimeoutException {
                message: self.message
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("message", "message was not specified but it is required when building ExecutionTimeoutException")
                    )?
                ,
                meta: self.meta.unwrap_or_default(),
            }
        )
    }
}

