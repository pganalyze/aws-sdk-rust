// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary that provides statistics on input manifest and errors identified in the input manifest.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaAnalysisManifestSummary  {
    /// <p>Provides the S3 bucket name and object name.</p> 
    /// <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> 
    /// <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>
    pub s3_object: ::std::option::Option<crate::types::S3Object>,
}
impl  MediaAnalysisManifestSummary  {
    /// <p>Provides the S3 bucket name and object name.</p> 
    /// <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> 
    /// <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>
    pub fn s3_object(&self) -> ::std::option::Option<& crate::types::S3Object> {
        self.s3_object.as_ref()
    }
}
impl MediaAnalysisManifestSummary {
    /// Creates a new builder-style object to manufacture [`MediaAnalysisManifestSummary`](crate::types::MediaAnalysisManifestSummary).
    pub fn builder() -> crate::types::builders::MediaAnalysisManifestSummaryBuilder {
        crate::types::builders::MediaAnalysisManifestSummaryBuilder::default()
    }
}

/// A builder for [`MediaAnalysisManifestSummary`](crate::types::MediaAnalysisManifestSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaAnalysisManifestSummaryBuilder {
    pub(crate) s3_object: ::std::option::Option<crate::types::S3Object>,
}
impl MediaAnalysisManifestSummaryBuilder {
    /// <p>Provides the S3 bucket name and object name.</p> 
    /// <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> 
    /// <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>
    pub fn s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.s3_object = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the S3 bucket name and object name.</p> 
    /// <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> 
    /// <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>
    pub fn set_s3_object(mut self, input: ::std::option::Option<crate::types::S3Object>) -> Self {
        self.s3_object = input; self
    }
    /// <p>Provides the S3 bucket name and object name.</p> 
    /// <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> 
    /// <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>
    pub fn get_s3_object(&self) -> &::std::option::Option<crate::types::S3Object> {
        &self.s3_object
    }
    /// Consumes the builder and constructs a [`MediaAnalysisManifestSummary`](crate::types::MediaAnalysisManifestSummary).
    pub fn build(self) -> crate::types::MediaAnalysisManifestSummary {
        crate::types::MediaAnalysisManifestSummary {
            s3_object: self.s3_object
            ,
        }
    }
}

