// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for Moderation Labels Detection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaAnalysisDetectModerationLabelsConfig  {
    /// <p>Specifies the minimum confidence level for the moderation labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. </p>
    pub min_confidence: ::std::option::Option<f32>,
    /// <p>Specifies the custom moderation model to be used during the label detection job. If not provided the pre-trained model is used.</p>
    pub project_version: ::std::option::Option<::std::string::String>,
}
impl  MediaAnalysisDetectModerationLabelsConfig  {
    /// <p>Specifies the minimum confidence level for the moderation labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. </p>
    pub fn min_confidence(&self) -> ::std::option::Option<f32> {
        self.min_confidence
    }
    /// <p>Specifies the custom moderation model to be used during the label detection job. If not provided the pre-trained model is used.</p>
    pub fn project_version(&self) -> ::std::option::Option<& str> {
        self.project_version.as_deref()
    }
}
impl MediaAnalysisDetectModerationLabelsConfig {
    /// Creates a new builder-style object to manufacture [`MediaAnalysisDetectModerationLabelsConfig`](crate::types::MediaAnalysisDetectModerationLabelsConfig).
    pub fn builder() -> crate::types::builders::MediaAnalysisDetectModerationLabelsConfigBuilder {
        crate::types::builders::MediaAnalysisDetectModerationLabelsConfigBuilder::default()
    }
}

/// A builder for [`MediaAnalysisDetectModerationLabelsConfig`](crate::types::MediaAnalysisDetectModerationLabelsConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaAnalysisDetectModerationLabelsConfigBuilder {
    pub(crate) min_confidence: ::std::option::Option<f32>,
    pub(crate) project_version: ::std::option::Option<::std::string::String>,
}
impl MediaAnalysisDetectModerationLabelsConfigBuilder {
    /// <p>Specifies the minimum confidence level for the moderation labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. </p>
    pub fn min_confidence(mut self, input: f32) -> Self {
        self.min_confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the minimum confidence level for the moderation labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. </p>
    pub fn set_min_confidence(mut self, input: ::std::option::Option<f32>) -> Self {
        self.min_confidence = input; self
    }
    /// <p>Specifies the minimum confidence level for the moderation labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value. </p>
    pub fn get_min_confidence(&self) -> &::std::option::Option<f32> {
        &self.min_confidence
    }
    /// <p>Specifies the custom moderation model to be used during the label detection job. If not provided the pre-trained model is used.</p>
    pub fn project_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the custom moderation model to be used during the label detection job. If not provided the pre-trained model is used.</p>
    pub fn set_project_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_version = input; self
    }
    /// <p>Specifies the custom moderation model to be used during the label detection job. If not provided the pre-trained model is used.</p>
    pub fn get_project_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_version
    }
    /// Consumes the builder and constructs a [`MediaAnalysisDetectModerationLabelsConfig`](crate::types::MediaAnalysisDetectModerationLabelsConfig).
    pub fn build(self) -> crate::types::MediaAnalysisDetectModerationLabelsConfig {
        crate::types::MediaAnalysisDetectModerationLabelsConfig {
            min_confidence: self.min_confidence
            ,
            project_version: self.project_version
            ,
        }
    }
}

