// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration options for Content Moderation training.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomizationFeatureContentModerationConfig  {
    /// <p>The confidence level you plan to use to identify if unsafe content is present during inference.</p>
    pub confidence_threshold: ::std::option::Option<f32>,
}
impl  CustomizationFeatureContentModerationConfig  {
    /// <p>The confidence level you plan to use to identify if unsafe content is present during inference.</p>
    pub fn confidence_threshold(&self) -> ::std::option::Option<f32> {
        self.confidence_threshold
    }
}
impl CustomizationFeatureContentModerationConfig {
    /// Creates a new builder-style object to manufacture [`CustomizationFeatureContentModerationConfig`](crate::types::CustomizationFeatureContentModerationConfig).
    pub fn builder() -> crate::types::builders::CustomizationFeatureContentModerationConfigBuilder {
        crate::types::builders::CustomizationFeatureContentModerationConfigBuilder::default()
    }
}

/// A builder for [`CustomizationFeatureContentModerationConfig`](crate::types::CustomizationFeatureContentModerationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomizationFeatureContentModerationConfigBuilder {
    pub(crate) confidence_threshold: ::std::option::Option<f32>,
}
impl CustomizationFeatureContentModerationConfigBuilder {
    /// <p>The confidence level you plan to use to identify if unsafe content is present during inference.</p>
    pub fn confidence_threshold(mut self, input: f32) -> Self {
        self.confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence level you plan to use to identify if unsafe content is present during inference.</p>
    pub fn set_confidence_threshold(mut self, input: ::std::option::Option<f32>) -> Self {
        self.confidence_threshold = input; self
    }
    /// <p>The confidence level you plan to use to identify if unsafe content is present during inference.</p>
    pub fn get_confidence_threshold(&self) -> &::std::option::Option<f32> {
        &self.confidence_threshold
    }
    /// Consumes the builder and constructs a [`CustomizationFeatureContentModerationConfig`](crate::types::CustomizationFeatureContentModerationConfig).
    pub fn build(self) -> crate::types::CustomizationFeatureContentModerationConfig {
        crate::types::CustomizationFeatureContentModerationConfig {
            confidence_threshold: self.confidence_threshold
            ,
        }
    }
}

