// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Feature specific configuration for the training job. Configuration provided for the job must match the feature type parameter associated with project. If configuration and feature type do not match an InvalidParameterException is returned.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomizationFeatureConfig  {
    /// <p>Configuration options for Custom Moderation training.</p>
    pub content_moderation: ::std::option::Option<crate::types::CustomizationFeatureContentModerationConfig>,
}
impl  CustomizationFeatureConfig  {
    /// <p>Configuration options for Custom Moderation training.</p>
    pub fn content_moderation(&self) -> ::std::option::Option<& crate::types::CustomizationFeatureContentModerationConfig> {
        self.content_moderation.as_ref()
    }
}
impl CustomizationFeatureConfig {
    /// Creates a new builder-style object to manufacture [`CustomizationFeatureConfig`](crate::types::CustomizationFeatureConfig).
    pub fn builder() -> crate::types::builders::CustomizationFeatureConfigBuilder {
        crate::types::builders::CustomizationFeatureConfigBuilder::default()
    }
}

/// A builder for [`CustomizationFeatureConfig`](crate::types::CustomizationFeatureConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomizationFeatureConfigBuilder {
    pub(crate) content_moderation: ::std::option::Option<crate::types::CustomizationFeatureContentModerationConfig>,
}
impl CustomizationFeatureConfigBuilder {
    /// <p>Configuration options for Custom Moderation training.</p>
    pub fn content_moderation(mut self, input: crate::types::CustomizationFeatureContentModerationConfig) -> Self {
        self.content_moderation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration options for Custom Moderation training.</p>
    pub fn set_content_moderation(mut self, input: ::std::option::Option<crate::types::CustomizationFeatureContentModerationConfig>) -> Self {
        self.content_moderation = input; self
    }
    /// <p>Configuration options for Custom Moderation training.</p>
    pub fn get_content_moderation(&self) -> &::std::option::Option<crate::types::CustomizationFeatureContentModerationConfig> {
        &self.content_moderation
    }
    /// Consumes the builder and constructs a [`CustomizationFeatureConfig`](crate::types::CustomizationFeatureConfig).
    pub fn build(self) -> crate::types::CustomizationFeatureConfig {
        crate::types::CustomizationFeatureConfig {
            content_moderation: self.content_moderation
            ,
        }
    }
}

