// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration options for a media analysis job. Configuration is operation-specific.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaAnalysisOperationsConfig  {
    /// <p>Contains configuration options for a DetectModerationLabels job.</p>
    pub detect_moderation_labels: ::std::option::Option<crate::types::MediaAnalysisDetectModerationLabelsConfig>,
}
impl  MediaAnalysisOperationsConfig  {
    /// <p>Contains configuration options for a DetectModerationLabels job.</p>
    pub fn detect_moderation_labels(&self) -> ::std::option::Option<& crate::types::MediaAnalysisDetectModerationLabelsConfig> {
        self.detect_moderation_labels.as_ref()
    }
}
impl MediaAnalysisOperationsConfig {
    /// Creates a new builder-style object to manufacture [`MediaAnalysisOperationsConfig`](crate::types::MediaAnalysisOperationsConfig).
    pub fn builder() -> crate::types::builders::MediaAnalysisOperationsConfigBuilder {
        crate::types::builders::MediaAnalysisOperationsConfigBuilder::default()
    }
}

/// A builder for [`MediaAnalysisOperationsConfig`](crate::types::MediaAnalysisOperationsConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaAnalysisOperationsConfigBuilder {
    pub(crate) detect_moderation_labels: ::std::option::Option<crate::types::MediaAnalysisDetectModerationLabelsConfig>,
}
impl MediaAnalysisOperationsConfigBuilder {
    /// <p>Contains configuration options for a DetectModerationLabels job.</p>
    pub fn detect_moderation_labels(mut self, input: crate::types::MediaAnalysisDetectModerationLabelsConfig) -> Self {
        self.detect_moderation_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configuration options for a DetectModerationLabels job.</p>
    pub fn set_detect_moderation_labels(mut self, input: ::std::option::Option<crate::types::MediaAnalysisDetectModerationLabelsConfig>) -> Self {
        self.detect_moderation_labels = input; self
    }
    /// <p>Contains configuration options for a DetectModerationLabels job.</p>
    pub fn get_detect_moderation_labels(&self) -> &::std::option::Option<crate::types::MediaAnalysisDetectModerationLabelsConfig> {
        &self.detect_moderation_labels
    }
    /// Consumes the builder and constructs a [`MediaAnalysisOperationsConfig`](crate::types::MediaAnalysisOperationsConfig).
    pub fn build(self) -> crate::types::MediaAnalysisOperationsConfig {
        crate::types::MediaAnalysisOperationsConfig {
            detect_moderation_labels: self.detect_moderation_labels
            ,
        }
    }
}

