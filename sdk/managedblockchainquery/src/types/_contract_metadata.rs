// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata of the contract.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContractMetadata  {
    /// <p>The name of the token contract.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The symbol of the token contract.</p>
    pub symbol: ::std::option::Option<::std::string::String>,
    /// <p>The decimals used by the token contract.</p>
    pub decimals: ::std::option::Option<i32>,
}
impl  ContractMetadata  {
    /// <p>The name of the token contract.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The symbol of the token contract.</p>
    pub fn symbol(&self) -> ::std::option::Option<& str> {
        self.symbol.as_deref()
    }
    /// <p>The decimals used by the token contract.</p>
    pub fn decimals(&self) -> ::std::option::Option<i32> {
        self.decimals
    }
}
impl ContractMetadata {
    /// Creates a new builder-style object to manufacture [`ContractMetadata`](crate::types::ContractMetadata).
    pub fn builder() -> crate::types::builders::ContractMetadataBuilder {
        crate::types::builders::ContractMetadataBuilder::default()
    }
}

/// A builder for [`ContractMetadata`](crate::types::ContractMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContractMetadataBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) symbol: ::std::option::Option<::std::string::String>,
    pub(crate) decimals: ::std::option::Option<i32>,
}
impl ContractMetadataBuilder {
    /// <p>The name of the token contract.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the token contract.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the token contract.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The symbol of the token contract.</p>
    pub fn symbol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.symbol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The symbol of the token contract.</p>
    pub fn set_symbol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.symbol = input; self
    }
    /// <p>The symbol of the token contract.</p>
    pub fn get_symbol(&self) -> &::std::option::Option<::std::string::String> {
        &self.symbol
    }
    /// <p>The decimals used by the token contract.</p>
    pub fn decimals(mut self, input: i32) -> Self {
        self.decimals = ::std::option::Option::Some(input);
        self
    }
    /// <p>The decimals used by the token contract.</p>
    pub fn set_decimals(mut self, input: ::std::option::Option<i32>) -> Self {
        self.decimals = input; self
    }
    /// <p>The decimals used by the token contract.</p>
    pub fn get_decimals(&self) -> &::std::option::Option<i32> {
        &self.decimals
    }
    /// Consumes the builder and constructs a [`ContractMetadata`](crate::types::ContractMetadata).
    pub fn build(self) -> crate::types::ContractMetadata {
        crate::types::ContractMetadata {
            name: self.name
            ,
            symbol: self.symbol
            ,
            decimals: self.decimals
            ,
        }
    }
}

