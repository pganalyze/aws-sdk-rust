// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTableOptimizerRunsOutput  {
    /// <p>The Catalog ID of the table.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A continuation token for paginating the returned list of optimizer runs, returned if the current segment of the list is not the last.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of the optimizer runs associated with a table.</p>
    pub table_optimizer_runs: ::std::option::Option<::std::vec::Vec::<crate::types::TableOptimizerRun>>,
    _request_id: Option<String>,
}
impl  ListTableOptimizerRunsOutput  {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<& str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(&self) -> ::std::option::Option<& str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> ::std::option::Option<& str> {
        self.table_name.as_deref()
    }
    /// <p>A continuation token for paginating the returned list of optimizer runs, returned if the current segment of the list is not the last.</p>
    pub fn next_token(&self) -> ::std::option::Option<& str> {
        self.next_token.as_deref()
    }
    /// <p>A list of the optimizer runs associated with a table.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.table_optimizer_runs.is_none()`.
    pub fn table_optimizer_runs(&self) -> & [crate::types::TableOptimizerRun] {
        self.table_optimizer_runs.as_deref()
        .unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListTableOptimizerRunsOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl ListTableOptimizerRunsOutput {
    /// Creates a new builder-style object to manufacture [`ListTableOptimizerRunsOutput`](crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput).
    pub fn builder() -> crate::operation::list_table_optimizer_runs::builders::ListTableOptimizerRunsOutputBuilder {
        crate::operation::list_table_optimizer_runs::builders::ListTableOptimizerRunsOutputBuilder::default()
    }
}

/// A builder for [`ListTableOptimizerRunsOutput`](crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTableOptimizerRunsOutputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) table_optimizer_runs: ::std::option::Option<::std::vec::Vec::<crate::types::TableOptimizerRun>>,
    _request_id: Option<String>,
}
impl ListTableOptimizerRunsOutputBuilder {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input; self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input; self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input; self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>A continuation token for paginating the returned list of optimizer runs, returned if the current segment of the list is not the last.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A continuation token for paginating the returned list of optimizer runs, returned if the current segment of the list is not the last.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input; self
    }
    /// <p>A continuation token for paginating the returned list of optimizer runs, returned if the current segment of the list is not the last.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `table_optimizer_runs`.
    ///
    /// To override the contents of this collection use [`set_table_optimizer_runs`](Self::set_table_optimizer_runs).
    ///
    /// <p>A list of the optimizer runs associated with a table.</p>
    pub fn table_optimizer_runs(mut self, input: crate::types::TableOptimizerRun) -> Self {
        let mut v = self.table_optimizer_runs.unwrap_or_default();
                        v.push(input);
                        self.table_optimizer_runs = ::std::option::Option::Some(v);
                        self
    }
    /// <p>A list of the optimizer runs associated with a table.</p>
    pub fn set_table_optimizer_runs(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::TableOptimizerRun>>) -> Self {
        self.table_optimizer_runs = input; self
    }
    /// <p>A list of the optimizer runs associated with a table.</p>
    pub fn get_table_optimizer_runs(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::TableOptimizerRun>> {
        &self.table_optimizer_runs
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`ListTableOptimizerRunsOutput`](crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput).
    pub fn build(self) -> crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput {
        crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput {
            catalog_id: self.catalog_id
            ,
            database_name: self.database_name
            ,
            table_name: self.table_name
            ,
            next_token: self.next_token
            ,
            table_optimizer_runs: self.table_optimizer_runs
            ,
            _request_id: self._request_id,
        }
    }
}

