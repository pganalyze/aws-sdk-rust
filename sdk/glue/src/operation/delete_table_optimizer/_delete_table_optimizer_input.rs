// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteTableOptimizerInput  {
    /// <p>The Catalog ID of the table.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of table optimizer.</p>
    pub r#type: ::std::option::Option<crate::types::TableOptimizerType>,
}
impl  DeleteTableOptimizerInput  {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<& str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(&self) -> ::std::option::Option<& str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> ::std::option::Option<& str> {
        self.table_name.as_deref()
    }
    /// <p>The type of table optimizer.</p>
    pub fn r#type(&self) -> ::std::option::Option<& crate::types::TableOptimizerType> {
        self.r#type.as_ref()
    }
}
impl DeleteTableOptimizerInput {
    /// Creates a new builder-style object to manufacture [`DeleteTableOptimizerInput`](crate::operation::delete_table_optimizer::DeleteTableOptimizerInput).
    pub fn builder() -> crate::operation::delete_table_optimizer::builders::DeleteTableOptimizerInputBuilder {
        crate::operation::delete_table_optimizer::builders::DeleteTableOptimizerInputBuilder::default()
    }
}

/// A builder for [`DeleteTableOptimizerInput`](crate::operation::delete_table_optimizer::DeleteTableOptimizerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteTableOptimizerInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::TableOptimizerType>,
}
impl DeleteTableOptimizerInputBuilder {
    /// <p>The Catalog ID of the table.</p>
    /// This field is required.
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input; self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input; self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input; self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The type of table optimizer.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TableOptimizerType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of table optimizer.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TableOptimizerType>) -> Self {
        self.r#type = input; self
    }
    /// <p>The type of table optimizer.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TableOptimizerType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`DeleteTableOptimizerInput`](crate::operation::delete_table_optimizer::DeleteTableOptimizerInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_table_optimizer::DeleteTableOptimizerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::delete_table_optimizer::DeleteTableOptimizerInput {
                catalog_id: self.catalog_id
                ,
                database_name: self.database_name
                ,
                table_name: self.table_name
                ,
                r#type: self.r#type
                ,
            }
        )
    }
}

