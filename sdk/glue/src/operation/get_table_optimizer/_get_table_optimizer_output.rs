// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTableOptimizerOutput  {
    /// <p>The Catalog ID of the table.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The optimizer associated with the specified table.</p>
    pub table_optimizer: ::std::option::Option<crate::types::TableOptimizer>,
    _request_id: Option<String>,
}
impl  GetTableOptimizerOutput  {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<& str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(&self) -> ::std::option::Option<& str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> ::std::option::Option<& str> {
        self.table_name.as_deref()
    }
    /// <p>The optimizer associated with the specified table.</p>
    pub fn table_optimizer(&self) -> ::std::option::Option<& crate::types::TableOptimizer> {
        self.table_optimizer.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetTableOptimizerOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl GetTableOptimizerOutput {
    /// Creates a new builder-style object to manufacture [`GetTableOptimizerOutput`](crate::operation::get_table_optimizer::GetTableOptimizerOutput).
    pub fn builder() -> crate::operation::get_table_optimizer::builders::GetTableOptimizerOutputBuilder {
        crate::operation::get_table_optimizer::builders::GetTableOptimizerOutputBuilder::default()
    }
}

/// A builder for [`GetTableOptimizerOutput`](crate::operation::get_table_optimizer::GetTableOptimizerOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTableOptimizerOutputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_optimizer: ::std::option::Option<crate::types::TableOptimizer>,
    _request_id: Option<String>,
}
impl GetTableOptimizerOutputBuilder {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input; self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input; self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input; self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The optimizer associated with the specified table.</p>
    pub fn table_optimizer(mut self, input: crate::types::TableOptimizer) -> Self {
        self.table_optimizer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The optimizer associated with the specified table.</p>
    pub fn set_table_optimizer(mut self, input: ::std::option::Option<crate::types::TableOptimizer>) -> Self {
        self.table_optimizer = input; self
    }
    /// <p>The optimizer associated with the specified table.</p>
    pub fn get_table_optimizer(&self) -> &::std::option::Option<crate::types::TableOptimizer> {
        &self.table_optimizer
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`GetTableOptimizerOutput`](crate::operation::get_table_optimizer::GetTableOptimizerOutput).
    pub fn build(self) -> crate::operation::get_table_optimizer::GetTableOptimizerOutput {
        crate::operation::get_table_optimizer::GetTableOptimizerOutput {
            catalog_id: self.catalog_id
            ,
            database_name: self.database_name
            ,
            table_name: self.table_name
            ,
            table_optimizer: self.table_optimizer
            ,
            _request_id: self._request_id,
        }
    }
}

