// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a target generated with standard connection options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorDataTarget  {
    /// <p>The name of this target node.</p>
    pub name: ::std::string::String,
    /// <p>The <code>connectionType</code>, as provided to the underlying Glue library. This node type supports the following connection types: </p> 
    /// <ul> 
    /// <li> <p> <code>bigquery</code> </p> </li> 
    /// </ul>
    pub connection_type: ::std::string::String,
    /// <p>A map specifying connection options for the node. You can find standard connection options for the corresponding connection type in the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-connect.html"> Connection parameters</a> section of the Glue documentation.</p>
    pub data: ::std::collections::HashMap::<::std::string::String, ::std::string::String>,
    /// <p>The nodes that are inputs to the data target.</p>
    pub inputs: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl  ConnectorDataTarget  {
    /// <p>The name of this target node.</p>
    pub fn name(&self) -> & str {
        use std::ops::Deref; self.name.deref()
    }
    /// <p>The <code>connectionType</code>, as provided to the underlying Glue library. This node type supports the following connection types: </p> 
    /// <ul> 
    /// <li> <p> <code>bigquery</code> </p> </li> 
    /// </ul>
    pub fn connection_type(&self) -> & str {
        use std::ops::Deref; self.connection_type.deref()
    }
    /// <p>A map specifying connection options for the node. You can find standard connection options for the corresponding connection type in the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-connect.html"> Connection parameters</a> section of the Glue documentation.</p>
    pub fn data(&self) -> & ::std::collections::HashMap::<::std::string::String, ::std::string::String> {
        &self.data
    }
    /// <p>The nodes that are inputs to the data target.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inputs.is_none()`.
    pub fn inputs(&self) -> & [::std::string::String] {
        self.inputs.as_deref()
        .unwrap_or_default()
    }
}
impl ConnectorDataTarget {
    /// Creates a new builder-style object to manufacture [`ConnectorDataTarget`](crate::types::ConnectorDataTarget).
    pub fn builder() -> crate::types::builders::ConnectorDataTargetBuilder {
        crate::types::builders::ConnectorDataTargetBuilder::default()
    }
}

/// A builder for [`ConnectorDataTarget`](crate::types::ConnectorDataTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectorDataTargetBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) connection_type: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl ConnectorDataTargetBuilder {
    /// <p>The name of this target node.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this target node.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of this target node.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The <code>connectionType</code>, as provided to the underlying Glue library. This node type supports the following connection types: </p> 
    /// <ul> 
    /// <li> <p> <code>bigquery</code> </p> </li> 
    /// </ul>
    /// This field is required.
    pub fn connection_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>connectionType</code>, as provided to the underlying Glue library. This node type supports the following connection types: </p> 
    /// <ul> 
    /// <li> <p> <code>bigquery</code> </p> </li> 
    /// </ul>
    pub fn set_connection_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_type = input; self
    }
    /// <p>The <code>connectionType</code>, as provided to the underlying Glue library. This node type supports the following connection types: </p> 
    /// <ul> 
    /// <li> <p> <code>bigquery</code> </p> </li> 
    /// </ul>
    pub fn get_connection_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_type
    }
    /// Adds a key-value pair to `data`.
    ///
    /// To override the contents of this collection use [`set_data`](Self::set_data).
    ///
    /// <p>A map specifying connection options for the node. You can find standard connection options for the corresponding connection type in the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-connect.html"> Connection parameters</a> section of the Glue documentation.</p>
    pub fn data(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.data.unwrap_or_default();
                        hash_map.insert(k.into(), v.into());
                        self.data = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>A map specifying connection options for the node. You can find standard connection options for the corresponding connection type in the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-connect.html"> Connection parameters</a> section of the Glue documentation.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>) -> Self {
        self.data = input; self
    }
    /// <p>A map specifying connection options for the node. You can find standard connection options for the corresponding connection type in the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-connect.html"> Connection parameters</a> section of the Glue documentation.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        &self.data
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
                        v.push(input.into());
                        self.inputs = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.inputs = input; self
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.inputs
    }
    /// Consumes the builder and constructs a [`ConnectorDataTarget`](crate::types::ConnectorDataTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ConnectorDataTargetBuilder::name)
    /// - [`connection_type`](crate::types::builders::ConnectorDataTargetBuilder::connection_type)
    /// - [`data`](crate::types::builders::ConnectorDataTargetBuilder::data)
    pub fn build(self) -> ::std::result::Result<crate::types::ConnectorDataTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::ConnectorDataTarget {
                name: self.name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("name", "name was not specified but it is required when building ConnectorDataTarget")
                    )?
                ,
                connection_type: self.connection_type
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("connection_type", "connection_type was not specified but it is required when building ConnectorDataTarget")
                    )?
                ,
                data: self.data
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("data", "data was not specified but it is required when building ConnectorDataTarget")
                    )?
                ,
                inputs: self.inputs
                ,
            }
        )
    }
}

