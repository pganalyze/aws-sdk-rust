// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Set configurations for metrics export.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricsExportConfig  {
    /// <p>The MQTT topic that Device Defender Detect should publish messages to for metrics export.</p>
    pub mqtt_topic: ::std::string::String,
    /// <p>This role ARN has permission to publish MQTT messages, after which Device Defender Detect can assume the role and publish messages on your behalf.</p>
    pub role_arn: ::std::string::String,
}
impl  MetricsExportConfig  {
    /// <p>The MQTT topic that Device Defender Detect should publish messages to for metrics export.</p>
    pub fn mqtt_topic(&self) -> & str {
        use std::ops::Deref; self.mqtt_topic.deref()
    }
    /// <p>This role ARN has permission to publish MQTT messages, after which Device Defender Detect can assume the role and publish messages on your behalf.</p>
    pub fn role_arn(&self) -> & str {
        use std::ops::Deref; self.role_arn.deref()
    }
}
impl MetricsExportConfig {
    /// Creates a new builder-style object to manufacture [`MetricsExportConfig`](crate::types::MetricsExportConfig).
    pub fn builder() -> crate::types::builders::MetricsExportConfigBuilder {
        crate::types::builders::MetricsExportConfigBuilder::default()
    }
}

/// A builder for [`MetricsExportConfig`](crate::types::MetricsExportConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricsExportConfigBuilder {
    pub(crate) mqtt_topic: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl MetricsExportConfigBuilder {
    /// <p>The MQTT topic that Device Defender Detect should publish messages to for metrics export.</p>
    /// This field is required.
    pub fn mqtt_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mqtt_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MQTT topic that Device Defender Detect should publish messages to for metrics export.</p>
    pub fn set_mqtt_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mqtt_topic = input; self
    }
    /// <p>The MQTT topic that Device Defender Detect should publish messages to for metrics export.</p>
    pub fn get_mqtt_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.mqtt_topic
    }
    /// <p>This role ARN has permission to publish MQTT messages, after which Device Defender Detect can assume the role and publish messages on your behalf.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This role ARN has permission to publish MQTT messages, after which Device Defender Detect can assume the role and publish messages on your behalf.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input; self
    }
    /// <p>This role ARN has permission to publish MQTT messages, after which Device Defender Detect can assume the role and publish messages on your behalf.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`MetricsExportConfig`](crate::types::MetricsExportConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`mqtt_topic`](crate::types::builders::MetricsExportConfigBuilder::mqtt_topic)
    /// - [`role_arn`](crate::types::builders::MetricsExportConfigBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricsExportConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::MetricsExportConfig {
                mqtt_topic: self.mqtt_topic
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("mqtt_topic", "mqtt_topic was not specified but it is required when building MetricsExportConfig")
                    )?
                ,
                role_arn: self.role_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("role_arn", "role_arn was not specified but it is required when building MetricsExportConfig")
                    )?
                ,
            }
        )
    }
}

