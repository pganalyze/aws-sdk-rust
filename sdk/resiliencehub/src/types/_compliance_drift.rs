// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the compliance drifts (recovery time objective (RTO) and recovery point objective (RPO)) that were detected for an assessed entity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComplianceDrift  {
    /// <p>Identifier of an entity in which drift was detected. For compliance drift, the entity ID can be either application ID or the AppComponent ID.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of entity in which drift was detected. For compliance drifts, Resilience Hub supports <code>AWS::ResilienceHub::AppComponent</code> and <code>AWS::ResilienceHub::Application</code>.</p>
    pub entity_type: ::std::option::Option<::std::string::String>,
    /// <p>The type of drift detected. Currently, Resilience Hub supports only <b>ApplicationCompliance</b> drift type.</p>
    pub drift_type: ::std::option::Option<crate::types::DriftType>,
    /// <p>Identifier of your application.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>Published version of your application on which drift was detected.</p>
    pub app_version: ::std::option::Option<::std::string::String>,
    /// <p>Assessment identifier of a previous assessment of the same application version. Resilience Hub uses the previous assessment (associated with the reference identifier) to compare the compliance with the current assessment to identify drifts.</p>
    pub expected_reference_id: ::std::option::Option<::std::string::String>,
    /// <p>The expected compliance value of an entity.</p>
    pub expected_value: ::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>>,
    /// <p>Assessment identifier that is associated with this drift item.</p>
    pub actual_reference_id: ::std::option::Option<::std::string::String>,
    /// <p>Actual compliance value of the entity.</p>
    pub actual_value: ::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>>,
    /// <p>Difference type between actual and expected recovery point objective (RPO) and recovery time objective (RTO) values. Currently, Resilience Hub supports only <b>NotEqual</b> difference type.</p>
    pub diff_type: ::std::option::Option<crate::types::DifferenceType>,
}
impl  ComplianceDrift  {
    /// <p>Identifier of an entity in which drift was detected. For compliance drift, the entity ID can be either application ID or the AppComponent ID.</p>
    pub fn entity_id(&self) -> ::std::option::Option<& str> {
        self.entity_id.as_deref()
    }
    /// <p>The type of entity in which drift was detected. For compliance drifts, Resilience Hub supports <code>AWS::ResilienceHub::AppComponent</code> and <code>AWS::ResilienceHub::Application</code>.</p>
    pub fn entity_type(&self) -> ::std::option::Option<& str> {
        self.entity_type.as_deref()
    }
    /// <p>The type of drift detected. Currently, Resilience Hub supports only <b>ApplicationCompliance</b> drift type.</p>
    pub fn drift_type(&self) -> ::std::option::Option<& crate::types::DriftType> {
        self.drift_type.as_ref()
    }
    /// <p>Identifier of your application.</p>
    pub fn app_id(&self) -> ::std::option::Option<& str> {
        self.app_id.as_deref()
    }
    /// <p>Published version of your application on which drift was detected.</p>
    pub fn app_version(&self) -> ::std::option::Option<& str> {
        self.app_version.as_deref()
    }
    /// <p>Assessment identifier of a previous assessment of the same application version. Resilience Hub uses the previous assessment (associated with the reference identifier) to compare the compliance with the current assessment to identify drifts.</p>
    pub fn expected_reference_id(&self) -> ::std::option::Option<& str> {
        self.expected_reference_id.as_deref()
    }
    /// <p>The expected compliance value of an entity.</p>
    pub fn expected_value(&self) -> ::std::option::Option<& ::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>> {
        self.expected_value.as_ref()
    }
    /// <p>Assessment identifier that is associated with this drift item.</p>
    pub fn actual_reference_id(&self) -> ::std::option::Option<& str> {
        self.actual_reference_id.as_deref()
    }
    /// <p>Actual compliance value of the entity.</p>
    pub fn actual_value(&self) -> ::std::option::Option<& ::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>> {
        self.actual_value.as_ref()
    }
    /// <p>Difference type between actual and expected recovery point objective (RPO) and recovery time objective (RTO) values. Currently, Resilience Hub supports only <b>NotEqual</b> difference type.</p>
    pub fn diff_type(&self) -> ::std::option::Option<& crate::types::DifferenceType> {
        self.diff_type.as_ref()
    }
}
impl ComplianceDrift {
    /// Creates a new builder-style object to manufacture [`ComplianceDrift`](crate::types::ComplianceDrift).
    pub fn builder() -> crate::types::builders::ComplianceDriftBuilder {
        crate::types::builders::ComplianceDriftBuilder::default()
    }
}

/// A builder for [`ComplianceDrift`](crate::types::ComplianceDrift).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComplianceDriftBuilder {
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<::std::string::String>,
    pub(crate) drift_type: ::std::option::Option<crate::types::DriftType>,
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) app_version: ::std::option::Option<::std::string::String>,
    pub(crate) expected_reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) expected_value: ::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>>,
    pub(crate) actual_reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) actual_value: ::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>>,
    pub(crate) diff_type: ::std::option::Option<crate::types::DifferenceType>,
}
impl ComplianceDriftBuilder {
    /// <p>Identifier of an entity in which drift was detected. For compliance drift, the entity ID can be either application ID or the AppComponent ID.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of an entity in which drift was detected. For compliance drift, the entity ID can be either application ID or the AppComponent ID.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input; self
    }
    /// <p>Identifier of an entity in which drift was detected. For compliance drift, the entity ID can be either application ID or the AppComponent ID.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The type of entity in which drift was detected. For compliance drifts, Resilience Hub supports <code>AWS::ResilienceHub::AppComponent</code> and <code>AWS::ResilienceHub::Application</code>.</p>
    pub fn entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of entity in which drift was detected. For compliance drifts, Resilience Hub supports <code>AWS::ResilienceHub::AppComponent</code> and <code>AWS::ResilienceHub::Application</code>.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_type = input; self
    }
    /// <p>The type of entity in which drift was detected. For compliance drifts, Resilience Hub supports <code>AWS::ResilienceHub::AppComponent</code> and <code>AWS::ResilienceHub::Application</code>.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_type
    }
    /// <p>The type of drift detected. Currently, Resilience Hub supports only <b>ApplicationCompliance</b> drift type.</p>
    pub fn drift_type(mut self, input: crate::types::DriftType) -> Self {
        self.drift_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of drift detected. Currently, Resilience Hub supports only <b>ApplicationCompliance</b> drift type.</p>
    pub fn set_drift_type(mut self, input: ::std::option::Option<crate::types::DriftType>) -> Self {
        self.drift_type = input; self
    }
    /// <p>The type of drift detected. Currently, Resilience Hub supports only <b>ApplicationCompliance</b> drift type.</p>
    pub fn get_drift_type(&self) -> &::std::option::Option<crate::types::DriftType> {
        &self.drift_type
    }
    /// <p>Identifier of your application.</p>
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of your application.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input; self
    }
    /// <p>Identifier of your application.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>Published version of your application on which drift was detected.</p>
    pub fn app_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Published version of your application on which drift was detected.</p>
    pub fn set_app_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_version = input; self
    }
    /// <p>Published version of your application on which drift was detected.</p>
    pub fn get_app_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_version
    }
    /// <p>Assessment identifier of a previous assessment of the same application version. Resilience Hub uses the previous assessment (associated with the reference identifier) to compare the compliance with the current assessment to identify drifts.</p>
    pub fn expected_reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Assessment identifier of a previous assessment of the same application version. Resilience Hub uses the previous assessment (associated with the reference identifier) to compare the compliance with the current assessment to identify drifts.</p>
    pub fn set_expected_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_reference_id = input; self
    }
    /// <p>Assessment identifier of a previous assessment of the same application version. Resilience Hub uses the previous assessment (associated with the reference identifier) to compare the compliance with the current assessment to identify drifts.</p>
    pub fn get_expected_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_reference_id
    }
    /// Adds a key-value pair to `expected_value`.
    ///
    /// To override the contents of this collection use [`set_expected_value`](Self::set_expected_value).
    ///
    /// <p>The expected compliance value of an entity.</p>
    pub fn expected_value(mut self, k: crate::types::DisruptionType, v: crate::types::DisruptionCompliance) -> Self {
        let mut hash_map = self.expected_value.unwrap_or_default();
                        hash_map.insert(k, v);
                        self.expected_value = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>The expected compliance value of an entity.</p>
    pub fn set_expected_value(mut self, input: ::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>>) -> Self {
        self.expected_value = input; self
    }
    /// <p>The expected compliance value of an entity.</p>
    pub fn get_expected_value(&self) -> &::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>> {
        &self.expected_value
    }
    /// <p>Assessment identifier that is associated with this drift item.</p>
    pub fn actual_reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Assessment identifier that is associated with this drift item.</p>
    pub fn set_actual_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_reference_id = input; self
    }
    /// <p>Assessment identifier that is associated with this drift item.</p>
    pub fn get_actual_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_reference_id
    }
    /// Adds a key-value pair to `actual_value`.
    ///
    /// To override the contents of this collection use [`set_actual_value`](Self::set_actual_value).
    ///
    /// <p>Actual compliance value of the entity.</p>
    pub fn actual_value(mut self, k: crate::types::DisruptionType, v: crate::types::DisruptionCompliance) -> Self {
        let mut hash_map = self.actual_value.unwrap_or_default();
                        hash_map.insert(k, v);
                        self.actual_value = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>Actual compliance value of the entity.</p>
    pub fn set_actual_value(mut self, input: ::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>>) -> Self {
        self.actual_value = input; self
    }
    /// <p>Actual compliance value of the entity.</p>
    pub fn get_actual_value(&self) -> &::std::option::Option<::std::collections::HashMap::<crate::types::DisruptionType, crate::types::DisruptionCompliance>> {
        &self.actual_value
    }
    /// <p>Difference type between actual and expected recovery point objective (RPO) and recovery time objective (RTO) values. Currently, Resilience Hub supports only <b>NotEqual</b> difference type.</p>
    pub fn diff_type(mut self, input: crate::types::DifferenceType) -> Self {
        self.diff_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Difference type between actual and expected recovery point objective (RPO) and recovery time objective (RTO) values. Currently, Resilience Hub supports only <b>NotEqual</b> difference type.</p>
    pub fn set_diff_type(mut self, input: ::std::option::Option<crate::types::DifferenceType>) -> Self {
        self.diff_type = input; self
    }
    /// <p>Difference type between actual and expected recovery point objective (RPO) and recovery time objective (RTO) values. Currently, Resilience Hub supports only <b>NotEqual</b> difference type.</p>
    pub fn get_diff_type(&self) -> &::std::option::Option<crate::types::DifferenceType> {
        &self.diff_type
    }
    /// Consumes the builder and constructs a [`ComplianceDrift`](crate::types::ComplianceDrift).
    pub fn build(self) -> crate::types::ComplianceDrift {
        crate::types::ComplianceDrift {
            entity_id: self.entity_id
            ,
            entity_type: self.entity_type
            ,
            drift_type: self.drift_type
            ,
            app_id: self.app_id
            ,
            app_version: self.app_version
            ,
            expected_reference_id: self.expected_reference_id
            ,
            expected_value: self.expected_value
            ,
            actual_reference_id: self.actual_reference_id
            ,
            actual_value: self.actual_value
            ,
            diff_type: self.diff_type
            ,
        }
    }
}

