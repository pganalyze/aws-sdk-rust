// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is a summary of jobs created or running within the most recent 30 days.</p> 
/// <p>The returned summary may contain the following: Region, Account, State, RestourceType, MessageCategory, StartTime, EndTime, and Count of included jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BackupJobSummary  {
    /// <p>The Amazon Web Services Regions within the job summary.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The account ID that owns the jobs within the summary.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>This value is job count for jobs with the specified state.</p>
    pub state: ::std::option::Option<crate::types::BackupJobStatus>,
    /// <p>This value is the job count for the specified resource type. The request <code>GetSupportedResourceTypes</code> returns strings for supported resource types.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>This parameter is the job count for the specified message category.</p> 
    /// <p>Example strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p> 
    /// <p>The the value ANY returns count of all message categories.</p> 
    /// <p> <code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub message_category: ::std::option::Option<::std::string::String>,
    /// <p>The value as a number of jobs in a job summary.</p>
    pub count: i32,
    /// <p>The value of time in number format of a job start time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The value of time in number format of a job end time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  BackupJobSummary  {
    /// <p>The Amazon Web Services Regions within the job summary.</p>
    pub fn region(&self) -> ::std::option::Option<& str> {
        self.region.as_deref()
    }
    /// <p>The account ID that owns the jobs within the summary.</p>
    pub fn account_id(&self) -> ::std::option::Option<& str> {
        self.account_id.as_deref()
    }
    /// <p>This value is job count for jobs with the specified state.</p>
    pub fn state(&self) -> ::std::option::Option<& crate::types::BackupJobStatus> {
        self.state.as_ref()
    }
    /// <p>This value is the job count for the specified resource type. The request <code>GetSupportedResourceTypes</code> returns strings for supported resource types.</p>
    pub fn resource_type(&self) -> ::std::option::Option<& str> {
        self.resource_type.as_deref()
    }
    /// <p>This parameter is the job count for the specified message category.</p> 
    /// <p>Example strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p> 
    /// <p>The the value ANY returns count of all message categories.</p> 
    /// <p> <code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn message_category(&self) -> ::std::option::Option<& str> {
        self.message_category.as_deref()
    }
    /// <p>The value as a number of jobs in a job summary.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
    /// <p>The value of time in number format of a job start time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The value of time in number format of a job end time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl BackupJobSummary {
    /// Creates a new builder-style object to manufacture [`BackupJobSummary`](crate::types::BackupJobSummary).
    pub fn builder() -> crate::types::builders::BackupJobSummaryBuilder {
        crate::types::builders::BackupJobSummaryBuilder::default()
    }
}

/// A builder for [`BackupJobSummary`](crate::types::BackupJobSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BackupJobSummaryBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::BackupJobStatus>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) message_category: ::std::option::Option<::std::string::String>,
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BackupJobSummaryBuilder {
    /// <p>The Amazon Web Services Regions within the job summary.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Regions within the job summary.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input; self
    }
    /// <p>The Amazon Web Services Regions within the job summary.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The account ID that owns the jobs within the summary.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID that owns the jobs within the summary.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input; self
    }
    /// <p>The account ID that owns the jobs within the summary.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>This value is job count for jobs with the specified state.</p>
    pub fn state(mut self, input: crate::types::BackupJobStatus) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>This value is job count for jobs with the specified state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::BackupJobStatus>) -> Self {
        self.state = input; self
    }
    /// <p>This value is job count for jobs with the specified state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::BackupJobStatus> {
        &self.state
    }
    /// <p>This value is the job count for the specified resource type. The request <code>GetSupportedResourceTypes</code> returns strings for supported resource types.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This value is the job count for the specified resource type. The request <code>GetSupportedResourceTypes</code> returns strings for supported resource types.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input; self
    }
    /// <p>This value is the job count for the specified resource type. The request <code>GetSupportedResourceTypes</code> returns strings for supported resource types.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>This parameter is the job count for the specified message category.</p> 
    /// <p>Example strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p> 
    /// <p>The the value ANY returns count of all message categories.</p> 
    /// <p> <code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn message_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This parameter is the job count for the specified message category.</p> 
    /// <p>Example strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p> 
    /// <p>The the value ANY returns count of all message categories.</p> 
    /// <p> <code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn set_message_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_category = input; self
    }
    /// <p>This parameter is the job count for the specified message category.</p> 
    /// <p>Example strings include <code>AccessDenied</code>, <code>Success</code>, and <code>InvalidParameters</code>. See <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">Monitoring</a> for a list of MessageCategory strings.</p> 
    /// <p>The the value ANY returns count of all message categories.</p> 
    /// <p> <code>AGGREGATE_ALL</code> aggregates job counts for all message categories and returns the sum.</p>
    pub fn get_message_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_category
    }
    /// <p>The value as a number of jobs in a job summary.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value as a number of jobs in a job summary.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input; self
    }
    /// <p>The value as a number of jobs in a job summary.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p>The value of time in number format of a job start time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of time in number format of a job start time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input; self
    }
    /// <p>The value of time in number format of a job start time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The value of time in number format of a job end time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of time in number format of a job end time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input; self
    }
    /// <p>The value of time in number format of a job end time.</p> 
    /// <p>This value is the time in Unix format, Coordinated Universal Time (UTC), and accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`BackupJobSummary`](crate::types::BackupJobSummary).
    pub fn build(self) -> crate::types::BackupJobSummary {
        crate::types::BackupJobSummary {
            region: self.region
            ,
            account_id: self.account_id
            ,
            state: self.state
            ,
            resource_type: self.resource_type
            ,
            message_category: self.message_category
            ,
            count: self.count
                .unwrap_or_default()
            ,
            start_time: self.start_time
            ,
            end_time: self.end_time
            ,
        }
    }
}

