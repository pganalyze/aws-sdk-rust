// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes configuration settings related to network traffic of an App Runner service. Consists of embedded objects for each configurable network feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkConfiguration  {
    /// <p>Network configuration settings for outbound message traffic.</p>
    pub egress_configuration: ::std::option::Option<crate::types::EgressConfiguration>,
    /// <p>Network configuration settings for inbound message traffic.</p>
    pub ingress_configuration: ::std::option::Option<crate::types::IngressConfiguration>,
    /// <p>App Runner provides you with the option to choose between <i>Internet Protocol version 4 (IPv4)</i> and <i>dual-stack</i> (IPv4 and IPv6) for your incoming public network configuration. This is an optional parameter. If you do not specify an <code>IpAddressType</code>, it defaults to select IPv4.</p> <note> 
    /// <p> Currently, App Runner supports dual-stack for only Public endpoint. Only IPv4 is supported for Private endpoint. If you update a service that's using dual-stack Public endpoint to a Private endpoint, your App Runner service will default to support only IPv4 for Private endpoint and fail to receive traffic originating from IPv6 endpoint. </p> 
    /// </note>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
}
impl  NetworkConfiguration  {
    /// <p>Network configuration settings for outbound message traffic.</p>
    pub fn egress_configuration(&self) -> ::std::option::Option<& crate::types::EgressConfiguration> {
        self.egress_configuration.as_ref()
    }
    /// <p>Network configuration settings for inbound message traffic.</p>
    pub fn ingress_configuration(&self) -> ::std::option::Option<& crate::types::IngressConfiguration> {
        self.ingress_configuration.as_ref()
    }
    /// <p>App Runner provides you with the option to choose between <i>Internet Protocol version 4 (IPv4)</i> and <i>dual-stack</i> (IPv4 and IPv6) for your incoming public network configuration. This is an optional parameter. If you do not specify an <code>IpAddressType</code>, it defaults to select IPv4.</p> <note> 
    /// <p> Currently, App Runner supports dual-stack for only Public endpoint. Only IPv4 is supported for Private endpoint. If you update a service that's using dual-stack Public endpoint to a Private endpoint, your App Runner service will default to support only IPv4 for Private endpoint and fail to receive traffic originating from IPv6 endpoint. </p> 
    /// </note>
    pub fn ip_address_type(&self) -> ::std::option::Option<& crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
}
impl NetworkConfiguration {
    /// Creates a new builder-style object to manufacture [`NetworkConfiguration`](crate::types::NetworkConfiguration).
    pub fn builder() -> crate::types::builders::NetworkConfigurationBuilder {
        crate::types::builders::NetworkConfigurationBuilder::default()
    }
}

/// A builder for [`NetworkConfiguration`](crate::types::NetworkConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkConfigurationBuilder {
    pub(crate) egress_configuration: ::std::option::Option<crate::types::EgressConfiguration>,
    pub(crate) ingress_configuration: ::std::option::Option<crate::types::IngressConfiguration>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
}
impl NetworkConfigurationBuilder {
    /// <p>Network configuration settings for outbound message traffic.</p>
    pub fn egress_configuration(mut self, input: crate::types::EgressConfiguration) -> Self {
        self.egress_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network configuration settings for outbound message traffic.</p>
    pub fn set_egress_configuration(mut self, input: ::std::option::Option<crate::types::EgressConfiguration>) -> Self {
        self.egress_configuration = input; self
    }
    /// <p>Network configuration settings for outbound message traffic.</p>
    pub fn get_egress_configuration(&self) -> &::std::option::Option<crate::types::EgressConfiguration> {
        &self.egress_configuration
    }
    /// <p>Network configuration settings for inbound message traffic.</p>
    pub fn ingress_configuration(mut self, input: crate::types::IngressConfiguration) -> Self {
        self.ingress_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network configuration settings for inbound message traffic.</p>
    pub fn set_ingress_configuration(mut self, input: ::std::option::Option<crate::types::IngressConfiguration>) -> Self {
        self.ingress_configuration = input; self
    }
    /// <p>Network configuration settings for inbound message traffic.</p>
    pub fn get_ingress_configuration(&self) -> &::std::option::Option<crate::types::IngressConfiguration> {
        &self.ingress_configuration
    }
    /// <p>App Runner provides you with the option to choose between <i>Internet Protocol version 4 (IPv4)</i> and <i>dual-stack</i> (IPv4 and IPv6) for your incoming public network configuration. This is an optional parameter. If you do not specify an <code>IpAddressType</code>, it defaults to select IPv4.</p> <note> 
    /// <p> Currently, App Runner supports dual-stack for only Public endpoint. Only IPv4 is supported for Private endpoint. If you update a service that's using dual-stack Public endpoint to a Private endpoint, your App Runner service will default to support only IPv4 for Private endpoint and fail to receive traffic originating from IPv6 endpoint. </p> 
    /// </note>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>App Runner provides you with the option to choose between <i>Internet Protocol version 4 (IPv4)</i> and <i>dual-stack</i> (IPv4 and IPv6) for your incoming public network configuration. This is an optional parameter. If you do not specify an <code>IpAddressType</code>, it defaults to select IPv4.</p> <note> 
    /// <p> Currently, App Runner supports dual-stack for only Public endpoint. Only IPv4 is supported for Private endpoint. If you update a service that's using dual-stack Public endpoint to a Private endpoint, your App Runner service will default to support only IPv4 for Private endpoint and fail to receive traffic originating from IPv6 endpoint. </p> 
    /// </note>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input; self
    }
    /// <p>App Runner provides you with the option to choose between <i>Internet Protocol version 4 (IPv4)</i> and <i>dual-stack</i> (IPv4 and IPv6) for your incoming public network configuration. This is an optional parameter. If you do not specify an <code>IpAddressType</code>, it defaults to select IPv4.</p> <note> 
    /// <p> Currently, App Runner supports dual-stack for only Public endpoint. Only IPv4 is supported for Private endpoint. If you update a service that's using dual-stack Public endpoint to a Private endpoint, your App Runner service will default to support only IPv4 for Private endpoint and fail to receive traffic originating from IPv6 endpoint. </p> 
    /// </note>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// Consumes the builder and constructs a [`NetworkConfiguration`](crate::types::NetworkConfiguration).
    pub fn build(self) -> crate::types::NetworkConfiguration {
        crate::types::NetworkConfiguration {
            egress_configuration: self.egress_configuration
            ,
            ingress_configuration: self.ingress_configuration
            ,
            ip_address_type: self.ip_address_type
            ,
        }
    }
}

