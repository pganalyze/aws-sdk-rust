// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration that specifies a minimum amount of time since last access for an exported file to be eligible for release from an Amazon FSx for Lustre file system. Only files that were last accessed before this point-in-time can be released. For example, if you specify a last accessed time criteria of 9 days, only files that were last accessed 9.00001 or more days ago can be released.</p> 
/// <p>Only file data that has been exported to S3 can be released. Files that have not yet been exported to S3, such as new or changed files that have not been exported, are not eligible for release. When files are released, their metadata stays on the file system, so they can still be accessed later. Users and applications can access a released file by reading the file again, which restores data from Amazon S3 to the FSx for Lustre file system.</p> <note> 
/// <p>If a file meets the last accessed time criteria, its file or directory path must also be specified with the <code>Paths</code> parameter of the operation in order for the file to be released.</p> 
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReleaseConfiguration  {
    /// <p>Defines the point-in-time since an exported file was last accessed, in order for that file to be eligible for release. Only files that were last accessed before this point-in-time are eligible to be released from the file system.</p>
    pub duration_since_last_access: ::std::option::Option<crate::types::DurationSinceLastAccess>,
}
impl  ReleaseConfiguration  {
    /// <p>Defines the point-in-time since an exported file was last accessed, in order for that file to be eligible for release. Only files that were last accessed before this point-in-time are eligible to be released from the file system.</p>
    pub fn duration_since_last_access(&self) -> ::std::option::Option<& crate::types::DurationSinceLastAccess> {
        self.duration_since_last_access.as_ref()
    }
}
impl ReleaseConfiguration {
    /// Creates a new builder-style object to manufacture [`ReleaseConfiguration`](crate::types::ReleaseConfiguration).
    pub fn builder() -> crate::types::builders::ReleaseConfigurationBuilder {
        crate::types::builders::ReleaseConfigurationBuilder::default()
    }
}

/// A builder for [`ReleaseConfiguration`](crate::types::ReleaseConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReleaseConfigurationBuilder {
    pub(crate) duration_since_last_access: ::std::option::Option<crate::types::DurationSinceLastAccess>,
}
impl ReleaseConfigurationBuilder {
    /// <p>Defines the point-in-time since an exported file was last accessed, in order for that file to be eligible for release. Only files that were last accessed before this point-in-time are eligible to be released from the file system.</p>
    pub fn duration_since_last_access(mut self, input: crate::types::DurationSinceLastAccess) -> Self {
        self.duration_since_last_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the point-in-time since an exported file was last accessed, in order for that file to be eligible for release. Only files that were last accessed before this point-in-time are eligible to be released from the file system.</p>
    pub fn set_duration_since_last_access(mut self, input: ::std::option::Option<crate::types::DurationSinceLastAccess>) -> Self {
        self.duration_since_last_access = input; self
    }
    /// <p>Defines the point-in-time since an exported file was last accessed, in order for that file to be eligible for release. Only files that were last accessed before this point-in-time are eligible to be released from the file system.</p>
    pub fn get_duration_since_last_access(&self) -> &::std::option::Option<crate::types::DurationSinceLastAccess> {
        &self.duration_since_last_access
    }
    /// Consumes the builder and constructs a [`ReleaseConfiguration`](crate::types::ReleaseConfiguration).
    pub fn build(self) -> crate::types::ReleaseConfiguration {
        crate::types::ReleaseConfiguration {
            duration_since_last_access: self.duration_since_last_access
            ,
        }
    }
}

