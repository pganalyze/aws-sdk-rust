// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides details about Amazon EventBridge event bus. An event bus is a router that receives events and delivers them to zero or more destinations, or targets. This can be a custom event bus which you can use to receive events from your custom applications and services, or it can be a partner event bus which can be matched to a partner event source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEventsEventbusDetails  {
    /// <p> The Amazon Resource Name (ARN) of the account permitted to write events to the current account.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p> The name of the event bus.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The policy that enables the external account to send events to your account.</p>
    pub policy: ::std::option::Option<::std::string::String>,
}
impl  AwsEventsEventbusDetails  {
    /// <p> The Amazon Resource Name (ARN) of the account permitted to write events to the current account.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p> The name of the event bus.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p> The policy that enables the external account to send events to your account.</p>
    pub fn policy(&self) -> ::std::option::Option<& str> {
        self.policy.as_deref()
    }
}
impl AwsEventsEventbusDetails {
    /// Creates a new builder-style object to manufacture [`AwsEventsEventbusDetails`](crate::types::AwsEventsEventbusDetails).
    pub fn builder() -> crate::types::builders::AwsEventsEventbusDetailsBuilder {
        crate::types::builders::AwsEventsEventbusDetailsBuilder::default()
    }
}

/// A builder for [`AwsEventsEventbusDetails`](crate::types::AwsEventsEventbusDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEventsEventbusDetailsBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) policy: ::std::option::Option<::std::string::String>,
}
impl AwsEventsEventbusDetailsBuilder {
    /// <p> The Amazon Resource Name (ARN) of the account permitted to write events to the current account.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the account permitted to write events to the current account.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p> The Amazon Resource Name (ARN) of the account permitted to write events to the current account.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p> The name of the event bus.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the event bus.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p> The name of the event bus.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The policy that enables the external account to send events to your account.</p>
    pub fn policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The policy that enables the external account to send events to your account.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy = input; self
    }
    /// <p> The policy that enables the external account to send events to your account.</p>
    pub fn get_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy
    }
    /// Consumes the builder and constructs a [`AwsEventsEventbusDetails`](crate::types::AwsEventsEventbusDetails).
    pub fn build(self) -> crate::types::AwsEventsEventbusDetails {
        crate::types::AwsEventsEventbusDetails {
            arn: self.arn
            ,
            name: self.name
            ,
            policy: self.policy
            ,
        }
    }
}

