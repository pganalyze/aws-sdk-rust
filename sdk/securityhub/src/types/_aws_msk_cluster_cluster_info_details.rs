// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provide details about an Amazon MSK cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsMskClusterClusterInfoDetails  {
    /// <p> Includes encryption-related information, such as the KMS key used for encrypting data at rest and whether you want Amazon MSK to encrypt your data in transit.</p>
    pub encryption_info: ::std::option::Option<crate::types::AwsMskClusterClusterInfoEncryptionInfoDetails>,
    /// <p> The current version of the MSK cluster.</p>
    pub current_version: ::std::option::Option<::std::string::String>,
    /// <p> The number of broker nodes in the cluster.</p>
    pub number_of_broker_nodes: ::std::option::Option<i32>,
    /// <p> The name of the cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p> Provides information for different modes of client authentication.</p>
    pub client_authentication: ::std::option::Option<crate::types::AwsMskClusterClusterInfoClientAuthenticationDetails>,
}
impl  AwsMskClusterClusterInfoDetails  {
    /// <p> Includes encryption-related information, such as the KMS key used for encrypting data at rest and whether you want Amazon MSK to encrypt your data in transit.</p>
    pub fn encryption_info(&self) -> ::std::option::Option<& crate::types::AwsMskClusterClusterInfoEncryptionInfoDetails> {
        self.encryption_info.as_ref()
    }
    /// <p> The current version of the MSK cluster.</p>
    pub fn current_version(&self) -> ::std::option::Option<& str> {
        self.current_version.as_deref()
    }
    /// <p> The number of broker nodes in the cluster.</p>
    pub fn number_of_broker_nodes(&self) -> ::std::option::Option<i32> {
        self.number_of_broker_nodes
    }
    /// <p> The name of the cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<& str> {
        self.cluster_name.as_deref()
    }
    /// <p> Provides information for different modes of client authentication.</p>
    pub fn client_authentication(&self) -> ::std::option::Option<& crate::types::AwsMskClusterClusterInfoClientAuthenticationDetails> {
        self.client_authentication.as_ref()
    }
}
impl AwsMskClusterClusterInfoDetails {
    /// Creates a new builder-style object to manufacture [`AwsMskClusterClusterInfoDetails`](crate::types::AwsMskClusterClusterInfoDetails).
    pub fn builder() -> crate::types::builders::AwsMskClusterClusterInfoDetailsBuilder {
        crate::types::builders::AwsMskClusterClusterInfoDetailsBuilder::default()
    }
}

/// A builder for [`AwsMskClusterClusterInfoDetails`](crate::types::AwsMskClusterClusterInfoDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsMskClusterClusterInfoDetailsBuilder {
    pub(crate) encryption_info: ::std::option::Option<crate::types::AwsMskClusterClusterInfoEncryptionInfoDetails>,
    pub(crate) current_version: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_broker_nodes: ::std::option::Option<i32>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_authentication: ::std::option::Option<crate::types::AwsMskClusterClusterInfoClientAuthenticationDetails>,
}
impl AwsMskClusterClusterInfoDetailsBuilder {
    /// <p> Includes encryption-related information, such as the KMS key used for encrypting data at rest and whether you want Amazon MSK to encrypt your data in transit.</p>
    pub fn encryption_info(mut self, input: crate::types::AwsMskClusterClusterInfoEncryptionInfoDetails) -> Self {
        self.encryption_info = ::std::option::Option::Some(input);
        self
    }
    /// <p> Includes encryption-related information, such as the KMS key used for encrypting data at rest and whether you want Amazon MSK to encrypt your data in transit.</p>
    pub fn set_encryption_info(mut self, input: ::std::option::Option<crate::types::AwsMskClusterClusterInfoEncryptionInfoDetails>) -> Self {
        self.encryption_info = input; self
    }
    /// <p> Includes encryption-related information, such as the KMS key used for encrypting data at rest and whether you want Amazon MSK to encrypt your data in transit.</p>
    pub fn get_encryption_info(&self) -> &::std::option::Option<crate::types::AwsMskClusterClusterInfoEncryptionInfoDetails> {
        &self.encryption_info
    }
    /// <p> The current version of the MSK cluster.</p>
    pub fn current_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The current version of the MSK cluster.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_version = input; self
    }
    /// <p> The current version of the MSK cluster.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_version
    }
    /// <p> The number of broker nodes in the cluster.</p>
    pub fn number_of_broker_nodes(mut self, input: i32) -> Self {
        self.number_of_broker_nodes = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of broker nodes in the cluster.</p>
    pub fn set_number_of_broker_nodes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_broker_nodes = input; self
    }
    /// <p> The number of broker nodes in the cluster.</p>
    pub fn get_number_of_broker_nodes(&self) -> &::std::option::Option<i32> {
        &self.number_of_broker_nodes
    }
    /// <p> The name of the cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input; self
    }
    /// <p> The name of the cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p> Provides information for different modes of client authentication.</p>
    pub fn client_authentication(mut self, input: crate::types::AwsMskClusterClusterInfoClientAuthenticationDetails) -> Self {
        self.client_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p> Provides information for different modes of client authentication.</p>
    pub fn set_client_authentication(mut self, input: ::std::option::Option<crate::types::AwsMskClusterClusterInfoClientAuthenticationDetails>) -> Self {
        self.client_authentication = input; self
    }
    /// <p> Provides information for different modes of client authentication.</p>
    pub fn get_client_authentication(&self) -> &::std::option::Option<crate::types::AwsMskClusterClusterInfoClientAuthenticationDetails> {
        &self.client_authentication
    }
    /// Consumes the builder and constructs a [`AwsMskClusterClusterInfoDetails`](crate::types::AwsMskClusterClusterInfoDetails).
    pub fn build(self) -> crate::types::AwsMskClusterClusterInfoDetails {
        crate::types::AwsMskClusterClusterInfoDetails {
            encryption_info: self.encryption_info
            ,
            current_version: self.current_version
            ,
            number_of_broker_nodes: self.number_of_broker_nodes
            ,
            cluster_name: self.cluster_name
            ,
            client_authentication: self.client_authentication
            ,
        }
    }
}

