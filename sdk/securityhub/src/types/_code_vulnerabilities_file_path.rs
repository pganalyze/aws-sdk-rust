// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides details about where a code vulnerability is located in your Lambda function. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeVulnerabilitiesFilePath  {
    /// <p> The line number of the last line of code in which the vulnerability is located. </p>
    pub end_line: ::std::option::Option<i32>,
    /// <p> The name of the file in which the code vulnerability is located. </p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p> The file path to the code in which the vulnerability is located. </p>
    pub file_path: ::std::option::Option<::std::string::String>,
    /// <p> The line number of the first line of code in which the vulnerability is located. </p>
    pub start_line: ::std::option::Option<i32>,
}
impl  CodeVulnerabilitiesFilePath  {
    /// <p> The line number of the last line of code in which the vulnerability is located. </p>
    pub fn end_line(&self) -> ::std::option::Option<i32> {
        self.end_line
    }
    /// <p> The name of the file in which the code vulnerability is located. </p>
    pub fn file_name(&self) -> ::std::option::Option<& str> {
        self.file_name.as_deref()
    }
    /// <p> The file path to the code in which the vulnerability is located. </p>
    pub fn file_path(&self) -> ::std::option::Option<& str> {
        self.file_path.as_deref()
    }
    /// <p> The line number of the first line of code in which the vulnerability is located. </p>
    pub fn start_line(&self) -> ::std::option::Option<i32> {
        self.start_line
    }
}
impl CodeVulnerabilitiesFilePath {
    /// Creates a new builder-style object to manufacture [`CodeVulnerabilitiesFilePath`](crate::types::CodeVulnerabilitiesFilePath).
    pub fn builder() -> crate::types::builders::CodeVulnerabilitiesFilePathBuilder {
        crate::types::builders::CodeVulnerabilitiesFilePathBuilder::default()
    }
}

/// A builder for [`CodeVulnerabilitiesFilePath`](crate::types::CodeVulnerabilitiesFilePath).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeVulnerabilitiesFilePathBuilder {
    pub(crate) end_line: ::std::option::Option<i32>,
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) start_line: ::std::option::Option<i32>,
}
impl CodeVulnerabilitiesFilePathBuilder {
    /// <p> The line number of the last line of code in which the vulnerability is located. </p>
    pub fn end_line(mut self, input: i32) -> Self {
        self.end_line = ::std::option::Option::Some(input);
        self
    }
    /// <p> The line number of the last line of code in which the vulnerability is located. </p>
    pub fn set_end_line(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_line = input; self
    }
    /// <p> The line number of the last line of code in which the vulnerability is located. </p>
    pub fn get_end_line(&self) -> &::std::option::Option<i32> {
        &self.end_line
    }
    /// <p> The name of the file in which the code vulnerability is located. </p>
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the file in which the code vulnerability is located. </p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input; self
    }
    /// <p> The name of the file in which the code vulnerability is located. </p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p> The file path to the code in which the vulnerability is located. </p>
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The file path to the code in which the vulnerability is located. </p>
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input; self
    }
    /// <p> The file path to the code in which the vulnerability is located. </p>
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }
    /// <p> The line number of the first line of code in which the vulnerability is located. </p>
    pub fn start_line(mut self, input: i32) -> Self {
        self.start_line = ::std::option::Option::Some(input);
        self
    }
    /// <p> The line number of the first line of code in which the vulnerability is located. </p>
    pub fn set_start_line(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_line = input; self
    }
    /// <p> The line number of the first line of code in which the vulnerability is located. </p>
    pub fn get_start_line(&self) -> &::std::option::Option<i32> {
        &self.start_line
    }
    /// Consumes the builder and constructs a [`CodeVulnerabilitiesFilePath`](crate::types::CodeVulnerabilitiesFilePath).
    pub fn build(self) -> crate::types::CodeVulnerabilitiesFilePath {
        crate::types::CodeVulnerabilitiesFilePath {
            end_line: self.end_line
            ,
            file_name: self.file_name
            ,
            file_path: self.file_path
            ,
            start_line: self.start_line
            ,
        }
    }
}

