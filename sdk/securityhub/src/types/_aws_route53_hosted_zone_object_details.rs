// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An object that contains information about an Amazon Route&nbsp;53 hosted zone. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsRoute53HostedZoneObjectDetails  {
    /// <p> The ID that Route&nbsp;53 assigns to the hosted zone when you create it. </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p> The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> An object that includes the <code>Comment</code> element.</p>
    pub config: ::std::option::Option<crate::types::AwsRoute53HostedZoneConfigDetails>,
}
impl  AwsRoute53HostedZoneObjectDetails  {
    /// <p> The ID that Route&nbsp;53 assigns to the hosted zone when you create it. </p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p> The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p> An object that includes the <code>Comment</code> element.</p>
    pub fn config(&self) -> ::std::option::Option<& crate::types::AwsRoute53HostedZoneConfigDetails> {
        self.config.as_ref()
    }
}
impl AwsRoute53HostedZoneObjectDetails {
    /// Creates a new builder-style object to manufacture [`AwsRoute53HostedZoneObjectDetails`](crate::types::AwsRoute53HostedZoneObjectDetails).
    pub fn builder() -> crate::types::builders::AwsRoute53HostedZoneObjectDetailsBuilder {
        crate::types::builders::AwsRoute53HostedZoneObjectDetailsBuilder::default()
    }
}

/// A builder for [`AwsRoute53HostedZoneObjectDetails`](crate::types::AwsRoute53HostedZoneObjectDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsRoute53HostedZoneObjectDetailsBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) config: ::std::option::Option<crate::types::AwsRoute53HostedZoneConfigDetails>,
}
impl AwsRoute53HostedZoneObjectDetailsBuilder {
    /// <p> The ID that Route&nbsp;53 assigns to the hosted zone when you create it. </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID that Route&nbsp;53 assigns to the hosted zone when you create it. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p> The ID that Route&nbsp;53 assigns to the hosted zone when you create it. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p> The name of the domain. For public hosted zones, this is the name that you have registered with your DNS registrar.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> An object that includes the <code>Comment</code> element.</p>
    pub fn config(mut self, input: crate::types::AwsRoute53HostedZoneConfigDetails) -> Self {
        self.config = ::std::option::Option::Some(input);
        self
    }
    /// <p> An object that includes the <code>Comment</code> element.</p>
    pub fn set_config(mut self, input: ::std::option::Option<crate::types::AwsRoute53HostedZoneConfigDetails>) -> Self {
        self.config = input; self
    }
    /// <p> An object that includes the <code>Comment</code> element.</p>
    pub fn get_config(&self) -> &::std::option::Option<crate::types::AwsRoute53HostedZoneConfigDetails> {
        &self.config
    }
    /// Consumes the builder and constructs a [`AwsRoute53HostedZoneObjectDetails`](crate::types::AwsRoute53HostedZoneObjectDetails).
    pub fn build(self) -> crate::types::AwsRoute53HostedZoneObjectDetails {
        crate::types::AwsRoute53HostedZoneObjectDetails {
            id: self.id
            ,
            name: self.name
            ,
            config: self.config
            ,
        }
    }
}

