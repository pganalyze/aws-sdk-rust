// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateReplicationInfoOutput  {
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub replicator_arn: ::std::option::Option<::std::string::String>,
    /// <p>State of the replicator.</p>
    pub replicator_state: ::std::option::Option<crate::types::ReplicatorState>,
    _request_id: Option<String>,
}
impl  UpdateReplicationInfoOutput  {
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn replicator_arn(&self) -> ::std::option::Option<& str> {
        self.replicator_arn.as_deref()
    }
    /// <p>State of the replicator.</p>
    pub fn replicator_state(&self) -> ::std::option::Option<& crate::types::ReplicatorState> {
        self.replicator_state.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateReplicationInfoOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl UpdateReplicationInfoOutput {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationInfoOutput`](crate::operation::update_replication_info::UpdateReplicationInfoOutput).
    pub fn builder() -> crate::operation::update_replication_info::builders::UpdateReplicationInfoOutputBuilder {
        crate::operation::update_replication_info::builders::UpdateReplicationInfoOutputBuilder::default()
    }
}

/// A builder for [`UpdateReplicationInfoOutput`](crate::operation::update_replication_info::UpdateReplicationInfoOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateReplicationInfoOutputBuilder {
    pub(crate) replicator_arn: ::std::option::Option<::std::string::String>,
    pub(crate) replicator_state: ::std::option::Option<crate::types::ReplicatorState>,
    _request_id: Option<String>,
}
impl UpdateReplicationInfoOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn replicator_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replicator_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn set_replicator_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replicator_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn get_replicator_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.replicator_arn
    }
    /// <p>State of the replicator.</p>
    pub fn replicator_state(mut self, input: crate::types::ReplicatorState) -> Self {
        self.replicator_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the replicator.</p>
    pub fn set_replicator_state(mut self, input: ::std::option::Option<crate::types::ReplicatorState>) -> Self {
        self.replicator_state = input; self
    }
    /// <p>State of the replicator.</p>
    pub fn get_replicator_state(&self) -> &::std::option::Option<crate::types::ReplicatorState> {
        &self.replicator_state
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`UpdateReplicationInfoOutput`](crate::operation::update_replication_info::UpdateReplicationInfoOutput).
    pub fn build(self) -> crate::operation::update_replication_info::UpdateReplicationInfoOutput {
        crate::operation::update_replication_info::UpdateReplicationInfoOutput {
            replicator_arn: self.replicator_arn
            ,
            replicator_state: self.replicator_state
            ,
            _request_id: self._request_id,
        }
    }
}

