// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about a cluster operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterOperationV2Summary  {
    /// <p>ARN of the cluster.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Type of the backend cluster.</p>
    pub cluster_type: ::std::option::Option<crate::types::ClusterType>,
    /// <p>The time at which operation was started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the operation finished.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>ARN of the cluster operation.</p>
    pub operation_arn: ::std::option::Option<::std::string::String>,
    /// <p>State of the cluster operation.</p>
    pub operation_state: ::std::option::Option<::std::string::String>,
    /// <p>Type of the cluster operation.</p>
    pub operation_type: ::std::option::Option<::std::string::String>,
}
impl  ClusterOperationV2Summary  {
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<& str> {
        self.cluster_arn.as_deref()
    }
    /// <p>Type of the backend cluster.</p>
    pub fn cluster_type(&self) -> ::std::option::Option<& crate::types::ClusterType> {
        self.cluster_type.as_ref()
    }
    /// <p>The time at which operation was started.</p>
    pub fn start_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time at which the operation finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn operation_arn(&self) -> ::std::option::Option<& str> {
        self.operation_arn.as_deref()
    }
    /// <p>State of the cluster operation.</p>
    pub fn operation_state(&self) -> ::std::option::Option<& str> {
        self.operation_state.as_deref()
    }
    /// <p>Type of the cluster operation.</p>
    pub fn operation_type(&self) -> ::std::option::Option<& str> {
        self.operation_type.as_deref()
    }
}
impl ClusterOperationV2Summary {
    /// Creates a new builder-style object to manufacture [`ClusterOperationV2Summary`](crate::types::ClusterOperationV2Summary).
    pub fn builder() -> crate::types::builders::ClusterOperationV2SummaryBuilder {
        crate::types::builders::ClusterOperationV2SummaryBuilder::default()
    }
}

/// A builder for [`ClusterOperationV2Summary`](crate::types::ClusterOperationV2Summary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClusterOperationV2SummaryBuilder {
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_type: ::std::option::Option<crate::types::ClusterType>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) operation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) operation_state: ::std::option::Option<::std::string::String>,
    pub(crate) operation_type: ::std::option::Option<::std::string::String>,
}
impl ClusterOperationV2SummaryBuilder {
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input; self
    }
    /// <p>ARN of the cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>Type of the backend cluster.</p>
    pub fn cluster_type(mut self, input: crate::types::ClusterType) -> Self {
        self.cluster_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the backend cluster.</p>
    pub fn set_cluster_type(mut self, input: ::std::option::Option<crate::types::ClusterType>) -> Self {
        self.cluster_type = input; self
    }
    /// <p>Type of the backend cluster.</p>
    pub fn get_cluster_type(&self) -> &::std::option::Option<crate::types::ClusterType> {
        &self.cluster_type
    }
    /// <p>The time at which operation was started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which operation was started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input; self
    }
    /// <p>The time at which operation was started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time at which the operation finished.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the operation finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input; self
    }
    /// <p>The time at which the operation finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn operation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn set_operation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_arn = input; self
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn get_operation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_arn
    }
    /// <p>State of the cluster operation.</p>
    pub fn operation_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>State of the cluster operation.</p>
    pub fn set_operation_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_state = input; self
    }
    /// <p>State of the cluster operation.</p>
    pub fn get_operation_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_state
    }
    /// <p>Type of the cluster operation.</p>
    pub fn operation_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of the cluster operation.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_type = input; self
    }
    /// <p>Type of the cluster operation.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_type
    }
    /// Consumes the builder and constructs a [`ClusterOperationV2Summary`](crate::types::ClusterOperationV2Summary).
    pub fn build(self) -> crate::types::ClusterOperationV2Summary {
        crate::types::ClusterOperationV2Summary {
            cluster_arn: self.cluster_arn
            ,
            cluster_type: self.cluster_type
            ,
            start_time: self.start_time
            ,
            end_time: self.end_time
            ,
            operation_arn: self.operation_arn
            ,
            operation_state: self.operation_state
            ,
            operation_type: self.operation_type
            ,
        }
    }
}

