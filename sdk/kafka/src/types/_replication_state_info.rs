// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Details about the state of a replicator
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationStateInfo  {
    /// Code that describes the current state of the replicator.
    pub code: ::std::option::Option<::std::string::String>,
    /// Message that describes the state of the replicator.
    pub message: ::std::option::Option<::std::string::String>,
}
impl  ReplicationStateInfo  {
    /// Code that describes the current state of the replicator.
    pub fn code(&self) -> ::std::option::Option<& str> {
        self.code.as_deref()
    }
    /// Message that describes the state of the replicator.
    pub fn message(&self) -> ::std::option::Option<& str> {
        self.message.as_deref()
    }
}
impl ReplicationStateInfo {
    /// Creates a new builder-style object to manufacture [`ReplicationStateInfo`](crate::types::ReplicationStateInfo).
    pub fn builder() -> crate::types::builders::ReplicationStateInfoBuilder {
        crate::types::builders::ReplicationStateInfoBuilder::default()
    }
}

/// A builder for [`ReplicationStateInfo`](crate::types::ReplicationStateInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicationStateInfoBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl ReplicationStateInfoBuilder {
    /// Code that describes the current state of the replicator.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// Code that describes the current state of the replicator.
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input; self
    }
    /// Code that describes the current state of the replicator.
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// Message that describes the state of the replicator.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// Message that describes the state of the replicator.
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input; self
    }
    /// Message that describes the state of the replicator.
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`ReplicationStateInfo`](crate::types::ReplicationStateInfo).
    pub fn build(self) -> crate::types::ReplicationStateInfo {
        crate::types::ReplicationStateInfo {
            code: self.code
            ,
            message: self.message
            ,
        }
    }
}

