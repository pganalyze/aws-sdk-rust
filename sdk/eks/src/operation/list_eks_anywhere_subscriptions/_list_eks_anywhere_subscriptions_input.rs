// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEksAnywhereSubscriptionsInput  {
    /// <p>The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of subscription statuses to filter on.</p>
    pub include_status: ::std::option::Option<::std::vec::Vec::<crate::types::EksAnywhereSubscriptionStatus>>,
}
impl  ListEksAnywhereSubscriptionsInput  {
    /// <p>The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<& str> {
        self.next_token.as_deref()
    }
    /// <p>An array of subscription statuses to filter on.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_status.is_none()`.
    pub fn include_status(&self) -> & [crate::types::EksAnywhereSubscriptionStatus] {
        self.include_status.as_deref()
        .unwrap_or_default()
    }
}
impl ListEksAnywhereSubscriptionsInput {
    /// Creates a new builder-style object to manufacture [`ListEksAnywhereSubscriptionsInput`](crate::operation::list_eks_anywhere_subscriptions::ListEksAnywhereSubscriptionsInput).
    pub fn builder() -> crate::operation::list_eks_anywhere_subscriptions::builders::ListEksAnywhereSubscriptionsInputBuilder {
        crate::operation::list_eks_anywhere_subscriptions::builders::ListEksAnywhereSubscriptionsInputBuilder::default()
    }
}

/// A builder for [`ListEksAnywhereSubscriptionsInput`](crate::operation::list_eks_anywhere_subscriptions::ListEksAnywhereSubscriptionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListEksAnywhereSubscriptionsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) include_status: ::std::option::Option<::std::vec::Vec::<crate::types::EksAnywhereSubscriptionStatus>>,
}
impl ListEksAnywhereSubscriptionsInputBuilder {
    /// <p>The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input; self
    }
    /// <p>The maximum number of cluster results returned by ListEksAnywhereSubscriptions in paginated output. When you use this parameter, ListEksAnywhereSubscriptions returns only maxResults results in a single page along with a nextToken response element. You can see the remaining results of the initial request by sending another ListEksAnywhereSubscriptions request with the returned nextToken value. This value can be between 1 and 100. If you don't use this parameter, ListEksAnywhereSubscriptions returns up to 10 results and a nextToken value if applicable.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input; self
    }
    /// <p>The nextToken value to include in a future ListEksAnywhereSubscriptions request. When the results of a ListEksAnywhereSubscriptions request exceed maxResults, you can use this value to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `include_status`.
    ///
    /// To override the contents of this collection use [`set_include_status`](Self::set_include_status).
    ///
    /// <p>An array of subscription statuses to filter on.</p>
    pub fn include_status(mut self, input: crate::types::EksAnywhereSubscriptionStatus) -> Self {
        let mut v = self.include_status.unwrap_or_default();
                        v.push(input);
                        self.include_status = ::std::option::Option::Some(v);
                        self
    }
    /// <p>An array of subscription statuses to filter on.</p>
    pub fn set_include_status(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::EksAnywhereSubscriptionStatus>>) -> Self {
        self.include_status = input; self
    }
    /// <p>An array of subscription statuses to filter on.</p>
    pub fn get_include_status(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::EksAnywhereSubscriptionStatus>> {
        &self.include_status
    }
    /// Consumes the builder and constructs a [`ListEksAnywhereSubscriptionsInput`](crate::operation::list_eks_anywhere_subscriptions::ListEksAnywhereSubscriptionsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_eks_anywhere_subscriptions::ListEksAnywhereSubscriptionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::list_eks_anywhere_subscriptions::ListEksAnywhereSubscriptionsInput {
                max_results: self.max_results
                ,
                next_token: self.next_token
                ,
                include_status: self.include_status
                ,
            }
        )
    }
}

