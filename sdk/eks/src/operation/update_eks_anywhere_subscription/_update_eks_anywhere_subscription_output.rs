// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateEksAnywhereSubscriptionOutput  {
    /// <p>The full description of the updated subscription.</p>
    pub subscription: ::std::option::Option<crate::types::EksAnywhereSubscription>,
    _request_id: Option<String>,
}
impl  UpdateEksAnywhereSubscriptionOutput  {
    /// <p>The full description of the updated subscription.</p>
    pub fn subscription(&self) -> ::std::option::Option<& crate::types::EksAnywhereSubscription> {
        self.subscription.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateEksAnywhereSubscriptionOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl UpdateEksAnywhereSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEksAnywhereSubscriptionOutput`](crate::operation::update_eks_anywhere_subscription::UpdateEksAnywhereSubscriptionOutput).
    pub fn builder() -> crate::operation::update_eks_anywhere_subscription::builders::UpdateEksAnywhereSubscriptionOutputBuilder {
        crate::operation::update_eks_anywhere_subscription::builders::UpdateEksAnywhereSubscriptionOutputBuilder::default()
    }
}

/// A builder for [`UpdateEksAnywhereSubscriptionOutput`](crate::operation::update_eks_anywhere_subscription::UpdateEksAnywhereSubscriptionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateEksAnywhereSubscriptionOutputBuilder {
    pub(crate) subscription: ::std::option::Option<crate::types::EksAnywhereSubscription>,
    _request_id: Option<String>,
}
impl UpdateEksAnywhereSubscriptionOutputBuilder {
    /// <p>The full description of the updated subscription.</p>
    pub fn subscription(mut self, input: crate::types::EksAnywhereSubscription) -> Self {
        self.subscription = ::std::option::Option::Some(input);
        self
    }
    /// <p>The full description of the updated subscription.</p>
    pub fn set_subscription(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscription>) -> Self {
        self.subscription = input; self
    }
    /// <p>The full description of the updated subscription.</p>
    pub fn get_subscription(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscription> {
        &self.subscription
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`UpdateEksAnywhereSubscriptionOutput`](crate::operation::update_eks_anywhere_subscription::UpdateEksAnywhereSubscriptionOutput).
    pub fn build(self) -> crate::operation::update_eks_anywhere_subscription::UpdateEksAnywhereSubscriptionOutput {
        crate::operation::update_eks_anywhere_subscription::UpdateEksAnywhereSubscriptionOutput {
            subscription: self.subscription
            ,
            _request_id: self._request_id,
        }
    }
}

