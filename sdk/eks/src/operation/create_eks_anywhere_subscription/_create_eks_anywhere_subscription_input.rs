// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEksAnywhereSubscriptionInput  {
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub term: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>,
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 1000. This value cannot be changed after creating the subscription.</p>
    pub license_quantity: ::std::option::Option<i32>,
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub license_type: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>,
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub auto_renew: ::std::option::Option<bool>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
}
impl  CreateEksAnywhereSubscriptionInput  {
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub fn term(&self) -> ::std::option::Option<& crate::types::EksAnywhereSubscriptionTerm> {
        self.term.as_ref()
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 1000. This value cannot be changed after creating the subscription.</p>
    pub fn license_quantity(&self) -> ::std::option::Option<i32> {
        self.license_quantity
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn license_type(&self) -> ::std::option::Option<& crate::types::EksAnywhereSubscriptionLicenseType> {
        self.license_type.as_ref()
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn auto_renew(&self) -> ::std::option::Option<bool> {
        self.auto_renew
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<& str> {
        self.client_request_token.as_deref()
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn tags(&self) -> ::std::option::Option<& ::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateEksAnywhereSubscriptionInput {
    /// Creates a new builder-style object to manufacture [`CreateEksAnywhereSubscriptionInput`](crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionInput).
    pub fn builder() -> crate::operation::create_eks_anywhere_subscription::builders::CreateEksAnywhereSubscriptionInputBuilder {
        crate::operation::create_eks_anywhere_subscription::builders::CreateEksAnywhereSubscriptionInputBuilder::default()
    }
}

/// A builder for [`CreateEksAnywhereSubscriptionInput`](crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateEksAnywhereSubscriptionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) term: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>,
    pub(crate) license_quantity: ::std::option::Option<i32>,
    pub(crate) license_type: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>,
    pub(crate) auto_renew: ::std::option::Option<bool>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
}
impl CreateEksAnywhereSubscriptionInputBuilder {
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The unique name for your subscription. It must be unique in your Amazon Web Services account in the Amazon Web Services Region you're creating the subscription in. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphabetic character and can't be longer than 100 characters.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    /// This field is required.
    pub fn term(mut self, input: crate::types::EksAnywhereSubscriptionTerm) -> Self {
        self.term = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub fn set_term(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>) -> Self {
        self.term = input; self
    }
    /// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription. This value cannot be changed after creating the subscription.</p>
    pub fn get_term(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionTerm> {
        &self.term
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 1000. This value cannot be changed after creating the subscription.</p>
    pub fn license_quantity(mut self, input: i32) -> Self {
        self.license_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 1000. This value cannot be changed after creating the subscription.</p>
    pub fn set_license_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.license_quantity = input; self
    }
    /// <p>The number of licenses to purchase with the subscription. Valid values are between 1 and 1000. This value cannot be changed after creating the subscription.</p>
    pub fn get_license_quantity(&self) -> &::std::option::Option<i32> {
        &self.license_quantity
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn license_type(mut self, input: crate::types::EksAnywhereSubscriptionLicenseType) -> Self {
        self.license_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>) -> Self {
        self.license_type = input; self
    }
    /// <p>The license type for all licenses in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn get_license_type(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType> {
        &self.license_type
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.auto_renew = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn set_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_renew = input; self
    }
    /// <p>A boolean indicating whether the subscription auto renews at the end of the term.</p>
    pub fn get_auto_renew(&self) -> &::std::option::Option<bool> {
        &self.auto_renew
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input; self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
                        hash_map.insert(k.into(), v.into());
                        self.tags = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input; self
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateEksAnywhereSubscriptionInput`](crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionInput {
                name: self.name
                ,
                term: self.term
                ,
                license_quantity: self.license_quantity
                ,
                license_type: self.license_type
                ,
                auto_renew: self.auto_renew
                ,
                client_request_token: self.client_request_token
                ,
                tags: self.tags
                ,
            }
        )
    }
}

