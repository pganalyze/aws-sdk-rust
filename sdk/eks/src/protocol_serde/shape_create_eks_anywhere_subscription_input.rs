// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_eks_anywhere_subscription_input_input(
                     object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::operation::create_eks_anywhere_subscription::CreateEksAnywhereSubscriptionInput,
                ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auto_renew {
        object.key("autoRenew").boolean(*var_1);
    }
    if let Some(var_2) = &input.client_request_token {
        object.key("clientRequestToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.license_quantity {
        object.key("licenseQuantity").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_3).into()));
    }
    if let Some(var_4) = &input.license_type {
        object.key("licenseType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.name {
        object.key("name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        #[allow(unused_mut)]
        let mut object_7 = object.key("tags").start_object();
        for (key_8, value_9) in var_6 {
             {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.term {
        #[allow(unused_mut)]
        let mut object_11 = object.key("term").start_object();
        crate::protocol_serde::shape_eks_anywhere_subscription_term::ser_eks_anywhere_subscription_term(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

