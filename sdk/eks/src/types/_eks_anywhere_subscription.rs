// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An EKS Anywhere subscription authorizing the customer to support for licensed clusters and access to EKS Anywhere Curated Packages.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksAnywhereSubscription  {
    /// <p>UUID identifying a subscription.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the subscription.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp in seconds for when the subscription was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp in seconds for when the subscription is effective.</p>
    pub effective_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.</p>
    pub expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of licenses included in a subscription. Valid values are between 1 and 1000.</p>
    pub license_quantity: i32,
    /// <p>The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub license_type: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>,
    /// <p>An EksAnywhereSubscriptionTerm object. </p>
    pub term: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>,
    /// <p>The status of a subscription.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>A boolean indicating whether or not a subscription will auto renew when it expires.</p>
    pub auto_renew: bool,
    /// <p>License Manager License ARNs associated with the subscription.</p>
    pub license_arns: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
}
impl  EksAnywhereSubscription  {
    /// <p>UUID identifying a subscription.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the subscription.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p>The Unix timestamp in seconds for when the subscription was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Unix timestamp in seconds for when the subscription is effective.</p>
    pub fn effective_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.effective_date.as_ref()
    }
    /// <p>The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p>The number of licenses included in a subscription. Valid values are between 1 and 1000.</p>
    pub fn license_quantity(&self) -> i32 {
        self.license_quantity
    }
    /// <p>The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn license_type(&self) -> ::std::option::Option<& crate::types::EksAnywhereSubscriptionLicenseType> {
        self.license_type.as_ref()
    }
    /// <p>An EksAnywhereSubscriptionTerm object. </p>
    pub fn term(&self) -> ::std::option::Option<& crate::types::EksAnywhereSubscriptionTerm> {
        self.term.as_ref()
    }
    /// <p>The status of a subscription.</p>
    pub fn status(&self) -> ::std::option::Option<& str> {
        self.status.as_deref()
    }
    /// <p>A boolean indicating whether or not a subscription will auto renew when it expires.</p>
    pub fn auto_renew(&self) -> bool {
        self.auto_renew
    }
    /// <p>License Manager License ARNs associated with the subscription.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.license_arns.is_none()`.
    pub fn license_arns(&self) -> & [::std::string::String] {
        self.license_arns.as_deref()
        .unwrap_or_default()
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn tags(&self) -> ::std::option::Option<& ::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl EksAnywhereSubscription {
    /// Creates a new builder-style object to manufacture [`EksAnywhereSubscription`](crate::types::EksAnywhereSubscription).
    pub fn builder() -> crate::types::builders::EksAnywhereSubscriptionBuilder {
        crate::types::builders::EksAnywhereSubscriptionBuilder::default()
    }
}

/// A builder for [`EksAnywhereSubscription`](crate::types::EksAnywhereSubscription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EksAnywhereSubscriptionBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) effective_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) license_quantity: ::std::option::Option<i32>,
    pub(crate) license_type: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>,
    pub(crate) term: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) auto_renew: ::std::option::Option<bool>,
    pub(crate) license_arns: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>,
}
impl EksAnywhereSubscriptionBuilder {
    /// <p>UUID identifying a subscription.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>UUID identifying a subscription.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>UUID identifying a subscription.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) for the subscription.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the subscription.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) for the subscription.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Unix timestamp in seconds for when the subscription was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp in seconds for when the subscription was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    /// <p>The Unix timestamp in seconds for when the subscription was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Unix timestamp in seconds for when the subscription is effective.</p>
    pub fn effective_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.effective_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp in seconds for when the subscription is effective.</p>
    pub fn set_effective_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.effective_date = input; self
    }
    /// <p>The Unix timestamp in seconds for when the subscription is effective.</p>
    pub fn get_effective_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.effective_date
    }
    /// <p>The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.</p>
    pub fn expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_date = input; self
    }
    /// <p>The Unix timestamp in seconds for when the subscription will expire or auto renew, depending on the auto renew configuration of the subscription object.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_date
    }
    /// <p>The number of licenses included in a subscription. Valid values are between 1 and 1000.</p>
    pub fn license_quantity(mut self, input: i32) -> Self {
        self.license_quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of licenses included in a subscription. Valid values are between 1 and 1000.</p>
    pub fn set_license_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.license_quantity = input; self
    }
    /// <p>The number of licenses included in a subscription. Valid values are between 1 and 1000.</p>
    pub fn get_license_quantity(&self) -> &::std::option::Option<i32> {
        &self.license_quantity
    }
    /// <p>The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn license_type(mut self, input: crate::types::EksAnywhereSubscriptionLicenseType) -> Self {
        self.license_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType>) -> Self {
        self.license_type = input; self
    }
    /// <p>The type of licenses included in the subscription. Valid value is CLUSTER. With the CLUSTER license type, each license covers support for a single EKS Anywhere cluster.</p>
    pub fn get_license_type(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionLicenseType> {
        &self.license_type
    }
    /// <p>An EksAnywhereSubscriptionTerm object. </p>
    pub fn term(mut self, input: crate::types::EksAnywhereSubscriptionTerm) -> Self {
        self.term = ::std::option::Option::Some(input);
        self
    }
    /// <p>An EksAnywhereSubscriptionTerm object. </p>
    pub fn set_term(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionTerm>) -> Self {
        self.term = input; self
    }
    /// <p>An EksAnywhereSubscriptionTerm object. </p>
    pub fn get_term(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionTerm> {
        &self.term
    }
    /// <p>The status of a subscription.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of a subscription.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input; self
    }
    /// <p>The status of a subscription.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>A boolean indicating whether or not a subscription will auto renew when it expires.</p>
    pub fn auto_renew(mut self, input: bool) -> Self {
        self.auto_renew = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean indicating whether or not a subscription will auto renew when it expires.</p>
    pub fn set_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_renew = input; self
    }
    /// <p>A boolean indicating whether or not a subscription will auto renew when it expires.</p>
    pub fn get_auto_renew(&self) -> &::std::option::Option<bool> {
        &self.auto_renew
    }
    /// Appends an item to `license_arns`.
    ///
    /// To override the contents of this collection use [`set_license_arns`](Self::set_license_arns).
    ///
    /// <p>License Manager License ARNs associated with the subscription.</p>
    pub fn license_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.license_arns.unwrap_or_default();
                        v.push(input.into());
                        self.license_arns = ::std::option::Option::Some(v);
                        self
    }
    /// <p>License Manager License ARNs associated with the subscription.</p>
    pub fn set_license_arns(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.license_arns = input; self
    }
    /// <p>License Manager License ARNs associated with the subscription.</p>
    pub fn get_license_arns(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.license_arns
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
                        hash_map.insert(k.into(), v.into());
                        self.tags = ::std::option::Option::Some(hash_map);
                        self
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input; self
    }
    /// <p>The metadata for a subscription to assist with categorization and organization. Each tag consists of a key and an optional value. Subscription tags do not propagate to any other resources associated with the subscription.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`EksAnywhereSubscription`](crate::types::EksAnywhereSubscription).
    pub fn build(self) -> crate::types::EksAnywhereSubscription {
        crate::types::EksAnywhereSubscription {
            id: self.id
            ,
            arn: self.arn
            ,
            created_at: self.created_at
            ,
            effective_date: self.effective_date
            ,
            expiration_date: self.expiration_date
            ,
            license_quantity: self.license_quantity
                .unwrap_or_default()
            ,
            license_type: self.license_type
            ,
            term: self.term
            ,
            status: self.status
            ,
            auto_renew: self.auto_renew
                .unwrap_or_default()
            ,
            license_arns: self.license_arns
            ,
            tags: self.tags
            ,
        }
    }
}

