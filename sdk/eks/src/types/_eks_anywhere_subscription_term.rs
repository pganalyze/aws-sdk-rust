// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the term duration and term unit type of your subscription. This determines the term length of your subscription. Valid values are MONTHS for term unit and 12 or 36 for term duration, indicating a 12 month or 36 month subscription.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksAnywhereSubscriptionTerm  {
    /// <p>The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.</p>
    pub duration: i32,
    /// <p>The term unit of the subscription. Valid value is MONTHS.</p>
    pub unit: ::std::option::Option<crate::types::EksAnywhereSubscriptionTermUnit>,
}
impl  EksAnywhereSubscriptionTerm  {
    /// <p>The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The term unit of the subscription. Valid value is MONTHS.</p>
    pub fn unit(&self) -> ::std::option::Option<& crate::types::EksAnywhereSubscriptionTermUnit> {
        self.unit.as_ref()
    }
}
impl EksAnywhereSubscriptionTerm {
    /// Creates a new builder-style object to manufacture [`EksAnywhereSubscriptionTerm`](crate::types::EksAnywhereSubscriptionTerm).
    pub fn builder() -> crate::types::builders::EksAnywhereSubscriptionTermBuilder {
        crate::types::builders::EksAnywhereSubscriptionTermBuilder::default()
    }
}

/// A builder for [`EksAnywhereSubscriptionTerm`](crate::types::EksAnywhereSubscriptionTerm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EksAnywhereSubscriptionTermBuilder {
    pub(crate) duration: ::std::option::Option<i32>,
    pub(crate) unit: ::std::option::Option<crate::types::EksAnywhereSubscriptionTermUnit>,
}
impl EksAnywhereSubscriptionTermBuilder {
    /// <p>The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.</p>
    pub fn set_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration = input; self
    }
    /// <p>The duration of the subscription term. Valid values are 12 and 36, indicating a 12 month or 36 month subscription.</p>
    pub fn get_duration(&self) -> &::std::option::Option<i32> {
        &self.duration
    }
    /// <p>The term unit of the subscription. Valid value is MONTHS.</p>
    pub fn unit(mut self, input: crate::types::EksAnywhereSubscriptionTermUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The term unit of the subscription. Valid value is MONTHS.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::EksAnywhereSubscriptionTermUnit>) -> Self {
        self.unit = input; self
    }
    /// <p>The term unit of the subscription. Valid value is MONTHS.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::EksAnywhereSubscriptionTermUnit> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`EksAnywhereSubscriptionTerm`](crate::types::EksAnywhereSubscriptionTerm).
    pub fn build(self) -> crate::types::EksAnywhereSubscriptionTerm {
        crate::types::EksAnywhereSubscriptionTerm {
            duration: self.duration
                .unwrap_or_default()
            ,
            unit: self.unit
            ,
        }
    }
}

