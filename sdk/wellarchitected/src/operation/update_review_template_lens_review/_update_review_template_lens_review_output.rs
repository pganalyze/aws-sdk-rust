// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateReviewTemplateLensReviewOutput  {
    /// <p>The review template ARN.</p>
    pub template_arn: ::std::option::Option<::std::string::String>,
    /// <p>A lens review of a question.</p>
    pub lens_review: ::std::option::Option<crate::types::ReviewTemplateLensReview>,
    _request_id: Option<String>,
}
impl  UpdateReviewTemplateLensReviewOutput  {
    /// <p>The review template ARN.</p>
    pub fn template_arn(&self) -> ::std::option::Option<& str> {
        self.template_arn.as_deref()
    }
    /// <p>A lens review of a question.</p>
    pub fn lens_review(&self) -> ::std::option::Option<& crate::types::ReviewTemplateLensReview> {
        self.lens_review.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateReviewTemplateLensReviewOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl UpdateReviewTemplateLensReviewOutput {
    /// Creates a new builder-style object to manufacture [`UpdateReviewTemplateLensReviewOutput`](crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewOutput).
    pub fn builder() -> crate::operation::update_review_template_lens_review::builders::UpdateReviewTemplateLensReviewOutputBuilder {
        crate::operation::update_review_template_lens_review::builders::UpdateReviewTemplateLensReviewOutputBuilder::default()
    }
}

/// A builder for [`UpdateReviewTemplateLensReviewOutput`](crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateReviewTemplateLensReviewOutputBuilder {
    pub(crate) template_arn: ::std::option::Option<::std::string::String>,
    pub(crate) lens_review: ::std::option::Option<crate::types::ReviewTemplateLensReview>,
    _request_id: Option<String>,
}
impl UpdateReviewTemplateLensReviewOutputBuilder {
    /// <p>The review template ARN.</p>
    pub fn template_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The review template ARN.</p>
    pub fn set_template_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_arn = input; self
    }
    /// <p>The review template ARN.</p>
    pub fn get_template_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_arn
    }
    /// <p>A lens review of a question.</p>
    pub fn lens_review(mut self, input: crate::types::ReviewTemplateLensReview) -> Self {
        self.lens_review = ::std::option::Option::Some(input);
        self
    }
    /// <p>A lens review of a question.</p>
    pub fn set_lens_review(mut self, input: ::std::option::Option<crate::types::ReviewTemplateLensReview>) -> Self {
        self.lens_review = input; self
    }
    /// <p>A lens review of a question.</p>
    pub fn get_lens_review(&self) -> &::std::option::Option<crate::types::ReviewTemplateLensReview> {
        &self.lens_review
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`UpdateReviewTemplateLensReviewOutput`](crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewOutput).
    pub fn build(self) -> crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewOutput {
        crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewOutput {
            template_arn: self.template_arn
            ,
            lens_review: self.lens_review
            ,
            _request_id: self._request_id,
        }
    }
}

