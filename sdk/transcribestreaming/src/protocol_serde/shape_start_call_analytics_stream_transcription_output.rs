// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_call_analytics_transcript_result_stream_payload(body: &mut ::aws_smithy_types::body::SdkBody) -> std::result::Result<crate::event_receiver::EventReceiver<crate::types::CallAnalyticsTranscriptResultStream, crate::types::error::CallAnalyticsTranscriptResultStreamError>, crate::operation::start_call_analytics_stream_transcription::StartCallAnalyticsStreamTranscriptionError> {
    let unmarshaller = crate::event_stream_serde::CallAnalyticsTranscriptResultStreamUnmarshaller::new();
                let body = std::mem::replace(body, ::aws_smithy_types::body::SdkBody::taken());
                Ok(crate::event_receiver::EventReceiver::new(::aws_smithy_http::event_stream::Receiver::new(unmarshaller, body)))
}

pub(crate) fn de_content_identification_type_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<crate::types::ContentIdentificationType>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-content-identification-type");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_content_redaction_type_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<crate::types::ContentRedactionType>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-content-redaction-type");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_enable_partial_results_stabilization_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<bool>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-enable-partial-results-stabilization");
    let var_1 = ::aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_1.len() > 1 {
                                Err(::aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_1.len())))
                            } else {
                                let mut var_1 = var_1;
                                Ok(var_1.pop())
                            }
}

pub(crate) fn de_language_code_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<crate::types::CallAnalyticsLanguageCode>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-language-code");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_language_model_name_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-language-model-name");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_media_encoding_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<crate::types::MediaEncoding>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-media-encoding");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_media_sample_rate_hertz_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<i32>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-sample-rate");
    let var_2 = ::aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_2.len() > 1 {
                                Err(::aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_2.len())))
                            } else {
                                let mut var_2 = var_2;
                                Ok(var_2.pop())
                            }
}

pub(crate) fn de_partial_results_stability_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<crate::types::PartialResultsStability>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-partial-results-stability");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_pii_entity_types_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-pii-entity-types");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_request_id_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-request-id");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_session_id_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-session-id");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_vocabulary_filter_method_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<crate::types::VocabularyFilterMethod>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-vocabulary-filter-method");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_vocabulary_filter_name_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-vocabulary-filter-name");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_vocabulary_name_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-vocabulary-name");
    ::aws_smithy_http::header::one_or_none(headers)
}

