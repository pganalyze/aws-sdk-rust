// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the evidence for a vulnerability identified in a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Evidence  {
    /// <p>The evidence rule.</p>
    pub evidence_rule: ::std::option::Option<::std::string::String>,
    /// <p>The evidence details.</p>
    pub evidence_detail: ::std::option::Option<::std::string::String>,
    /// <p>The evidence severity.</p>
    pub severity: ::std::option::Option<::std::string::String>,
}
impl  Evidence  {
    /// <p>The evidence rule.</p>
    pub fn evidence_rule(&self) -> ::std::option::Option<& str> {
        self.evidence_rule.as_deref()
    }
    /// <p>The evidence details.</p>
    pub fn evidence_detail(&self) -> ::std::option::Option<& str> {
        self.evidence_detail.as_deref()
    }
    /// <p>The evidence severity.</p>
    pub fn severity(&self) -> ::std::option::Option<& str> {
        self.severity.as_deref()
    }
}
impl Evidence {
    /// Creates a new builder-style object to manufacture [`Evidence`](crate::types::Evidence).
    pub fn builder() -> crate::types::builders::EvidenceBuilder {
        crate::types::builders::EvidenceBuilder::default()
    }
}

/// A builder for [`Evidence`](crate::types::Evidence).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvidenceBuilder {
    pub(crate) evidence_rule: ::std::option::Option<::std::string::String>,
    pub(crate) evidence_detail: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<::std::string::String>,
}
impl EvidenceBuilder {
    /// <p>The evidence rule.</p>
    pub fn evidence_rule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evidence_rule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The evidence rule.</p>
    pub fn set_evidence_rule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evidence_rule = input; self
    }
    /// <p>The evidence rule.</p>
    pub fn get_evidence_rule(&self) -> &::std::option::Option<::std::string::String> {
        &self.evidence_rule
    }
    /// <p>The evidence details.</p>
    pub fn evidence_detail(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evidence_detail = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The evidence details.</p>
    pub fn set_evidence_detail(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evidence_detail = input; self
    }
    /// <p>The evidence details.</p>
    pub fn get_evidence_detail(&self) -> &::std::option::Option<::std::string::String> {
        &self.evidence_detail
    }
    /// <p>The evidence severity.</p>
    pub fn severity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.severity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The evidence severity.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.severity = input; self
    }
    /// <p>The evidence severity.</p>
    pub fn get_severity(&self) -> &::std::option::Option<::std::string::String> {
        &self.severity
    }
    /// Consumes the builder and constructs a [`Evidence`](crate::types::Evidence).
    pub fn build(self) -> crate::types::Evidence {
        crate::types::Evidence {
            evidence_rule: self.evidence_rule
            ,
            evidence_detail: self.evidence_detail
            ,
            severity: self.severity
            ,
        }
    }
}

