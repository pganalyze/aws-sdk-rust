// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>General flags for v2 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeneralFlagsV2  {
    /// <p>Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.</p>
    pub auto_enrollment: ::std::option::Option<bool>,
    /// <p>Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.</p>
    pub machine_type: ::std::option::Option<bool>,
}
impl  GeneralFlagsV2  {
    /// <p>Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.</p>
    pub fn auto_enrollment(&self) -> ::std::option::Option<bool> {
        self.auto_enrollment
    }
    /// <p>Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.</p>
    pub fn machine_type(&self) -> ::std::option::Option<bool> {
        self.machine_type
    }
}
impl GeneralFlagsV2 {
    /// Creates a new builder-style object to manufacture [`GeneralFlagsV2`](crate::types::GeneralFlagsV2).
    pub fn builder() -> crate::types::builders::GeneralFlagsV2Builder {
        crate::types::builders::GeneralFlagsV2Builder::default()
    }
}

/// A builder for [`GeneralFlagsV2`](crate::types::GeneralFlagsV2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeneralFlagsV2Builder {
    pub(crate) auto_enrollment: ::std::option::Option<bool>,
    pub(crate) machine_type: ::std::option::Option<bool>,
}
impl GeneralFlagsV2Builder {
    /// <p>Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.</p>
    pub fn auto_enrollment(mut self, input: bool) -> Self {
        self.auto_enrollment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.</p>
    pub fn set_auto_enrollment(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_enrollment = input; self
    }
    /// <p>Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.</p>
    pub fn get_auto_enrollment(&self) -> &::std::option::Option<bool> {
        &self.auto_enrollment
    }
    /// <p>Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.</p>
    pub fn machine_type(mut self, input: bool) -> Self {
        self.machine_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.</p>
    pub fn set_machine_type(mut self, input: ::std::option::Option<bool>) -> Self {
        self.machine_type = input; self
    }
    /// <p>Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.</p>
    pub fn get_machine_type(&self) -> &::std::option::Option<bool> {
        &self.machine_type
    }
    /// Consumes the builder and constructs a [`GeneralFlagsV2`](crate::types::GeneralFlagsV2).
    pub fn build(self) -> crate::types::GeneralFlagsV2 {
        crate::types::GeneralFlagsV2 {
            auto_enrollment: self.auto_enrollment
            ,
            machine_type: self.machine_type
            ,
        }
    }
}

