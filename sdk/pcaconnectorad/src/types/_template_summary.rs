// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Active Directory compatible certificate template. Connectors issue certificates against these templates based on the requestor's Active Directory group membership.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateSummary  {
    /// <p>The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html">CreateConnector</a>.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    pub definition: ::std::option::Option<crate::types::TemplateDefinition>,
    /// <p>Name of the template. The template name must be unique.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Object identifier of a template.</p>
    pub object_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.</p>
    pub policy_schema: ::std::option::Option<i32>,
    /// <p>Status of the template. Status can be creating, active, deleting, or failed.</p>
    pub status: ::std::option::Option<crate::types::TemplateStatus>,
    /// <p>The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.</p>
    pub revision: ::std::option::Option<crate::types::TemplateRevision>,
    /// <p>The date and time that the template was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the template was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  TemplateSummary  {
    /// <p>The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html">CreateConnector</a>.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<& str> {
        self.connector_arn.as_deref()
    }
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    pub fn definition(&self) -> ::std::option::Option<& crate::types::TemplateDefinition> {
        self.definition.as_ref()
    }
    /// <p>Name of the template. The template name must be unique.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>Object identifier of a template.</p>
    pub fn object_identifier(&self) -> ::std::option::Option<& str> {
        self.object_identifier.as_deref()
    }
    /// <p>The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.</p>
    pub fn policy_schema(&self) -> ::std::option::Option<i32> {
        self.policy_schema
    }
    /// <p>Status of the template. Status can be creating, active, deleting, or failed.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::TemplateStatus> {
        self.status.as_ref()
    }
    /// <p>The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.</p>
    pub fn revision(&self) -> ::std::option::Option<& crate::types::TemplateRevision> {
        self.revision.as_ref()
    }
    /// <p>The date and time that the template was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time that the template was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl TemplateSummary {
    /// Creates a new builder-style object to manufacture [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn builder() -> crate::types::builders::TemplateSummaryBuilder {
        crate::types::builders::TemplateSummaryBuilder::default()
    }
}

/// A builder for [`TemplateSummary`](crate::types::TemplateSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TemplateSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<crate::types::TemplateDefinition>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) object_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) policy_schema: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::TemplateStatus>,
    pub(crate) revision: ::std::option::Option<crate::types::TemplateRevision>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TemplateSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a>.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p> The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html">CreateConnector</a>.</p>
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html">CreateConnector</a>.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input; self
    }
    /// <p> The Amazon Resource Name (ARN) that was returned when you called <a href="https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html">CreateConnector</a>.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    pub fn definition(mut self, input: crate::types::TemplateDefinition) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::TemplateDefinition>) -> Self {
        self.definition = input; self
    }
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::TemplateDefinition> {
        &self.definition
    }
    /// <p>Name of the template. The template name must be unique.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the template. The template name must be unique.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>Name of the template. The template name must be unique.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Object identifier of a template.</p>
    pub fn object_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Object identifier of a template.</p>
    pub fn set_object_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_identifier = input; self
    }
    /// <p>Object identifier of a template.</p>
    pub fn get_object_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_identifier
    }
    /// <p>The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.</p>
    pub fn policy_schema(mut self, input: i32) -> Self {
        self.policy_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.</p>
    pub fn set_policy_schema(mut self, input: ::std::option::Option<i32>) -> Self {
        self.policy_schema = input; self
    }
    /// <p>The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.</p>
    pub fn get_policy_schema(&self) -> &::std::option::Option<i32> {
        &self.policy_schema
    }
    /// <p>Status of the template. Status can be creating, active, deleting, or failed.</p>
    pub fn status(mut self, input: crate::types::TemplateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the template. Status can be creating, active, deleting, or failed.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TemplateStatus>) -> Self {
        self.status = input; self
    }
    /// <p>Status of the template. Status can be creating, active, deleting, or failed.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TemplateStatus> {
        &self.status
    }
    /// <p>The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.</p>
    pub fn revision(mut self, input: crate::types::TemplateRevision) -> Self {
        self.revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<crate::types::TemplateRevision>) -> Self {
        self.revision = input; self
    }
    /// <p>The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.</p>
    pub fn get_revision(&self) -> &::std::option::Option<crate::types::TemplateRevision> {
        &self.revision
    }
    /// <p>The date and time that the template was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the template was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    /// <p>The date and time that the template was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time that the template was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the template was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input; self
    }
    /// <p>The date and time that the template was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn build(self) -> crate::types::TemplateSummary {
        crate::types::TemplateSummary {
            arn: self.arn
            ,
            connector_arn: self.connector_arn
            ,
            definition: self.definition
            ,
            name: self.name
            ,
            object_identifier: self.object_identifier
            ,
            policy_schema: self.policy_schema
            ,
            status: self.status
            ,
            revision: self.revision
            ,
            created_at: self.created_at
            ,
            updated_at: self.updated_at
            ,
        }
    }
}

