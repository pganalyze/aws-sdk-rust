// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Template configurations for v2 template schema.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnrollmentFlagsV2  {
    /// <p>Include symmetric algorithms allowed by the subject.</p>
    pub include_symmetric_algorithms: ::std::option::Option<bool>,
    /// <p>Require user interaction when the subject is enrolled and the private key associated with the certificate is used.</p>
    pub user_interaction_required: ::std::option::Option<bool>,
    /// <p>Delete expired or revoked certificates instead of archiving them.</p>
    pub remove_invalid_certificate_from_personal_store: ::std::option::Option<bool>,
    /// <p>This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.</p>
    pub no_security_extension: ::std::option::Option<bool>,
    /// <p>Allow renewal using the same key.</p>
    pub enable_key_reuse_on_nt_token_keyset_storage_full: ::std::option::Option<bool>,
}
impl  EnrollmentFlagsV2  {
    /// <p>Include symmetric algorithms allowed by the subject.</p>
    pub fn include_symmetric_algorithms(&self) -> ::std::option::Option<bool> {
        self.include_symmetric_algorithms
    }
    /// <p>Require user interaction when the subject is enrolled and the private key associated with the certificate is used.</p>
    pub fn user_interaction_required(&self) -> ::std::option::Option<bool> {
        self.user_interaction_required
    }
    /// <p>Delete expired or revoked certificates instead of archiving them.</p>
    pub fn remove_invalid_certificate_from_personal_store(&self) -> ::std::option::Option<bool> {
        self.remove_invalid_certificate_from_personal_store
    }
    /// <p>This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.</p>
    pub fn no_security_extension(&self) -> ::std::option::Option<bool> {
        self.no_security_extension
    }
    /// <p>Allow renewal using the same key.</p>
    pub fn enable_key_reuse_on_nt_token_keyset_storage_full(&self) -> ::std::option::Option<bool> {
        self.enable_key_reuse_on_nt_token_keyset_storage_full
    }
}
impl EnrollmentFlagsV2 {
    /// Creates a new builder-style object to manufacture [`EnrollmentFlagsV2`](crate::types::EnrollmentFlagsV2).
    pub fn builder() -> crate::types::builders::EnrollmentFlagsV2Builder {
        crate::types::builders::EnrollmentFlagsV2Builder::default()
    }
}

/// A builder for [`EnrollmentFlagsV2`](crate::types::EnrollmentFlagsV2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnrollmentFlagsV2Builder {
    pub(crate) include_symmetric_algorithms: ::std::option::Option<bool>,
    pub(crate) user_interaction_required: ::std::option::Option<bool>,
    pub(crate) remove_invalid_certificate_from_personal_store: ::std::option::Option<bool>,
    pub(crate) no_security_extension: ::std::option::Option<bool>,
    pub(crate) enable_key_reuse_on_nt_token_keyset_storage_full: ::std::option::Option<bool>,
}
impl EnrollmentFlagsV2Builder {
    /// <p>Include symmetric algorithms allowed by the subject.</p>
    pub fn include_symmetric_algorithms(mut self, input: bool) -> Self {
        self.include_symmetric_algorithms = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include symmetric algorithms allowed by the subject.</p>
    pub fn set_include_symmetric_algorithms(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_symmetric_algorithms = input; self
    }
    /// <p>Include symmetric algorithms allowed by the subject.</p>
    pub fn get_include_symmetric_algorithms(&self) -> &::std::option::Option<bool> {
        &self.include_symmetric_algorithms
    }
    /// <p>Require user interaction when the subject is enrolled and the private key associated with the certificate is used.</p>
    pub fn user_interaction_required(mut self, input: bool) -> Self {
        self.user_interaction_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Require user interaction when the subject is enrolled and the private key associated with the certificate is used.</p>
    pub fn set_user_interaction_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_interaction_required = input; self
    }
    /// <p>Require user interaction when the subject is enrolled and the private key associated with the certificate is used.</p>
    pub fn get_user_interaction_required(&self) -> &::std::option::Option<bool> {
        &self.user_interaction_required
    }
    /// <p>Delete expired or revoked certificates instead of archiving them.</p>
    pub fn remove_invalid_certificate_from_personal_store(mut self, input: bool) -> Self {
        self.remove_invalid_certificate_from_personal_store = ::std::option::Option::Some(input);
        self
    }
    /// <p>Delete expired or revoked certificates instead of archiving them.</p>
    pub fn set_remove_invalid_certificate_from_personal_store(mut self, input: ::std::option::Option<bool>) -> Self {
        self.remove_invalid_certificate_from_personal_store = input; self
    }
    /// <p>Delete expired or revoked certificates instead of archiving them.</p>
    pub fn get_remove_invalid_certificate_from_personal_store(&self) -> &::std::option::Option<bool> {
        &self.remove_invalid_certificate_from_personal_store
    }
    /// <p>This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.</p>
    pub fn no_security_extension(mut self, input: bool) -> Self {
        self.no_security_extension = ::std::option::Option::Some(input);
        self
    }
    /// <p>This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.</p>
    pub fn set_no_security_extension(mut self, input: ::std::option::Option<bool>) -> Self {
        self.no_security_extension = input; self
    }
    /// <p>This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.</p>
    pub fn get_no_security_extension(&self) -> &::std::option::Option<bool> {
        &self.no_security_extension
    }
    /// <p>Allow renewal using the same key.</p>
    pub fn enable_key_reuse_on_nt_token_keyset_storage_full(mut self, input: bool) -> Self {
        self.enable_key_reuse_on_nt_token_keyset_storage_full = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allow renewal using the same key.</p>
    pub fn set_enable_key_reuse_on_nt_token_keyset_storage_full(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_key_reuse_on_nt_token_keyset_storage_full = input; self
    }
    /// <p>Allow renewal using the same key.</p>
    pub fn get_enable_key_reuse_on_nt_token_keyset_storage_full(&self) -> &::std::option::Option<bool> {
        &self.enable_key_reuse_on_nt_token_keyset_storage_full
    }
    /// Consumes the builder and constructs a [`EnrollmentFlagsV2`](crate::types::EnrollmentFlagsV2).
    pub fn build(self) -> crate::types::EnrollmentFlagsV2 {
        crate::types::EnrollmentFlagsV2 {
            include_symmetric_algorithms: self.include_symmetric_algorithms
            ,
            user_interaction_required: self.user_interaction_required
            ,
            remove_invalid_certificate_from_personal_store: self.remove_invalid_certificate_from_personal_store
            ,
            no_security_extension: self.no_security_extension
            ,
            enable_key_reuse_on_nt_token_keyset_storage_full: self.enable_key_reuse_on_nt_token_keyset_storage_full
            ,
        }
    }
}

