// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyUsageFlags  {
    /// <p>The digitalSignature is asserted when the subject public key is used for verifying digital signatures.</p>
    pub digital_signature: ::std::option::Option<bool>,
    /// <p>NonRepudiation is asserted when the subject public key is used to verify digital signatures.</p>
    pub non_repudiation: ::std::option::Option<bool>,
    /// <p>KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.</p>
    pub key_encipherment: ::std::option::Option<bool>,
    /// <p>DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.</p>
    pub data_encipherment: ::std::option::Option<bool>,
    /// <p>KeyAgreement is asserted when the subject public key is used for key agreement.</p>
    pub key_agreement: ::std::option::Option<bool>,
}
impl  KeyUsageFlags  {
    /// <p>The digitalSignature is asserted when the subject public key is used for verifying digital signatures.</p>
    pub fn digital_signature(&self) -> ::std::option::Option<bool> {
        self.digital_signature
    }
    /// <p>NonRepudiation is asserted when the subject public key is used to verify digital signatures.</p>
    pub fn non_repudiation(&self) -> ::std::option::Option<bool> {
        self.non_repudiation
    }
    /// <p>KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.</p>
    pub fn key_encipherment(&self) -> ::std::option::Option<bool> {
        self.key_encipherment
    }
    /// <p>DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.</p>
    pub fn data_encipherment(&self) -> ::std::option::Option<bool> {
        self.data_encipherment
    }
    /// <p>KeyAgreement is asserted when the subject public key is used for key agreement.</p>
    pub fn key_agreement(&self) -> ::std::option::Option<bool> {
        self.key_agreement
    }
}
impl KeyUsageFlags {
    /// Creates a new builder-style object to manufacture [`KeyUsageFlags`](crate::types::KeyUsageFlags).
    pub fn builder() -> crate::types::builders::KeyUsageFlagsBuilder {
        crate::types::builders::KeyUsageFlagsBuilder::default()
    }
}

/// A builder for [`KeyUsageFlags`](crate::types::KeyUsageFlags).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyUsageFlagsBuilder {
    pub(crate) digital_signature: ::std::option::Option<bool>,
    pub(crate) non_repudiation: ::std::option::Option<bool>,
    pub(crate) key_encipherment: ::std::option::Option<bool>,
    pub(crate) data_encipherment: ::std::option::Option<bool>,
    pub(crate) key_agreement: ::std::option::Option<bool>,
}
impl KeyUsageFlagsBuilder {
    /// <p>The digitalSignature is asserted when the subject public key is used for verifying digital signatures.</p>
    pub fn digital_signature(mut self, input: bool) -> Self {
        self.digital_signature = ::std::option::Option::Some(input);
        self
    }
    /// <p>The digitalSignature is asserted when the subject public key is used for verifying digital signatures.</p>
    pub fn set_digital_signature(mut self, input: ::std::option::Option<bool>) -> Self {
        self.digital_signature = input; self
    }
    /// <p>The digitalSignature is asserted when the subject public key is used for verifying digital signatures.</p>
    pub fn get_digital_signature(&self) -> &::std::option::Option<bool> {
        &self.digital_signature
    }
    /// <p>NonRepudiation is asserted when the subject public key is used to verify digital signatures.</p>
    pub fn non_repudiation(mut self, input: bool) -> Self {
        self.non_repudiation = ::std::option::Option::Some(input);
        self
    }
    /// <p>NonRepudiation is asserted when the subject public key is used to verify digital signatures.</p>
    pub fn set_non_repudiation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.non_repudiation = input; self
    }
    /// <p>NonRepudiation is asserted when the subject public key is used to verify digital signatures.</p>
    pub fn get_non_repudiation(&self) -> &::std::option::Option<bool> {
        &self.non_repudiation
    }
    /// <p>KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.</p>
    pub fn key_encipherment(mut self, input: bool) -> Self {
        self.key_encipherment = ::std::option::Option::Some(input);
        self
    }
    /// <p>KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.</p>
    pub fn set_key_encipherment(mut self, input: ::std::option::Option<bool>) -> Self {
        self.key_encipherment = input; self
    }
    /// <p>KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.</p>
    pub fn get_key_encipherment(&self) -> &::std::option::Option<bool> {
        &self.key_encipherment
    }
    /// <p>DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.</p>
    pub fn data_encipherment(mut self, input: bool) -> Self {
        self.data_encipherment = ::std::option::Option::Some(input);
        self
    }
    /// <p>DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.</p>
    pub fn set_data_encipherment(mut self, input: ::std::option::Option<bool>) -> Self {
        self.data_encipherment = input; self
    }
    /// <p>DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.</p>
    pub fn get_data_encipherment(&self) -> &::std::option::Option<bool> {
        &self.data_encipherment
    }
    /// <p>KeyAgreement is asserted when the subject public key is used for key agreement.</p>
    pub fn key_agreement(mut self, input: bool) -> Self {
        self.key_agreement = ::std::option::Option::Some(input);
        self
    }
    /// <p>KeyAgreement is asserted when the subject public key is used for key agreement.</p>
    pub fn set_key_agreement(mut self, input: ::std::option::Option<bool>) -> Self {
        self.key_agreement = input; self
    }
    /// <p>KeyAgreement is asserted when the subject public key is used for key agreement.</p>
    pub fn get_key_agreement(&self) -> &::std::option::Option<bool> {
        &self.key_agreement
    }
    /// Consumes the builder and constructs a [`KeyUsageFlags`](crate::types::KeyUsageFlags).
    pub fn build(self) -> crate::types::KeyUsageFlags {
        crate::types::KeyUsageFlags {
            digital_signature: self.digital_signature
            ,
            non_repudiation: self.non_repudiation
            ,
            key_encipherment: self.key_encipherment
            ,
            data_encipherment: self.data_encipherment
            ,
            key_agreement: self.key_agreement
            ,
        }
    }
}

