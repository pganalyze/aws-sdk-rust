// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubjectNameFlagsV4  {
    /// <p>Include the domain DNS in the subject alternate name.</p>
    pub san_require_domain_dns: ::std::option::Option<bool>,
    /// <p>Include the service principal name (SPN) in the subject alternate name.</p>
    pub san_require_spn: ::std::option::Option<bool>,
    /// <p>Include the globally unique identifier (GUID) in the subject alternate name.</p>
    pub san_require_directory_guid: ::std::option::Option<bool>,
    /// <p>Include the user principal name (UPN) in the subject alternate name.</p>
    pub san_require_upn: ::std::option::Option<bool>,
    /// <p>Include the subject's email in the subject alternate name.</p>
    pub san_require_email: ::std::option::Option<bool>,
    /// <p>Include the DNS in the subject alternate name.</p>
    pub san_require_dns: ::std::option::Option<bool>,
    /// <p>Include the DNS as common name in the subject name.</p>
    pub require_dns_as_cn: ::std::option::Option<bool>,
    /// <p>Include the subject's email in the subject name.</p>
    pub require_email: ::std::option::Option<bool>,
    /// <p>Include the common name in the subject name.</p>
    pub require_common_name: ::std::option::Option<bool>,
    /// <p>Include the directory path in the subject name.</p>
    pub require_directory_path: ::std::option::Option<bool>,
}
impl  SubjectNameFlagsV4  {
    /// <p>Include the domain DNS in the subject alternate name.</p>
    pub fn san_require_domain_dns(&self) -> ::std::option::Option<bool> {
        self.san_require_domain_dns
    }
    /// <p>Include the service principal name (SPN) in the subject alternate name.</p>
    pub fn san_require_spn(&self) -> ::std::option::Option<bool> {
        self.san_require_spn
    }
    /// <p>Include the globally unique identifier (GUID) in the subject alternate name.</p>
    pub fn san_require_directory_guid(&self) -> ::std::option::Option<bool> {
        self.san_require_directory_guid
    }
    /// <p>Include the user principal name (UPN) in the subject alternate name.</p>
    pub fn san_require_upn(&self) -> ::std::option::Option<bool> {
        self.san_require_upn
    }
    /// <p>Include the subject's email in the subject alternate name.</p>
    pub fn san_require_email(&self) -> ::std::option::Option<bool> {
        self.san_require_email
    }
    /// <p>Include the DNS in the subject alternate name.</p>
    pub fn san_require_dns(&self) -> ::std::option::Option<bool> {
        self.san_require_dns
    }
    /// <p>Include the DNS as common name in the subject name.</p>
    pub fn require_dns_as_cn(&self) -> ::std::option::Option<bool> {
        self.require_dns_as_cn
    }
    /// <p>Include the subject's email in the subject name.</p>
    pub fn require_email(&self) -> ::std::option::Option<bool> {
        self.require_email
    }
    /// <p>Include the common name in the subject name.</p>
    pub fn require_common_name(&self) -> ::std::option::Option<bool> {
        self.require_common_name
    }
    /// <p>Include the directory path in the subject name.</p>
    pub fn require_directory_path(&self) -> ::std::option::Option<bool> {
        self.require_directory_path
    }
}
impl SubjectNameFlagsV4 {
    /// Creates a new builder-style object to manufacture [`SubjectNameFlagsV4`](crate::types::SubjectNameFlagsV4).
    pub fn builder() -> crate::types::builders::SubjectNameFlagsV4Builder {
        crate::types::builders::SubjectNameFlagsV4Builder::default()
    }
}

/// A builder for [`SubjectNameFlagsV4`](crate::types::SubjectNameFlagsV4).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubjectNameFlagsV4Builder {
    pub(crate) san_require_domain_dns: ::std::option::Option<bool>,
    pub(crate) san_require_spn: ::std::option::Option<bool>,
    pub(crate) san_require_directory_guid: ::std::option::Option<bool>,
    pub(crate) san_require_upn: ::std::option::Option<bool>,
    pub(crate) san_require_email: ::std::option::Option<bool>,
    pub(crate) san_require_dns: ::std::option::Option<bool>,
    pub(crate) require_dns_as_cn: ::std::option::Option<bool>,
    pub(crate) require_email: ::std::option::Option<bool>,
    pub(crate) require_common_name: ::std::option::Option<bool>,
    pub(crate) require_directory_path: ::std::option::Option<bool>,
}
impl SubjectNameFlagsV4Builder {
    /// <p>Include the domain DNS in the subject alternate name.</p>
    pub fn san_require_domain_dns(mut self, input: bool) -> Self {
        self.san_require_domain_dns = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the domain DNS in the subject alternate name.</p>
    pub fn set_san_require_domain_dns(mut self, input: ::std::option::Option<bool>) -> Self {
        self.san_require_domain_dns = input; self
    }
    /// <p>Include the domain DNS in the subject alternate name.</p>
    pub fn get_san_require_domain_dns(&self) -> &::std::option::Option<bool> {
        &self.san_require_domain_dns
    }
    /// <p>Include the service principal name (SPN) in the subject alternate name.</p>
    pub fn san_require_spn(mut self, input: bool) -> Self {
        self.san_require_spn = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the service principal name (SPN) in the subject alternate name.</p>
    pub fn set_san_require_spn(mut self, input: ::std::option::Option<bool>) -> Self {
        self.san_require_spn = input; self
    }
    /// <p>Include the service principal name (SPN) in the subject alternate name.</p>
    pub fn get_san_require_spn(&self) -> &::std::option::Option<bool> {
        &self.san_require_spn
    }
    /// <p>Include the globally unique identifier (GUID) in the subject alternate name.</p>
    pub fn san_require_directory_guid(mut self, input: bool) -> Self {
        self.san_require_directory_guid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the globally unique identifier (GUID) in the subject alternate name.</p>
    pub fn set_san_require_directory_guid(mut self, input: ::std::option::Option<bool>) -> Self {
        self.san_require_directory_guid = input; self
    }
    /// <p>Include the globally unique identifier (GUID) in the subject alternate name.</p>
    pub fn get_san_require_directory_guid(&self) -> &::std::option::Option<bool> {
        &self.san_require_directory_guid
    }
    /// <p>Include the user principal name (UPN) in the subject alternate name.</p>
    pub fn san_require_upn(mut self, input: bool) -> Self {
        self.san_require_upn = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the user principal name (UPN) in the subject alternate name.</p>
    pub fn set_san_require_upn(mut self, input: ::std::option::Option<bool>) -> Self {
        self.san_require_upn = input; self
    }
    /// <p>Include the user principal name (UPN) in the subject alternate name.</p>
    pub fn get_san_require_upn(&self) -> &::std::option::Option<bool> {
        &self.san_require_upn
    }
    /// <p>Include the subject's email in the subject alternate name.</p>
    pub fn san_require_email(mut self, input: bool) -> Self {
        self.san_require_email = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the subject's email in the subject alternate name.</p>
    pub fn set_san_require_email(mut self, input: ::std::option::Option<bool>) -> Self {
        self.san_require_email = input; self
    }
    /// <p>Include the subject's email in the subject alternate name.</p>
    pub fn get_san_require_email(&self) -> &::std::option::Option<bool> {
        &self.san_require_email
    }
    /// <p>Include the DNS in the subject alternate name.</p>
    pub fn san_require_dns(mut self, input: bool) -> Self {
        self.san_require_dns = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the DNS in the subject alternate name.</p>
    pub fn set_san_require_dns(mut self, input: ::std::option::Option<bool>) -> Self {
        self.san_require_dns = input; self
    }
    /// <p>Include the DNS in the subject alternate name.</p>
    pub fn get_san_require_dns(&self) -> &::std::option::Option<bool> {
        &self.san_require_dns
    }
    /// <p>Include the DNS as common name in the subject name.</p>
    pub fn require_dns_as_cn(mut self, input: bool) -> Self {
        self.require_dns_as_cn = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the DNS as common name in the subject name.</p>
    pub fn set_require_dns_as_cn(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_dns_as_cn = input; self
    }
    /// <p>Include the DNS as common name in the subject name.</p>
    pub fn get_require_dns_as_cn(&self) -> &::std::option::Option<bool> {
        &self.require_dns_as_cn
    }
    /// <p>Include the subject's email in the subject name.</p>
    pub fn require_email(mut self, input: bool) -> Self {
        self.require_email = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the subject's email in the subject name.</p>
    pub fn set_require_email(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_email = input; self
    }
    /// <p>Include the subject's email in the subject name.</p>
    pub fn get_require_email(&self) -> &::std::option::Option<bool> {
        &self.require_email
    }
    /// <p>Include the common name in the subject name.</p>
    pub fn require_common_name(mut self, input: bool) -> Self {
        self.require_common_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the common name in the subject name.</p>
    pub fn set_require_common_name(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_common_name = input; self
    }
    /// <p>Include the common name in the subject name.</p>
    pub fn get_require_common_name(&self) -> &::std::option::Option<bool> {
        &self.require_common_name
    }
    /// <p>Include the directory path in the subject name.</p>
    pub fn require_directory_path(mut self, input: bool) -> Self {
        self.require_directory_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>Include the directory path in the subject name.</p>
    pub fn set_require_directory_path(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_directory_path = input; self
    }
    /// <p>Include the directory path in the subject name.</p>
    pub fn get_require_directory_path(&self) -> &::std::option::Option<bool> {
        &self.require_directory_path
    }
    /// Consumes the builder and constructs a [`SubjectNameFlagsV4`](crate::types::SubjectNameFlagsV4).
    pub fn build(self) -> crate::types::SubjectNameFlagsV4 {
        crate::types::SubjectNameFlagsV4 {
            san_require_domain_dns: self.san_require_domain_dns
            ,
            san_require_spn: self.san_require_spn
            ,
            san_require_directory_guid: self.san_require_directory_guid
            ,
            san_require_upn: self.san_require_upn
            ,
            san_require_email: self.san_require_email
            ,
            san_require_dns: self.san_require_dns
            ,
            require_dns_as_cn: self.require_dns_as_cn
            ,
            require_email: self.require_email
            ,
            require_common_name: self.require_common_name
            ,
            require_directory_path: self.require_directory_path
            ,
        }
    }
}

