// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum KeyUsageProperty {
    /// <p>You can specify key usage for encryption, key agreement, and signature. You can use property flags or property type but not both. </p>
    PropertyFlags(crate::types::KeyUsagePropertyFlags),
    /// <p>You can specify all key usages using property type ALL. You can use property type or property flags but not both. </p>
    PropertyType(crate::types::KeyUsagePropertyType),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl KeyUsageProperty {
    /// Tries to convert the enum instance into [`PropertyFlags`](crate::types::KeyUsageProperty::PropertyFlags), extracting the inner [`KeyUsagePropertyFlags`](crate::types::KeyUsagePropertyFlags).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_property_flags(&self) -> ::std::result::Result<&crate::types::KeyUsagePropertyFlags, &Self> {
        if let KeyUsageProperty::PropertyFlags(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`PropertyFlags`](crate::types::KeyUsageProperty::PropertyFlags).
    pub fn is_property_flags(&self) -> bool {
        self.as_property_flags().is_ok()
    }
    /// Tries to convert the enum instance into [`PropertyType`](crate::types::KeyUsageProperty::PropertyType), extracting the inner [`KeyUsagePropertyType`](crate::types::KeyUsagePropertyType).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_property_type(&self) -> ::std::result::Result<&crate::types::KeyUsagePropertyType, &Self> {
        if let KeyUsageProperty::PropertyType(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`PropertyType`](crate::types::KeyUsageProperty::PropertyType).
    pub fn is_property_type(&self) -> bool {
        self.as_property_type().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

