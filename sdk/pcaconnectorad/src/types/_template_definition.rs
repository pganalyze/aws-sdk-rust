// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum TemplateDefinition {
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    TemplateV2(crate::types::TemplateV2),
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    TemplateV3(crate::types::TemplateV3),
    /// <p>Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.</p>
    TemplateV4(crate::types::TemplateV4),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TemplateDefinition {
    /// Tries to convert the enum instance into [`TemplateV2`](crate::types::TemplateDefinition::TemplateV2), extracting the inner [`TemplateV2`](crate::types::TemplateV2).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_template_v2(&self) -> ::std::result::Result<&crate::types::TemplateV2, &Self> {
        if let TemplateDefinition::TemplateV2(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`TemplateV2`](crate::types::TemplateDefinition::TemplateV2).
    pub fn is_template_v2(&self) -> bool {
        self.as_template_v2().is_ok()
    }
    /// Tries to convert the enum instance into [`TemplateV3`](crate::types::TemplateDefinition::TemplateV3), extracting the inner [`TemplateV3`](crate::types::TemplateV3).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_template_v3(&self) -> ::std::result::Result<&crate::types::TemplateV3, &Self> {
        if let TemplateDefinition::TemplateV3(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`TemplateV3`](crate::types::TemplateDefinition::TemplateV3).
    pub fn is_template_v3(&self) -> bool {
        self.as_template_v3().is_ok()
    }
    /// Tries to convert the enum instance into [`TemplateV4`](crate::types::TemplateDefinition::TemplateV4), extracting the inner [`TemplateV4`](crate::types::TemplateV4).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_template_v4(&self) -> ::std::result::Result<&crate::types::TemplateV4, &Self> {
        if let TemplateDefinition::TemplateV4(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`TemplateV4`](crate::types::TemplateDefinition::TemplateV4).
    pub fn is_template_v4(&self) -> bool {
        self.as_template_v4().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

