// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies key usage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyUsagePropertyFlags  {
    /// <p>Allows key for encryption and decryption.</p>
    pub decrypt: ::std::option::Option<bool>,
    /// <p>Allows key exchange without encryption.</p>
    pub key_agreement: ::std::option::Option<bool>,
    /// <p>Allow key use for digital signature.</p>
    pub sign: ::std::option::Option<bool>,
}
impl  KeyUsagePropertyFlags  {
    /// <p>Allows key for encryption and decryption.</p>
    pub fn decrypt(&self) -> ::std::option::Option<bool> {
        self.decrypt
    }
    /// <p>Allows key exchange without encryption.</p>
    pub fn key_agreement(&self) -> ::std::option::Option<bool> {
        self.key_agreement
    }
    /// <p>Allow key use for digital signature.</p>
    pub fn sign(&self) -> ::std::option::Option<bool> {
        self.sign
    }
}
impl KeyUsagePropertyFlags {
    /// Creates a new builder-style object to manufacture [`KeyUsagePropertyFlags`](crate::types::KeyUsagePropertyFlags).
    pub fn builder() -> crate::types::builders::KeyUsagePropertyFlagsBuilder {
        crate::types::builders::KeyUsagePropertyFlagsBuilder::default()
    }
}

/// A builder for [`KeyUsagePropertyFlags`](crate::types::KeyUsagePropertyFlags).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyUsagePropertyFlagsBuilder {
    pub(crate) decrypt: ::std::option::Option<bool>,
    pub(crate) key_agreement: ::std::option::Option<bool>,
    pub(crate) sign: ::std::option::Option<bool>,
}
impl KeyUsagePropertyFlagsBuilder {
    /// <p>Allows key for encryption and decryption.</p>
    pub fn decrypt(mut self, input: bool) -> Self {
        self.decrypt = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows key for encryption and decryption.</p>
    pub fn set_decrypt(mut self, input: ::std::option::Option<bool>) -> Self {
        self.decrypt = input; self
    }
    /// <p>Allows key for encryption and decryption.</p>
    pub fn get_decrypt(&self) -> &::std::option::Option<bool> {
        &self.decrypt
    }
    /// <p>Allows key exchange without encryption.</p>
    pub fn key_agreement(mut self, input: bool) -> Self {
        self.key_agreement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows key exchange without encryption.</p>
    pub fn set_key_agreement(mut self, input: ::std::option::Option<bool>) -> Self {
        self.key_agreement = input; self
    }
    /// <p>Allows key exchange without encryption.</p>
    pub fn get_key_agreement(&self) -> &::std::option::Option<bool> {
        &self.key_agreement
    }
    /// <p>Allow key use for digital signature.</p>
    pub fn sign(mut self, input: bool) -> Self {
        self.sign = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allow key use for digital signature.</p>
    pub fn set_sign(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sign = input; self
    }
    /// <p>Allow key use for digital signature.</p>
    pub fn get_sign(&self) -> &::std::option::Option<bool> {
        &self.sign
    }
    /// Consumes the builder and constructs a [`KeyUsagePropertyFlags`](crate::types::KeyUsagePropertyFlags).
    pub fn build(self) -> crate::types::KeyUsagePropertyFlags {
        crate::types::KeyUsagePropertyFlags {
            decrypt: self.decrypt
            ,
            key_agreement: self.key_agreement
            ,
            sign: self.sign
            ,
        }
    }
}

