// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDirectoryRegistrationOutput  {
    /// <p>The directory registration represents the authorization of the connector service with a directory.</p>
    pub directory_registration: ::std::option::Option<crate::types::DirectoryRegistration>,
    _request_id: Option<String>,
}
impl  GetDirectoryRegistrationOutput  {
    /// <p>The directory registration represents the authorization of the connector service with a directory.</p>
    pub fn directory_registration(&self) -> ::std::option::Option<& crate::types::DirectoryRegistration> {
        self.directory_registration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetDirectoryRegistrationOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl GetDirectoryRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`GetDirectoryRegistrationOutput`](crate::operation::get_directory_registration::GetDirectoryRegistrationOutput).
    pub fn builder() -> crate::operation::get_directory_registration::builders::GetDirectoryRegistrationOutputBuilder {
        crate::operation::get_directory_registration::builders::GetDirectoryRegistrationOutputBuilder::default()
    }
}

/// A builder for [`GetDirectoryRegistrationOutput`](crate::operation::get_directory_registration::GetDirectoryRegistrationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDirectoryRegistrationOutputBuilder {
    pub(crate) directory_registration: ::std::option::Option<crate::types::DirectoryRegistration>,
    _request_id: Option<String>,
}
impl GetDirectoryRegistrationOutputBuilder {
    /// <p>The directory registration represents the authorization of the connector service with a directory.</p>
    pub fn directory_registration(mut self, input: crate::types::DirectoryRegistration) -> Self {
        self.directory_registration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The directory registration represents the authorization of the connector service with a directory.</p>
    pub fn set_directory_registration(mut self, input: ::std::option::Option<crate::types::DirectoryRegistration>) -> Self {
        self.directory_registration = input; self
    }
    /// <p>The directory registration represents the authorization of the connector service with a directory.</p>
    pub fn get_directory_registration(&self) -> &::std::option::Option<crate::types::DirectoryRegistration> {
        &self.directory_registration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`GetDirectoryRegistrationOutput`](crate::operation::get_directory_registration::GetDirectoryRegistrationOutput).
    pub fn build(self) -> crate::operation::get_directory_registration::GetDirectoryRegistrationOutput {
        crate::operation::get_directory_registration::GetDirectoryRegistrationOutput {
            directory_registration: self.directory_registration
            ,
            _request_id: self._request_id,
        }
    }
}

