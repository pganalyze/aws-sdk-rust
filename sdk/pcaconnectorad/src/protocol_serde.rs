// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(result: ::std::result::Result<O, E>) -> ::std::result::Result<::aws_smithy_runtime_api::client::interceptors::context::Output, ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>>
            where
                O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
                E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
            {
                result.map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
                    .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
                    .map_err(::std::convert::Into::into)
            }

pub fn parse_http_error_metadata(_response_status: u16, response_headers: &::aws_smithy_runtime_api::http::Headers, response_body: &[u8]) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
                    crate::json_errors::parse_error_metadata(response_body, response_headers)
                }

pub(crate) mod shape_create_connector;

pub(crate) mod shape_create_directory_registration;

pub(crate) mod shape_create_service_principal_name;

pub(crate) mod shape_create_template;

pub(crate) mod shape_create_template_group_access_control_entry;

pub(crate) mod shape_delete_connector;

pub(crate) mod shape_delete_directory_registration;

pub(crate) mod shape_delete_service_principal_name;

pub(crate) mod shape_delete_template;

pub(crate) mod shape_delete_template_group_access_control_entry;

pub(crate) mod shape_get_connector;

pub(crate) mod shape_get_directory_registration;

pub(crate) mod shape_get_service_principal_name;

pub(crate) mod shape_get_template;

pub(crate) mod shape_get_template_group_access_control_entry;

pub(crate) mod shape_list_connectors;

pub(crate) mod shape_list_directory_registrations;

pub(crate) mod shape_list_service_principal_names;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_template_group_access_control_entries;

pub(crate) mod shape_list_templates;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_template;

pub(crate) mod shape_update_template_group_access_control_entry;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
                if data.is_empty() {
                    b"{}"
                } else {
                    data
                }
            }

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_connector_input;

pub(crate) mod shape_create_directory_registration_input;

pub(crate) mod shape_create_service_principal_name_input;

pub(crate) mod shape_create_template_group_access_control_entry_input;

pub(crate) mod shape_create_template_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_template_group_access_control_entry_input;

pub(crate) mod shape_update_template_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_access_control_entry;

pub(crate) mod shape_access_control_entry_list;

pub(crate) mod shape_access_rights;

pub(crate) mod shape_connector;

pub(crate) mod shape_connector_list;

pub(crate) mod shape_directory_registration;

pub(crate) mod shape_directory_registration_list;

pub(crate) mod shape_service_principal_name;

pub(crate) mod shape_service_principal_name_list;

pub(crate) mod shape_tags;

pub(crate) mod shape_template;

pub(crate) mod shape_template_definition;

pub(crate) mod shape_template_list;

pub(crate) mod shape_vpc_information;

pub(crate) mod shape_access_control_entry_summary;

pub(crate) mod shape_connector_summary;

pub(crate) mod shape_directory_registration_summary;

pub(crate) mod shape_service_principal_name_summary;

pub(crate) mod shape_template_revision;

pub(crate) mod shape_template_summary;

pub(crate) mod shape_template_v2;

pub(crate) mod shape_template_v3;

pub(crate) mod shape_template_v4;

pub(crate) mod shape_certificate_validity;

pub(crate) mod shape_enrollment_flags_v2;

pub(crate) mod shape_enrollment_flags_v3;

pub(crate) mod shape_enrollment_flags_v4;

pub(crate) mod shape_extensions_v2;

pub(crate) mod shape_extensions_v3;

pub(crate) mod shape_extensions_v4;

pub(crate) mod shape_general_flags_v2;

pub(crate) mod shape_general_flags_v3;

pub(crate) mod shape_general_flags_v4;

pub(crate) mod shape_private_key_attributes_v2;

pub(crate) mod shape_private_key_attributes_v3;

pub(crate) mod shape_private_key_attributes_v4;

pub(crate) mod shape_private_key_flags_v2;

pub(crate) mod shape_private_key_flags_v3;

pub(crate) mod shape_private_key_flags_v4;

pub(crate) mod shape_security_group_id_list;

pub(crate) mod shape_subject_name_flags_v2;

pub(crate) mod shape_subject_name_flags_v3;

pub(crate) mod shape_subject_name_flags_v4;

pub(crate) mod shape_application_policies;

pub(crate) mod shape_key_usage;

pub(crate) mod shape_key_usage_property;

pub(crate) mod shape_template_name_list;

pub(crate) mod shape_validity_period;

pub(crate) mod shape_application_policy;

pub(crate) mod shape_crypto_providers_list;

pub(crate) mod shape_key_usage_flags;

pub(crate) mod shape_key_usage_property_flags;

pub(crate) mod shape_application_policy_list;

