// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the unusual anomalies.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnomalyObject  {
    /// <p>The type of behavior of the profile.</p>
    pub profile_type: ::std::option::Option<crate::types::ProfileType>,
    /// <p>The frequency of the anomaly.</p>
    pub profile_subtype: ::std::option::Option<crate::types::ProfileSubtype>,
    /// <p>The recorded value.</p>
    pub observations: ::std::option::Option<crate::types::Observations>,
}
impl  AnomalyObject  {
    /// <p>The type of behavior of the profile.</p>
    pub fn profile_type(&self) -> ::std::option::Option<& crate::types::ProfileType> {
        self.profile_type.as_ref()
    }
    /// <p>The frequency of the anomaly.</p>
    pub fn profile_subtype(&self) -> ::std::option::Option<& crate::types::ProfileSubtype> {
        self.profile_subtype.as_ref()
    }
    /// <p>The recorded value.</p>
    pub fn observations(&self) -> ::std::option::Option<& crate::types::Observations> {
        self.observations.as_ref()
    }
}
impl AnomalyObject {
    /// Creates a new builder-style object to manufacture [`AnomalyObject`](crate::types::AnomalyObject).
    pub fn builder() -> crate::types::builders::AnomalyObjectBuilder {
        crate::types::builders::AnomalyObjectBuilder::default()
    }
}

/// A builder for [`AnomalyObject`](crate::types::AnomalyObject).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnomalyObjectBuilder {
    pub(crate) profile_type: ::std::option::Option<crate::types::ProfileType>,
    pub(crate) profile_subtype: ::std::option::Option<crate::types::ProfileSubtype>,
    pub(crate) observations: ::std::option::Option<crate::types::Observations>,
}
impl AnomalyObjectBuilder {
    /// <p>The type of behavior of the profile.</p>
    pub fn profile_type(mut self, input: crate::types::ProfileType) -> Self {
        self.profile_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of behavior of the profile.</p>
    pub fn set_profile_type(mut self, input: ::std::option::Option<crate::types::ProfileType>) -> Self {
        self.profile_type = input; self
    }
    /// <p>The type of behavior of the profile.</p>
    pub fn get_profile_type(&self) -> &::std::option::Option<crate::types::ProfileType> {
        &self.profile_type
    }
    /// <p>The frequency of the anomaly.</p>
    pub fn profile_subtype(mut self, input: crate::types::ProfileSubtype) -> Self {
        self.profile_subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency of the anomaly.</p>
    pub fn set_profile_subtype(mut self, input: ::std::option::Option<crate::types::ProfileSubtype>) -> Self {
        self.profile_subtype = input; self
    }
    /// <p>The frequency of the anomaly.</p>
    pub fn get_profile_subtype(&self) -> &::std::option::Option<crate::types::ProfileSubtype> {
        &self.profile_subtype
    }
    /// <p>The recorded value.</p>
    pub fn observations(mut self, input: crate::types::Observations) -> Self {
        self.observations = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recorded value.</p>
    pub fn set_observations(mut self, input: ::std::option::Option<crate::types::Observations>) -> Self {
        self.observations = input; self
    }
    /// <p>The recorded value.</p>
    pub fn get_observations(&self) -> &::std::option::Option<crate::types::Observations> {
        &self.observations
    }
    /// Consumes the builder and constructs a [`AnomalyObject`](crate::types::AnomalyObject).
    pub fn build(self) -> crate::types::AnomalyObject {
        crate::types::AnomalyObject {
            profile_type: self.profile_type
            ,
            profile_subtype: self.profile_subtype
            ,
            observations: self.observations
            ,
        }
    }
}

