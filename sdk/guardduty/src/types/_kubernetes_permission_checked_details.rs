// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Kubernetes API for which you check if you have permission to call.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KubernetesPermissionCheckedDetails  {
    /// <p>The verb component of the Kubernetes API call. For example, when you check whether or not you have the permission to call the <code>CreatePod</code> API, the verb component will be <code>Create</code>.</p>
    pub verb: ::std::option::Option<::std::string::String>,
    /// <p>The Kubernetes resource with which your Kubernetes API call will interact.</p>
    pub resource: ::std::option::Option<::std::string::String>,
    /// <p>The namespace where the Kubernetes API action will take place.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>Information whether the user has the permission to call the Kubernetes API.</p>
    pub allowed: ::std::option::Option<bool>,
}
impl  KubernetesPermissionCheckedDetails  {
    /// <p>The verb component of the Kubernetes API call. For example, when you check whether or not you have the permission to call the <code>CreatePod</code> API, the verb component will be <code>Create</code>.</p>
    pub fn verb(&self) -> ::std::option::Option<& str> {
        self.verb.as_deref()
    }
    /// <p>The Kubernetes resource with which your Kubernetes API call will interact.</p>
    pub fn resource(&self) -> ::std::option::Option<& str> {
        self.resource.as_deref()
    }
    /// <p>The namespace where the Kubernetes API action will take place.</p>
    pub fn namespace(&self) -> ::std::option::Option<& str> {
        self.namespace.as_deref()
    }
    /// <p>Information whether the user has the permission to call the Kubernetes API.</p>
    pub fn allowed(&self) -> ::std::option::Option<bool> {
        self.allowed
    }
}
impl KubernetesPermissionCheckedDetails {
    /// Creates a new builder-style object to manufacture [`KubernetesPermissionCheckedDetails`](crate::types::KubernetesPermissionCheckedDetails).
    pub fn builder() -> crate::types::builders::KubernetesPermissionCheckedDetailsBuilder {
        crate::types::builders::KubernetesPermissionCheckedDetailsBuilder::default()
    }
}

/// A builder for [`KubernetesPermissionCheckedDetails`](crate::types::KubernetesPermissionCheckedDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KubernetesPermissionCheckedDetailsBuilder {
    pub(crate) verb: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) allowed: ::std::option::Option<bool>,
}
impl KubernetesPermissionCheckedDetailsBuilder {
    /// <p>The verb component of the Kubernetes API call. For example, when you check whether or not you have the permission to call the <code>CreatePod</code> API, the verb component will be <code>Create</code>.</p>
    pub fn verb(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verb = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The verb component of the Kubernetes API call. For example, when you check whether or not you have the permission to call the <code>CreatePod</code> API, the verb component will be <code>Create</code>.</p>
    pub fn set_verb(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verb = input; self
    }
    /// <p>The verb component of the Kubernetes API call. For example, when you check whether or not you have the permission to call the <code>CreatePod</code> API, the verb component will be <code>Create</code>.</p>
    pub fn get_verb(&self) -> &::std::option::Option<::std::string::String> {
        &self.verb
    }
    /// <p>The Kubernetes resource with which your Kubernetes API call will interact.</p>
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kubernetes resource with which your Kubernetes API call will interact.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input; self
    }
    /// <p>The Kubernetes resource with which your Kubernetes API call will interact.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// <p>The namespace where the Kubernetes API action will take place.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace where the Kubernetes API action will take place.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input; self
    }
    /// <p>The namespace where the Kubernetes API action will take place.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>Information whether the user has the permission to call the Kubernetes API.</p>
    pub fn allowed(mut self, input: bool) -> Self {
        self.allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information whether the user has the permission to call the Kubernetes API.</p>
    pub fn set_allowed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allowed = input; self
    }
    /// <p>Information whether the user has the permission to call the Kubernetes API.</p>
    pub fn get_allowed(&self) -> &::std::option::Option<bool> {
        &self.allowed
    }
    /// Consumes the builder and constructs a [`KubernetesPermissionCheckedDetails`](crate::types::KubernetesPermissionCheckedDetails).
    pub fn build(self) -> crate::types::KubernetesPermissionCheckedDetails {
        crate::types::KubernetesPermissionCheckedDetails {
            verb: self.verb
            ,
            resource: self.resource
            ,
            namespace: self.namespace
            ,
            allowed: self.allowed
            ,
        }
    }
}

