// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the EKS cluster that has a coverage status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageEksClusterDetails  {
    /// <p>Name of the EKS cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents the nodes within the EKS cluster that have a <code>HEALTHY</code> coverage status.</p>
    pub covered_nodes: ::std::option::Option<i64>,
    /// <p>Represents all the nodes within the EKS cluster in your account.</p>
    pub compatible_nodes: ::std::option::Option<i64>,
    /// <p>Information about the installed EKS add-on.</p>
    pub addon_details: ::std::option::Option<crate::types::AddonDetails>,
    /// <p>Indicates how the Amazon EKS add-on GuardDuty agent is managed for this EKS cluster.</p> 
    /// <p> <code>AUTO_MANAGED</code> indicates GuardDuty deploys and manages updates for this resource.</p> 
    /// <p> <code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the Amazon EKS add-on GuardDuty agent for this resource.</p>
    pub management_type: ::std::option::Option<crate::types::ManagementType>,
}
impl  CoverageEksClusterDetails  {
    /// <p>Name of the EKS cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<& str> {
        self.cluster_name.as_deref()
    }
    /// <p>Represents the nodes within the EKS cluster that have a <code>HEALTHY</code> coverage status.</p>
    pub fn covered_nodes(&self) -> ::std::option::Option<i64> {
        self.covered_nodes
    }
    /// <p>Represents all the nodes within the EKS cluster in your account.</p>
    pub fn compatible_nodes(&self) -> ::std::option::Option<i64> {
        self.compatible_nodes
    }
    /// <p>Information about the installed EKS add-on.</p>
    pub fn addon_details(&self) -> ::std::option::Option<& crate::types::AddonDetails> {
        self.addon_details.as_ref()
    }
    /// <p>Indicates how the Amazon EKS add-on GuardDuty agent is managed for this EKS cluster.</p> 
    /// <p> <code>AUTO_MANAGED</code> indicates GuardDuty deploys and manages updates for this resource.</p> 
    /// <p> <code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the Amazon EKS add-on GuardDuty agent for this resource.</p>
    pub fn management_type(&self) -> ::std::option::Option<& crate::types::ManagementType> {
        self.management_type.as_ref()
    }
}
impl CoverageEksClusterDetails {
    /// Creates a new builder-style object to manufacture [`CoverageEksClusterDetails`](crate::types::CoverageEksClusterDetails).
    pub fn builder() -> crate::types::builders::CoverageEksClusterDetailsBuilder {
        crate::types::builders::CoverageEksClusterDetailsBuilder::default()
    }
}

/// A builder for [`CoverageEksClusterDetails`](crate::types::CoverageEksClusterDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageEksClusterDetailsBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) covered_nodes: ::std::option::Option<i64>,
    pub(crate) compatible_nodes: ::std::option::Option<i64>,
    pub(crate) addon_details: ::std::option::Option<crate::types::AddonDetails>,
    pub(crate) management_type: ::std::option::Option<crate::types::ManagementType>,
}
impl CoverageEksClusterDetailsBuilder {
    /// <p>Name of the EKS cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the EKS cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input; self
    }
    /// <p>Name of the EKS cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>Represents the nodes within the EKS cluster that have a <code>HEALTHY</code> coverage status.</p>
    pub fn covered_nodes(mut self, input: i64) -> Self {
        self.covered_nodes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the nodes within the EKS cluster that have a <code>HEALTHY</code> coverage status.</p>
    pub fn set_covered_nodes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.covered_nodes = input; self
    }
    /// <p>Represents the nodes within the EKS cluster that have a <code>HEALTHY</code> coverage status.</p>
    pub fn get_covered_nodes(&self) -> &::std::option::Option<i64> {
        &self.covered_nodes
    }
    /// <p>Represents all the nodes within the EKS cluster in your account.</p>
    pub fn compatible_nodes(mut self, input: i64) -> Self {
        self.compatible_nodes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents all the nodes within the EKS cluster in your account.</p>
    pub fn set_compatible_nodes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.compatible_nodes = input; self
    }
    /// <p>Represents all the nodes within the EKS cluster in your account.</p>
    pub fn get_compatible_nodes(&self) -> &::std::option::Option<i64> {
        &self.compatible_nodes
    }
    /// <p>Information about the installed EKS add-on.</p>
    pub fn addon_details(mut self, input: crate::types::AddonDetails) -> Self {
        self.addon_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the installed EKS add-on.</p>
    pub fn set_addon_details(mut self, input: ::std::option::Option<crate::types::AddonDetails>) -> Self {
        self.addon_details = input; self
    }
    /// <p>Information about the installed EKS add-on.</p>
    pub fn get_addon_details(&self) -> &::std::option::Option<crate::types::AddonDetails> {
        &self.addon_details
    }
    /// <p>Indicates how the Amazon EKS add-on GuardDuty agent is managed for this EKS cluster.</p> 
    /// <p> <code>AUTO_MANAGED</code> indicates GuardDuty deploys and manages updates for this resource.</p> 
    /// <p> <code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the Amazon EKS add-on GuardDuty agent for this resource.</p>
    pub fn management_type(mut self, input: crate::types::ManagementType) -> Self {
        self.management_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how the Amazon EKS add-on GuardDuty agent is managed for this EKS cluster.</p> 
    /// <p> <code>AUTO_MANAGED</code> indicates GuardDuty deploys and manages updates for this resource.</p> 
    /// <p> <code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the Amazon EKS add-on GuardDuty agent for this resource.</p>
    pub fn set_management_type(mut self, input: ::std::option::Option<crate::types::ManagementType>) -> Self {
        self.management_type = input; self
    }
    /// <p>Indicates how the Amazon EKS add-on GuardDuty agent is managed for this EKS cluster.</p> 
    /// <p> <code>AUTO_MANAGED</code> indicates GuardDuty deploys and manages updates for this resource.</p> 
    /// <p> <code>MANUAL</code> indicates that you are responsible to deploy, update, and manage the Amazon EKS add-on GuardDuty agent for this resource.</p>
    pub fn get_management_type(&self) -> &::std::option::Option<crate::types::ManagementType> {
        &self.management_type
    }
    /// Consumes the builder and constructs a [`CoverageEksClusterDetails`](crate::types::CoverageEksClusterDetails).
    pub fn build(self) -> crate::types::CoverageEksClusterDetails {
        crate::types::CoverageEksClusterDetails {
            cluster_name: self.cluster_name
            ,
            covered_nodes: self.covered_nodes
            ,
            compatible_nodes: self.compatible_nodes
            ,
            addon_details: self.addon_details
            ,
            management_type: self.management_type
            ,
        }
    }
}

