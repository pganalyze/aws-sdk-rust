// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the workload.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkloadConfiguration  {
    /// <p>The name of the workload.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the workload tier.</p>
    pub tier: ::std::option::Option<crate::types::Tier>,
    /// <p>The configuration settings of the workload.</p>
    pub configuration: ::std::option::Option<::std::string::String>,
}
impl  WorkloadConfiguration  {
    /// <p>The name of the workload.</p>
    pub fn workload_name(&self) -> ::std::option::Option<& str> {
        self.workload_name.as_deref()
    }
    /// <p>The configuration of the workload tier.</p>
    pub fn tier(&self) -> ::std::option::Option<& crate::types::Tier> {
        self.tier.as_ref()
    }
    /// <p>The configuration settings of the workload.</p>
    pub fn configuration(&self) -> ::std::option::Option<& str> {
        self.configuration.as_deref()
    }
}
impl WorkloadConfiguration {
    /// Creates a new builder-style object to manufacture [`WorkloadConfiguration`](crate::types::WorkloadConfiguration).
    pub fn builder() -> crate::types::builders::WorkloadConfigurationBuilder {
        crate::types::builders::WorkloadConfigurationBuilder::default()
    }
}

/// A builder for [`WorkloadConfiguration`](crate::types::WorkloadConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkloadConfigurationBuilder {
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) tier: ::std::option::Option<crate::types::Tier>,
    pub(crate) configuration: ::std::option::Option<::std::string::String>,
}
impl WorkloadConfigurationBuilder {
    /// <p>The name of the workload.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input; self
    }
    /// <p>The name of the workload.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The configuration of the workload tier.</p>
    pub fn tier(mut self, input: crate::types::Tier) -> Self {
        self.tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the workload tier.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<crate::types::Tier>) -> Self {
        self.tier = input; self
    }
    /// <p>The configuration of the workload tier.</p>
    pub fn get_tier(&self) -> &::std::option::Option<crate::types::Tier> {
        &self.tier
    }
    /// <p>The configuration settings of the workload.</p>
    pub fn configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration settings of the workload.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration = input; self
    }
    /// <p>The configuration settings of the workload.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`WorkloadConfiguration`](crate::types::WorkloadConfiguration).
    pub fn build(self) -> crate::types::WorkloadConfiguration {
        crate::types::WorkloadConfiguration {
            workload_name: self.workload_name
            ,
            tier: self.tier
            ,
            configuration: self.configuration
            ,
        }
    }
}

