// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeWorkloadOutput  {
    /// <p>The ID of the workload.</p>
    pub workload_id: ::std::option::Option<::std::string::String>,
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub workload_remarks: ::std::option::Option<::std::string::String>,
    /// <p>The configuration settings of the workload. The value is the escaped JSON of the configuration.</p>
    pub workload_configuration: ::std::option::Option<crate::types::WorkloadConfiguration>,
    _request_id: Option<String>,
}
impl  DescribeWorkloadOutput  {
    /// <p>The ID of the workload.</p>
    pub fn workload_id(&self) -> ::std::option::Option<& str> {
        self.workload_id.as_deref()
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn workload_remarks(&self) -> ::std::option::Option<& str> {
        self.workload_remarks.as_deref()
    }
    /// <p>The configuration settings of the workload. The value is the escaped JSON of the configuration.</p>
    pub fn workload_configuration(&self) -> ::std::option::Option<& crate::types::WorkloadConfiguration> {
        self.workload_configuration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeWorkloadOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DescribeWorkloadOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkloadOutput`](crate::operation::describe_workload::DescribeWorkloadOutput).
    pub fn builder() -> crate::operation::describe_workload::builders::DescribeWorkloadOutputBuilder {
        crate::operation::describe_workload::builders::DescribeWorkloadOutputBuilder::default()
    }
}

/// A builder for [`DescribeWorkloadOutput`](crate::operation::describe_workload::DescribeWorkloadOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeWorkloadOutputBuilder {
    pub(crate) workload_id: ::std::option::Option<::std::string::String>,
    pub(crate) workload_remarks: ::std::option::Option<::std::string::String>,
    pub(crate) workload_configuration: ::std::option::Option<crate::types::WorkloadConfiguration>,
    _request_id: Option<String>,
}
impl DescribeWorkloadOutputBuilder {
    /// <p>The ID of the workload.</p>
    pub fn workload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workload.</p>
    pub fn set_workload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_id = input; self
    }
    /// <p>The ID of the workload.</p>
    pub fn get_workload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_id
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn workload_remarks(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_remarks = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn set_workload_remarks(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_remarks = input; self
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn get_workload_remarks(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_remarks
    }
    /// <p>The configuration settings of the workload. The value is the escaped JSON of the configuration.</p>
    pub fn workload_configuration(mut self, input: crate::types::WorkloadConfiguration) -> Self {
        self.workload_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings of the workload. The value is the escaped JSON of the configuration.</p>
    pub fn set_workload_configuration(mut self, input: ::std::option::Option<crate::types::WorkloadConfiguration>) -> Self {
        self.workload_configuration = input; self
    }
    /// <p>The configuration settings of the workload. The value is the escaped JSON of the configuration.</p>
    pub fn get_workload_configuration(&self) -> &::std::option::Option<crate::types::WorkloadConfiguration> {
        &self.workload_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DescribeWorkloadOutput`](crate::operation::describe_workload::DescribeWorkloadOutput).
    pub fn build(self) -> crate::operation::describe_workload::DescribeWorkloadOutput {
        crate::operation::describe_workload::DescribeWorkloadOutput {
            workload_id: self.workload_id
            ,
            workload_remarks: self.workload_remarks
            ,
            workload_configuration: self.workload_configuration
            ,
            _request_id: self._request_id,
        }
    }
}

