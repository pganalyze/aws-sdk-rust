// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configurable settings for the input device.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputDeviceConfigurableSettings  {
    /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
    pub configured_input: ::std::option::Option<crate::types::InputDeviceConfiguredInput>,
    /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
    pub max_bitrate: ::std::option::Option<i32>,
    /// The Link device's buffer size (latency) in milliseconds (ms).
    pub latency_ms: ::std::option::Option<i32>,
    /// Choose the codec for the video that the device produces. Only UHD devices can specify this parameter.
    pub codec: ::std::option::Option<crate::types::InputDeviceCodec>,
    /// To attach this device to a MediaConnect flow, specify these parameters. To detach an existing flow, enter {} for the value of mediaconnectSettings. Only UHD devices can specify this parameter.
    pub mediaconnect_settings: ::std::option::Option<crate::types::InputDeviceMediaConnectConfigurableSettings>,
}
impl  InputDeviceConfigurableSettings  {
    /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
    pub fn configured_input(&self) -> ::std::option::Option<& crate::types::InputDeviceConfiguredInput> {
        self.configured_input.as_ref()
    }
    /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
    pub fn max_bitrate(&self) -> ::std::option::Option<i32> {
        self.max_bitrate
    }
    /// The Link device's buffer size (latency) in milliseconds (ms).
    pub fn latency_ms(&self) -> ::std::option::Option<i32> {
        self.latency_ms
    }
    /// Choose the codec for the video that the device produces. Only UHD devices can specify this parameter.
    pub fn codec(&self) -> ::std::option::Option<& crate::types::InputDeviceCodec> {
        self.codec.as_ref()
    }
    /// To attach this device to a MediaConnect flow, specify these parameters. To detach an existing flow, enter {} for the value of mediaconnectSettings. Only UHD devices can specify this parameter.
    pub fn mediaconnect_settings(&self) -> ::std::option::Option<& crate::types::InputDeviceMediaConnectConfigurableSettings> {
        self.mediaconnect_settings.as_ref()
    }
}
impl InputDeviceConfigurableSettings {
    /// Creates a new builder-style object to manufacture [`InputDeviceConfigurableSettings`](crate::types::InputDeviceConfigurableSettings).
    pub fn builder() -> crate::types::builders::InputDeviceConfigurableSettingsBuilder {
        crate::types::builders::InputDeviceConfigurableSettingsBuilder::default()
    }
}

/// A builder for [`InputDeviceConfigurableSettings`](crate::types::InputDeviceConfigurableSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputDeviceConfigurableSettingsBuilder {
    pub(crate) configured_input: ::std::option::Option<crate::types::InputDeviceConfiguredInput>,
    pub(crate) max_bitrate: ::std::option::Option<i32>,
    pub(crate) latency_ms: ::std::option::Option<i32>,
    pub(crate) codec: ::std::option::Option<crate::types::InputDeviceCodec>,
    pub(crate) mediaconnect_settings: ::std::option::Option<crate::types::InputDeviceMediaConnectConfigurableSettings>,
}
impl InputDeviceConfigurableSettingsBuilder {
    /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
    pub fn configured_input(mut self, input: crate::types::InputDeviceConfiguredInput) -> Self {
        self.configured_input = ::std::option::Option::Some(input);
        self
    }
    /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
    pub fn set_configured_input(mut self, input: ::std::option::Option<crate::types::InputDeviceConfiguredInput>) -> Self {
        self.configured_input = input; self
    }
    /// The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.
    pub fn get_configured_input(&self) -> &::std::option::Option<crate::types::InputDeviceConfiguredInput> {
        &self.configured_input
    }
    /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
    pub fn max_bitrate(mut self, input: i32) -> Self {
        self.max_bitrate = ::std::option::Option::Some(input);
        self
    }
    /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
    pub fn set_max_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_bitrate = input; self
    }
    /// The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.
    pub fn get_max_bitrate(&self) -> &::std::option::Option<i32> {
        &self.max_bitrate
    }
    /// The Link device's buffer size (latency) in milliseconds (ms).
    pub fn latency_ms(mut self, input: i32) -> Self {
        self.latency_ms = ::std::option::Option::Some(input);
        self
    }
    /// The Link device's buffer size (latency) in milliseconds (ms).
    pub fn set_latency_ms(mut self, input: ::std::option::Option<i32>) -> Self {
        self.latency_ms = input; self
    }
    /// The Link device's buffer size (latency) in milliseconds (ms).
    pub fn get_latency_ms(&self) -> &::std::option::Option<i32> {
        &self.latency_ms
    }
    /// Choose the codec for the video that the device produces. Only UHD devices can specify this parameter.
    pub fn codec(mut self, input: crate::types::InputDeviceCodec) -> Self {
        self.codec = ::std::option::Option::Some(input);
        self
    }
    /// Choose the codec for the video that the device produces. Only UHD devices can specify this parameter.
    pub fn set_codec(mut self, input: ::std::option::Option<crate::types::InputDeviceCodec>) -> Self {
        self.codec = input; self
    }
    /// Choose the codec for the video that the device produces. Only UHD devices can specify this parameter.
    pub fn get_codec(&self) -> &::std::option::Option<crate::types::InputDeviceCodec> {
        &self.codec
    }
    /// To attach this device to a MediaConnect flow, specify these parameters. To detach an existing flow, enter {} for the value of mediaconnectSettings. Only UHD devices can specify this parameter.
    pub fn mediaconnect_settings(mut self, input: crate::types::InputDeviceMediaConnectConfigurableSettings) -> Self {
        self.mediaconnect_settings = ::std::option::Option::Some(input);
        self
    }
    /// To attach this device to a MediaConnect flow, specify these parameters. To detach an existing flow, enter {} for the value of mediaconnectSettings. Only UHD devices can specify this parameter.
    pub fn set_mediaconnect_settings(mut self, input: ::std::option::Option<crate::types::InputDeviceMediaConnectConfigurableSettings>) -> Self {
        self.mediaconnect_settings = input; self
    }
    /// To attach this device to a MediaConnect flow, specify these parameters. To detach an existing flow, enter {} for the value of mediaconnectSettings. Only UHD devices can specify this parameter.
    pub fn get_mediaconnect_settings(&self) -> &::std::option::Option<crate::types::InputDeviceMediaConnectConfigurableSettings> {
        &self.mediaconnect_settings
    }
    /// Consumes the builder and constructs a [`InputDeviceConfigurableSettings`](crate::types::InputDeviceConfigurableSettings).
    pub fn build(self) -> crate::types::InputDeviceConfigurableSettings {
        crate::types::InputDeviceConfigurableSettings {
            configured_input: self.configured_input
            ,
            max_bitrate: self.max_bitrate
            ,
            latency_ms: self.latency_ms
            ,
            codec: self.codec
            ,
            mediaconnect_settings: self.mediaconnect_settings
            ,
        }
    }
}

