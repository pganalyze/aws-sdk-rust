// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about the MediaConnect flow attached to the device.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputDeviceMediaConnectSettings  {
    /// The ARN of the MediaConnect flow.
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// The ARN for the role that MediaLive assumes to access the attached flow and secret.
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// The ARN of the secret used to encrypt the stream.
    pub secret_arn: ::std::option::Option<::std::string::String>,
    /// The name of the MediaConnect flow source.
    pub source_name: ::std::option::Option<::std::string::String>,
}
impl  InputDeviceMediaConnectSettings  {
    /// The ARN of the MediaConnect flow.
    pub fn flow_arn(&self) -> ::std::option::Option<& str> {
        self.flow_arn.as_deref()
    }
    /// The ARN for the role that MediaLive assumes to access the attached flow and secret.
    pub fn role_arn(&self) -> ::std::option::Option<& str> {
        self.role_arn.as_deref()
    }
    /// The ARN of the secret used to encrypt the stream.
    pub fn secret_arn(&self) -> ::std::option::Option<& str> {
        self.secret_arn.as_deref()
    }
    /// The name of the MediaConnect flow source.
    pub fn source_name(&self) -> ::std::option::Option<& str> {
        self.source_name.as_deref()
    }
}
impl InputDeviceMediaConnectSettings {
    /// Creates a new builder-style object to manufacture [`InputDeviceMediaConnectSettings`](crate::types::InputDeviceMediaConnectSettings).
    pub fn builder() -> crate::types::builders::InputDeviceMediaConnectSettingsBuilder {
        crate::types::builders::InputDeviceMediaConnectSettingsBuilder::default()
    }
}

/// A builder for [`InputDeviceMediaConnectSettings`](crate::types::InputDeviceMediaConnectSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputDeviceMediaConnectSettingsBuilder {
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_name: ::std::option::Option<::std::string::String>,
}
impl InputDeviceMediaConnectSettingsBuilder {
    /// The ARN of the MediaConnect flow.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the MediaConnect flow.
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input; self
    }
    /// The ARN of the MediaConnect flow.
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// The ARN for the role that MediaLive assumes to access the attached flow and secret.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN for the role that MediaLive assumes to access the attached flow and secret.
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input; self
    }
    /// The ARN for the role that MediaLive assumes to access the attached flow and secret.
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// The ARN of the secret used to encrypt the stream.
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of the secret used to encrypt the stream.
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input; self
    }
    /// The ARN of the secret used to encrypt the stream.
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// The name of the MediaConnect flow source.
    pub fn source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the MediaConnect flow source.
    pub fn set_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_name = input; self
    }
    /// The name of the MediaConnect flow source.
    pub fn get_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_name
    }
    /// Consumes the builder and constructs a [`InputDeviceMediaConnectSettings`](crate::types::InputDeviceMediaConnectSettings).
    pub fn build(self) -> crate::types::InputDeviceMediaConnectSettings {
        crate::types::InputDeviceMediaConnectSettings {
            flow_arn: self.flow_arn
            ,
            role_arn: self.role_arn
            ,
            secret_arn: self.secret_arn
            ,
            source_name: self.source_name
            ,
        }
    }
}

