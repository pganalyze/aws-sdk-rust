// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains a <code>Bounce</code> object if the event type is <code>BOUNCE</code>. Contains a <code>Complaint</code> object if the event type is <code>COMPLAINT</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventDetails  {
    /// <p>Information about a <code>Bounce</code> event.</p>
    pub bounce: ::std::option::Option<crate::types::Bounce>,
    /// <p>Information about a <code>Complaint</code> event.</p>
    pub complaint: ::std::option::Option<crate::types::Complaint>,
}
impl  EventDetails  {
    /// <p>Information about a <code>Bounce</code> event.</p>
    pub fn bounce(&self) -> ::std::option::Option<& crate::types::Bounce> {
        self.bounce.as_ref()
    }
    /// <p>Information about a <code>Complaint</code> event.</p>
    pub fn complaint(&self) -> ::std::option::Option<& crate::types::Complaint> {
        self.complaint.as_ref()
    }
}
impl EventDetails {
    /// Creates a new builder-style object to manufacture [`EventDetails`](crate::types::EventDetails).
    pub fn builder() -> crate::types::builders::EventDetailsBuilder {
        crate::types::builders::EventDetailsBuilder::default()
    }
}

/// A builder for [`EventDetails`](crate::types::EventDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventDetailsBuilder {
    pub(crate) bounce: ::std::option::Option<crate::types::Bounce>,
    pub(crate) complaint: ::std::option::Option<crate::types::Complaint>,
}
impl EventDetailsBuilder {
    /// <p>Information about a <code>Bounce</code> event.</p>
    pub fn bounce(mut self, input: crate::types::Bounce) -> Self {
        self.bounce = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a <code>Bounce</code> event.</p>
    pub fn set_bounce(mut self, input: ::std::option::Option<crate::types::Bounce>) -> Self {
        self.bounce = input; self
    }
    /// <p>Information about a <code>Bounce</code> event.</p>
    pub fn get_bounce(&self) -> &::std::option::Option<crate::types::Bounce> {
        &self.bounce
    }
    /// <p>Information about a <code>Complaint</code> event.</p>
    pub fn complaint(mut self, input: crate::types::Complaint) -> Self {
        self.complaint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a <code>Complaint</code> event.</p>
    pub fn set_complaint(mut self, input: ::std::option::Option<crate::types::Complaint>) -> Self {
        self.complaint = input; self
    }
    /// <p>Information about a <code>Complaint</code> event.</p>
    pub fn get_complaint(&self) -> &::std::option::Option<crate::types::Complaint> {
        &self.complaint
    }
    /// Consumes the builder and constructs a [`EventDetails`](crate::types::EventDetails).
    pub fn build(self) -> crate::types::EventDetails {
        crate::types::EventDetails {
            bounce: self.bounce
            ,
            complaint: self.complaint
            ,
        }
    }
}

