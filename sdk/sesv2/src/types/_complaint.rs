// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a <code>Complaint</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Complaint  {
    /// <p> Can either be <code>null</code> or <code>OnAccountSuppressionList</code>. If the value is <code>OnAccountSuppressionList</code>, SES accepted the message, but didn't attempt to send it because it was on the account-level suppression list. </p>
    pub complaint_sub_type: ::std::option::Option<::std::string::String>,
    /// <p> The value of the <code>Feedback-Type</code> field from the feedback report received from the ISP. </p>
    pub complaint_feedback_type: ::std::option::Option<::std::string::String>,
}
impl  Complaint  {
    /// <p> Can either be <code>null</code> or <code>OnAccountSuppressionList</code>. If the value is <code>OnAccountSuppressionList</code>, SES accepted the message, but didn't attempt to send it because it was on the account-level suppression list. </p>
    pub fn complaint_sub_type(&self) -> ::std::option::Option<& str> {
        self.complaint_sub_type.as_deref()
    }
    /// <p> The value of the <code>Feedback-Type</code> field from the feedback report received from the ISP. </p>
    pub fn complaint_feedback_type(&self) -> ::std::option::Option<& str> {
        self.complaint_feedback_type.as_deref()
    }
}
impl Complaint {
    /// Creates a new builder-style object to manufacture [`Complaint`](crate::types::Complaint).
    pub fn builder() -> crate::types::builders::ComplaintBuilder {
        crate::types::builders::ComplaintBuilder::default()
    }
}

/// A builder for [`Complaint`](crate::types::Complaint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComplaintBuilder {
    pub(crate) complaint_sub_type: ::std::option::Option<::std::string::String>,
    pub(crate) complaint_feedback_type: ::std::option::Option<::std::string::String>,
}
impl ComplaintBuilder {
    /// <p> Can either be <code>null</code> or <code>OnAccountSuppressionList</code>. If the value is <code>OnAccountSuppressionList</code>, SES accepted the message, but didn't attempt to send it because it was on the account-level suppression list. </p>
    pub fn complaint_sub_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.complaint_sub_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Can either be <code>null</code> or <code>OnAccountSuppressionList</code>. If the value is <code>OnAccountSuppressionList</code>, SES accepted the message, but didn't attempt to send it because it was on the account-level suppression list. </p>
    pub fn set_complaint_sub_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.complaint_sub_type = input; self
    }
    /// <p> Can either be <code>null</code> or <code>OnAccountSuppressionList</code>. If the value is <code>OnAccountSuppressionList</code>, SES accepted the message, but didn't attempt to send it because it was on the account-level suppression list. </p>
    pub fn get_complaint_sub_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.complaint_sub_type
    }
    /// <p> The value of the <code>Feedback-Type</code> field from the feedback report received from the ISP. </p>
    pub fn complaint_feedback_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.complaint_feedback_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The value of the <code>Feedback-Type</code> field from the feedback report received from the ISP. </p>
    pub fn set_complaint_feedback_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.complaint_feedback_type = input; self
    }
    /// <p> The value of the <code>Feedback-Type</code> field from the feedback report received from the ISP. </p>
    pub fn get_complaint_feedback_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.complaint_feedback_type
    }
    /// Consumes the builder and constructs a [`Complaint`](crate::types::Complaint).
    pub fn build(self) -> crate::types::Complaint {
        crate::types::Complaint {
            complaint_sub_type: self.complaint_sub_type
            ,
            complaint_feedback_type: self.complaint_feedback_type
            ,
        }
    }
}

