// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_job_template_settings(
                     object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                     input: &crate::types::JobTemplateSettings,
                ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ad_avail_offset {
        object.key("adAvailOffset").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_1).into()));
    }
    if let Some(var_2) = &input.avail_blanking {
        #[allow(unused_mut)]
        let mut object_3 = object.key("availBlanking").start_object();
        crate::protocol_serde::shape_avail_blanking::ser_avail_blanking(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.esam {
        #[allow(unused_mut)]
        let mut object_5 = object.key("esam").start_object();
        crate::protocol_serde::shape_esam_settings::ser_esam_settings(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.extended_data_services {
        #[allow(unused_mut)]
        let mut object_7 = object.key("extendedDataServices").start_object();
        crate::protocol_serde::shape_extended_data_services::ser_extended_data_services(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.follow_source {
        object.key("followSource").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((*var_8).into()));
    }
    if let Some(var_9) = &input.inputs {
        let mut array_10 = object.key("inputs").start_array();
        for item_11 in var_9 {
             {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_input_template::ser_input_template(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.kantar_watermark {
        #[allow(unused_mut)]
        let mut object_14 = object.key("kantarWatermark").start_object();
        crate::protocol_serde::shape_kantar_watermark_settings::ser_kantar_watermark_settings(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.motion_image_inserter {
        #[allow(unused_mut)]
        let mut object_16 = object.key("motionImageInserter").start_object();
        crate::protocol_serde::shape_motion_image_inserter::ser_motion_image_inserter(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.nielsen_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("nielsenConfiguration").start_object();
        crate::protocol_serde::shape_nielsen_configuration::ser_nielsen_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.nielsen_non_linear_watermark {
        #[allow(unused_mut)]
        let mut object_20 = object.key("nielsenNonLinearWatermark").start_object();
        crate::protocol_serde::shape_nielsen_non_linear_watermark_settings::ser_nielsen_non_linear_watermark_settings(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.output_groups {
        let mut array_22 = object.key("outputGroups").start_array();
        for item_23 in var_21 {
             {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_output_group::ser_output_group(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.timecode_config {
        #[allow(unused_mut)]
        let mut object_26 = object.key("timecodeConfig").start_object();
        crate::protocol_serde::shape_timecode_config::ser_timecode_config(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.timed_metadata_insertion {
        #[allow(unused_mut)]
        let mut object_28 = object.key("timedMetadataInsertion").start_object();
        crate::protocol_serde::shape_timed_metadata_insertion::ser_timed_metadata_insertion(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}

pub(crate) fn de_job_template_settings<'a, I>(tokens: &mut ::std::iter::Peekable<I>) -> Result<Option<crate::types::JobTemplateSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
                    where I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>> {
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
                        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::JobTemplateSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                                            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "adAvailOffset" => {
                                builder = builder.set_ad_avail_offset(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                                        .map(i32::try_from)
                                                        .transpose()?
                                );
                            }
                            "availBlanking" => {
                                builder = builder.set_avail_blanking(
                                    crate::protocol_serde::shape_avail_blanking::de_avail_blanking(tokens)?
                                );
                            }
                            "esam" => {
                                builder = builder.set_esam(
                                    crate::protocol_serde::shape_esam_settings::de_esam_settings(tokens)?
                                );
                            }
                            "extendedDataServices" => {
                                builder = builder.set_extended_data_services(
                                    crate::protocol_serde::shape_extended_data_services::de_extended_data_services(tokens)?
                                );
                            }
                            "followSource" => {
                                builder = builder.set_follow_source(
                                    ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                                        .map(i32::try_from)
                                                        .transpose()?
                                );
                            }
                            "inputs" => {
                                builder = builder.set_inputs(
                                    crate::protocol_serde::shape_list_of_input_template::de_list_of_input_template(tokens)?
                                );
                            }
                            "kantarWatermark" => {
                                builder = builder.set_kantar_watermark(
                                    crate::protocol_serde::shape_kantar_watermark_settings::de_kantar_watermark_settings(tokens)?
                                );
                            }
                            "motionImageInserter" => {
                                builder = builder.set_motion_image_inserter(
                                    crate::protocol_serde::shape_motion_image_inserter::de_motion_image_inserter(tokens)?
                                );
                            }
                            "nielsenConfiguration" => {
                                builder = builder.set_nielsen_configuration(
                                    crate::protocol_serde::shape_nielsen_configuration::de_nielsen_configuration(tokens)?
                                );
                            }
                            "nielsenNonLinearWatermark" => {
                                builder = builder.set_nielsen_non_linear_watermark(
                                    crate::protocol_serde::shape_nielsen_non_linear_watermark_settings::de_nielsen_non_linear_watermark_settings(tokens)?
                                );
                            }
                            "outputGroups" => {
                                builder = builder.set_output_groups(
                                    crate::protocol_serde::shape_list_of_output_group::de_list_of_output_group(tokens)?
                                );
                            }
                            "timecodeConfig" => {
                                builder = builder.set_timecode_config(
                                    crate::protocol_serde::shape_timecode_config::de_timecode_config(tokens)?
                                );
                            }
                            "timedMetadataInsertion" => {
                                builder = builder.set_timed_metadata_insertion(
                                    crate::protocol_serde::shape_timed_metadata_insertion::de_timed_metadata_insertion(tokens)?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?
                        }
                    }
                    other => return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!("expected object key or end object, found: {:?}", other)))
                }
            }
            Ok(Some(builder.build()))
        }
        _ => {
            Err(::aws_smithy_json::deserialize::error::DeserializeError::custom("expected start object or null"))
        }
    }
}

