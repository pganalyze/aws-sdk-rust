// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error information for an OpenSearch Serverless request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EffectiveLifecyclePolicyDetail  {
    /// <p>The type of lifecycle policy.</p>
    pub r#type: ::std::option::Option<crate::types::LifecyclePolicyType>,
    /// <p>The name of the OpenSearch Serverless index resource.</p>
    pub resource: ::std::option::Option<::std::string::String>,
    /// <p>The name of the lifecycle policy.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of OpenSearch Serverless resource. Currently, the only supported resource is <code>index</code>.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The minimum number of index retention in days or hours. This is an optional parameter that will return only if it’s set.</p>
    pub retention_period: ::std::option::Option<::std::string::String>,
    /// <p>The minimum number of index retention days set. That is an optional param that will return as <code>true</code> if the minimum number of days or hours is not set to a index resource.</p>
    pub no_min_retention_period: ::std::option::Option<bool>,
}
impl  EffectiveLifecyclePolicyDetail  {
    /// <p>The type of lifecycle policy.</p>
    pub fn r#type(&self) -> ::std::option::Option<& crate::types::LifecyclePolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the OpenSearch Serverless index resource.</p>
    pub fn resource(&self) -> ::std::option::Option<& str> {
        self.resource.as_deref()
    }
    /// <p>The name of the lifecycle policy.</p>
    pub fn policy_name(&self) -> ::std::option::Option<& str> {
        self.policy_name.as_deref()
    }
    /// <p>The type of OpenSearch Serverless resource. Currently, the only supported resource is <code>index</code>.</p>
    pub fn resource_type(&self) -> ::std::option::Option<& crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The minimum number of index retention in days or hours. This is an optional parameter that will return only if it’s set.</p>
    pub fn retention_period(&self) -> ::std::option::Option<& str> {
        self.retention_period.as_deref()
    }
    /// <p>The minimum number of index retention days set. That is an optional param that will return as <code>true</code> if the minimum number of days or hours is not set to a index resource.</p>
    pub fn no_min_retention_period(&self) -> ::std::option::Option<bool> {
        self.no_min_retention_period
    }
}
impl EffectiveLifecyclePolicyDetail {
    /// Creates a new builder-style object to manufacture [`EffectiveLifecyclePolicyDetail`](crate::types::EffectiveLifecyclePolicyDetail).
    pub fn builder() -> crate::types::builders::EffectiveLifecyclePolicyDetailBuilder {
        crate::types::builders::EffectiveLifecyclePolicyDetailBuilder::default()
    }
}

/// A builder for [`EffectiveLifecyclePolicyDetail`](crate::types::EffectiveLifecyclePolicyDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EffectiveLifecyclePolicyDetailBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::LifecyclePolicyType>,
    pub(crate) resource: ::std::option::Option<::std::string::String>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) retention_period: ::std::option::Option<::std::string::String>,
    pub(crate) no_min_retention_period: ::std::option::Option<bool>,
}
impl EffectiveLifecyclePolicyDetailBuilder {
    /// <p>The type of lifecycle policy.</p>
    pub fn r#type(mut self, input: crate::types::LifecyclePolicyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of lifecycle policy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyType>) -> Self {
        self.r#type = input; self
    }
    /// <p>The type of lifecycle policy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::LifecyclePolicyType> {
        &self.r#type
    }
    /// <p>The name of the OpenSearch Serverless index resource.</p>
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the OpenSearch Serverless index resource.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input; self
    }
    /// <p>The name of the OpenSearch Serverless index resource.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// <p>The name of the lifecycle policy.</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the lifecycle policy.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input; self
    }
    /// <p>The name of the lifecycle policy.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The type of OpenSearch Serverless resource. Currently, the only supported resource is <code>index</code>.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of OpenSearch Serverless resource. Currently, the only supported resource is <code>index</code>.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input; self
    }
    /// <p>The type of OpenSearch Serverless resource. Currently, the only supported resource is <code>index</code>.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The minimum number of index retention in days or hours. This is an optional parameter that will return only if it’s set.</p>
    pub fn retention_period(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retention_period = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minimum number of index retention in days or hours. This is an optional parameter that will return only if it’s set.</p>
    pub fn set_retention_period(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retention_period = input; self
    }
    /// <p>The minimum number of index retention in days or hours. This is an optional parameter that will return only if it’s set.</p>
    pub fn get_retention_period(&self) -> &::std::option::Option<::std::string::String> {
        &self.retention_period
    }
    /// <p>The minimum number of index retention days set. That is an optional param that will return as <code>true</code> if the minimum number of days or hours is not set to a index resource.</p>
    pub fn no_min_retention_period(mut self, input: bool) -> Self {
        self.no_min_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of index retention days set. That is an optional param that will return as <code>true</code> if the minimum number of days or hours is not set to a index resource.</p>
    pub fn set_no_min_retention_period(mut self, input: ::std::option::Option<bool>) -> Self {
        self.no_min_retention_period = input; self
    }
    /// <p>The minimum number of index retention days set. That is an optional param that will return as <code>true</code> if the minimum number of days or hours is not set to a index resource.</p>
    pub fn get_no_min_retention_period(&self) -> &::std::option::Option<bool> {
        &self.no_min_retention_period
    }
    /// Consumes the builder and constructs a [`EffectiveLifecyclePolicyDetail`](crate::types::EffectiveLifecyclePolicyDetail).
    pub fn build(self) -> crate::types::EffectiveLifecyclePolicyDetail {
        crate::types::EffectiveLifecyclePolicyDetail {
            r#type: self.r#type
            ,
            resource: self.resource
            ,
            policy_name: self.policy_name
            ,
            resource_type: self.resource_type
            ,
            retention_period: self.retention_period
            ,
            no_min_retention_period: self.no_min_retention_period
            ,
        }
    }
}

