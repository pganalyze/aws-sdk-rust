// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error information for an OpenSearch Serverless request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EffectiveLifecyclePolicyErrorDetail  {
    /// <p>The type of lifecycle policy.</p>
    pub r#type: ::std::option::Option<crate::types::LifecyclePolicyType>,
    /// <p>The name of OpenSearch Serverless index resource.</p>
    pub resource: ::std::option::Option<::std::string::String>,
    /// <p>A description of the error. For example, <code>The specified Index resource is not found</code>.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The error code for the request.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
}
impl  EffectiveLifecyclePolicyErrorDetail  {
    /// <p>The type of lifecycle policy.</p>
    pub fn r#type(&self) -> ::std::option::Option<& crate::types::LifecyclePolicyType> {
        self.r#type.as_ref()
    }
    /// <p>The name of OpenSearch Serverless index resource.</p>
    pub fn resource(&self) -> ::std::option::Option<& str> {
        self.resource.as_deref()
    }
    /// <p>A description of the error. For example, <code>The specified Index resource is not found</code>.</p>
    pub fn error_message(&self) -> ::std::option::Option<& str> {
        self.error_message.as_deref()
    }
    /// <p>The error code for the request.</p>
    pub fn error_code(&self) -> ::std::option::Option<& str> {
        self.error_code.as_deref()
    }
}
impl EffectiveLifecyclePolicyErrorDetail {
    /// Creates a new builder-style object to manufacture [`EffectiveLifecyclePolicyErrorDetail`](crate::types::EffectiveLifecyclePolicyErrorDetail).
    pub fn builder() -> crate::types::builders::EffectiveLifecyclePolicyErrorDetailBuilder {
        crate::types::builders::EffectiveLifecyclePolicyErrorDetailBuilder::default()
    }
}

/// A builder for [`EffectiveLifecyclePolicyErrorDetail`](crate::types::EffectiveLifecyclePolicyErrorDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EffectiveLifecyclePolicyErrorDetailBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::LifecyclePolicyType>,
    pub(crate) resource: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
}
impl EffectiveLifecyclePolicyErrorDetailBuilder {
    /// <p>The type of lifecycle policy.</p>
    pub fn r#type(mut self, input: crate::types::LifecyclePolicyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of lifecycle policy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyType>) -> Self {
        self.r#type = input; self
    }
    /// <p>The type of lifecycle policy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::LifecyclePolicyType> {
        &self.r#type
    }
    /// <p>The name of OpenSearch Serverless index resource.</p>
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of OpenSearch Serverless index resource.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input; self
    }
    /// <p>The name of OpenSearch Serverless index resource.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// <p>A description of the error. For example, <code>The specified Index resource is not found</code>.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the error. For example, <code>The specified Index resource is not found</code>.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input; self
    }
    /// <p>A description of the error. For example, <code>The specified Index resource is not found</code>.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The error code for the request.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code for the request.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input; self
    }
    /// <p>The error code for the request.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// Consumes the builder and constructs a [`EffectiveLifecyclePolicyErrorDetail`](crate::types::EffectiveLifecyclePolicyErrorDetail).
    pub fn build(self) -> crate::types::EffectiveLifecyclePolicyErrorDetail {
        crate::types::EffectiveLifecyclePolicyErrorDetail {
            r#type: self.r#type
            ,
            resource: self.resource
            ,
            error_message: self.error_message
            ,
            error_code: self.error_code
            ,
        }
    }
}

