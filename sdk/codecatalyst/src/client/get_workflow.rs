// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWorkflow`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder) operation.
                            ///
                            /// - The fluent builder is configurable:
    ///   - [`space_name(impl Into<String>)`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::space_name) / [`set_space_name(Option<String>)`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::set_space_name):<br>required: **true**<br><p>The name of the space.</p><br>
    ///   - [`id(impl Into<String>)`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::set_id):<br>required: **true**<br><p>The ID of the workflow. To rerieve a list of workflow IDs, use <code>ListWorkflows</code>.</p><br>
    ///   - [`project_name(impl Into<String>)`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::project_name) / [`set_project_name(Option<String>)`](crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::set_project_name):<br>required: **true**<br><p>The name of the project in the space.</p><br>
                            /// - On success, responds with [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput) with field(s):
    ///   - [`space_name(String)`](crate::operation::get_workflow::GetWorkflowOutput::space_name): <p>The name of the space.</p>
    ///   - [`project_name(String)`](crate::operation::get_workflow::GetWorkflowOutput::project_name): <p>The name of the project in the space.</p>
    ///   - [`id(String)`](crate::operation::get_workflow::GetWorkflowOutput::id): <p>The ID of the workflow.</p>
    ///   - [`name(String)`](crate::operation::get_workflow::GetWorkflowOutput::name): <p>The name of the workflow.</p>
    ///   - [`source_repository_name(Option<String>)`](crate::operation::get_workflow::GetWorkflowOutput::source_repository_name): <p>The name of the source repository where the workflow YAML is stored.</p>
    ///   - [`source_branch_name(Option<String>)`](crate::operation::get_workflow::GetWorkflowOutput::source_branch_name): <p>The name of the branch that contains the workflow YAML.</p>
    ///   - [`definition(Option<WorkflowDefinition>)`](crate::operation::get_workflow::GetWorkflowOutput::definition): <p>Information about the workflow definition file for the workflow.</p>
    ///   - [`created_time(DateTime)`](crate::operation::get_workflow::GetWorkflowOutput::created_time): <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    ///   - [`last_updated_time(DateTime)`](crate::operation::get_workflow::GetWorkflowOutput::last_updated_time): <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    ///   - [`run_mode(WorkflowRunMode)`](crate::operation::get_workflow::GetWorkflowOutput::run_mode): <p>The behavior to use when multiple workflows occur at the same time. For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html">https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html</a> in the Amazon CodeCatalyst User Guide.</p>
    ///   - [`status(WorkflowStatus)`](crate::operation::get_workflow::GetWorkflowOutput::status): <p>The status of the workflow.</p>
                            /// - On failure, responds with [`SdkError<GetWorkflowError>`](crate::operation::get_workflow::GetWorkflowError)
    pub fn get_workflow(&self) -> crate::operation::get_workflow::builders::GetWorkflowFluentBuilder {
                                crate::operation::get_workflow::builders::GetWorkflowFluentBuilder::new(self.handle.clone())
                            }
}

