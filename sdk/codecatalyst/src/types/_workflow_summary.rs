// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a workflow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowSummary  {
    /// <p>The system-generated unique ID of a workflow.</p>
    pub id: ::std::string::String,
    /// <p>The name of the workflow.</p>
    pub name: ::std::string::String,
    /// <p>The name of the source repository where the workflow definition file is stored.</p>
    pub source_repository_name: ::std::string::String,
    /// <p>The name of the branch of the source repository where the workflow definition file is stored.</p>
    pub source_branch_name: ::std::string::String,
    /// <p>Information about the workflow definition file.</p>
    pub definition: ::std::option::Option<crate::types::WorkflowDefinitionSummary>,
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>The run mode of the workflow.</p>
    pub run_mode: crate::types::WorkflowRunMode,
    /// <p>The status of the workflow.</p>
    pub status: crate::types::WorkflowStatus,
}
impl  WorkflowSummary  {
    /// <p>The system-generated unique ID of a workflow.</p>
    pub fn id(&self) -> & str {
        use std::ops::Deref; self.id.deref()
    }
    /// <p>The name of the workflow.</p>
    pub fn name(&self) -> & str {
        use std::ops::Deref; self.name.deref()
    }
    /// <p>The name of the source repository where the workflow definition file is stored.</p>
    pub fn source_repository_name(&self) -> & str {
        use std::ops::Deref; self.source_repository_name.deref()
    }
    /// <p>The name of the branch of the source repository where the workflow definition file is stored.</p>
    pub fn source_branch_name(&self) -> & str {
        use std::ops::Deref; self.source_branch_name.deref()
    }
    /// <p>Information about the workflow definition file.</p>
    pub fn definition(&self) -> ::std::option::Option<& crate::types::WorkflowDefinitionSummary> {
        self.definition.as_ref()
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn created_time(&self) -> & ::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn last_updated_time(&self) -> & ::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>The run mode of the workflow.</p>
    pub fn run_mode(&self) -> & crate::types::WorkflowRunMode {
        &self.run_mode
    }
    /// <p>The status of the workflow.</p>
    pub fn status(&self) -> & crate::types::WorkflowStatus {
        &self.status
    }
}
impl WorkflowSummary {
    /// Creates a new builder-style object to manufacture [`WorkflowSummary`](crate::types::WorkflowSummary).
    pub fn builder() -> crate::types::builders::WorkflowSummaryBuilder {
        crate::types::builders::WorkflowSummaryBuilder::default()
    }
}

/// A builder for [`WorkflowSummary`](crate::types::WorkflowSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source_repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_branch_name: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<crate::types::WorkflowDefinitionSummary>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) run_mode: ::std::option::Option<crate::types::WorkflowRunMode>,
    pub(crate) status: ::std::option::Option<crate::types::WorkflowStatus>,
}
impl WorkflowSummaryBuilder {
    /// <p>The system-generated unique ID of a workflow.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of a workflow.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The system-generated unique ID of a workflow.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the workflow.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the source repository where the workflow definition file is stored.</p>
    /// This field is required.
    pub fn source_repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source repository where the workflow definition file is stored.</p>
    pub fn set_source_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_repository_name = input; self
    }
    /// <p>The name of the source repository where the workflow definition file is stored.</p>
    pub fn get_source_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_repository_name
    }
    /// <p>The name of the branch of the source repository where the workflow definition file is stored.</p>
    /// This field is required.
    pub fn source_branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_branch_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the branch of the source repository where the workflow definition file is stored.</p>
    pub fn set_source_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_branch_name = input; self
    }
    /// <p>The name of the branch of the source repository where the workflow definition file is stored.</p>
    pub fn get_source_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_branch_name
    }
    /// <p>Information about the workflow definition file.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::WorkflowDefinitionSummary) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the workflow definition file.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::WorkflowDefinitionSummary>) -> Self {
        self.definition = input; self
    }
    /// <p>Information about the workflow definition file.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::WorkflowDefinitionSummary> {
        &self.definition
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input; self
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input; self
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The run mode of the workflow.</p>
    /// This field is required.
    pub fn run_mode(mut self, input: crate::types::WorkflowRunMode) -> Self {
        self.run_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run mode of the workflow.</p>
    pub fn set_run_mode(mut self, input: ::std::option::Option<crate::types::WorkflowRunMode>) -> Self {
        self.run_mode = input; self
    }
    /// <p>The run mode of the workflow.</p>
    pub fn get_run_mode(&self) -> &::std::option::Option<crate::types::WorkflowRunMode> {
        &self.run_mode
    }
    /// <p>The status of the workflow.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::WorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the workflow.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkflowStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the workflow.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkflowStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`WorkflowSummary`](crate::types::WorkflowSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::WorkflowSummaryBuilder::id)
    /// - [`name`](crate::types::builders::WorkflowSummaryBuilder::name)
    /// - [`source_repository_name`](crate::types::builders::WorkflowSummaryBuilder::source_repository_name)
    /// - [`source_branch_name`](crate::types::builders::WorkflowSummaryBuilder::source_branch_name)
    /// - [`created_time`](crate::types::builders::WorkflowSummaryBuilder::created_time)
    /// - [`last_updated_time`](crate::types::builders::WorkflowSummaryBuilder::last_updated_time)
    /// - [`run_mode`](crate::types::builders::WorkflowSummaryBuilder::run_mode)
    /// - [`status`](crate::types::builders::WorkflowSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkflowSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::WorkflowSummary {
                id: self.id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                name: self.name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("name", "name was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                source_repository_name: self.source_repository_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("source_repository_name", "source_repository_name was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                source_branch_name: self.source_branch_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("source_branch_name", "source_branch_name was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                definition: self.definition
                ,
                created_time: self.created_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("created_time", "created_time was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                last_updated_time: self.last_updated_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("last_updated_time", "last_updated_time was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                run_mode: self.run_mode
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("run_mode", "run_mode was not specified but it is required when building WorkflowSummary")
                    )?
                ,
                status: self.status
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("status", "status was not specified but it is required when building WorkflowSummary")
                    )?
                ,
            }
        )
    }
}

