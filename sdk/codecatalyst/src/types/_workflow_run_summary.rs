// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a workflow run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowRunSummary  {
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub id: ::std::string::String,
    /// <p>The system-generated unique ID of the workflow.</p>
    pub workflow_id: ::std::string::String,
    /// <p>The name of the workflow.</p>
    pub workflow_name: ::std::string::String,
    /// <p>The status of the workflow run.</p>
    pub status: crate::types::WorkflowRunStatus,
    /// <p>The reasons for the workflow run status.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunStatusReason>>,
    /// <p>The date and time the workflow run began, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time the workflow run ended, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
}
impl  WorkflowRunSummary  {
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub fn id(&self) -> & str {
        use std::ops::Deref; self.id.deref()
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    pub fn workflow_id(&self) -> & str {
        use std::ops::Deref; self.workflow_id.deref()
    }
    /// <p>The name of the workflow.</p>
    pub fn workflow_name(&self) -> & str {
        use std::ops::Deref; self.workflow_name.deref()
    }
    /// <p>The status of the workflow run.</p>
    pub fn status(&self) -> & crate::types::WorkflowRunStatus {
        &self.status
    }
    /// <p>The reasons for the workflow run status.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> & [crate::types::WorkflowRunStatusReason] {
        self.status_reasons.as_deref()
        .unwrap_or_default()
    }
    /// <p>The date and time the workflow run began, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub fn start_time(&self) -> & ::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The date and time the workflow run ended, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn end_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn last_updated_time(&self) -> & ::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
}
impl WorkflowRunSummary {
    /// Creates a new builder-style object to manufacture [`WorkflowRunSummary`](crate::types::WorkflowRunSummary).
    pub fn builder() -> crate::types::builders::WorkflowRunSummaryBuilder {
        crate::types::builders::WorkflowRunSummaryBuilder::default()
    }
}

/// A builder for [`WorkflowRunSummary`](crate::types::WorkflowRunSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowRunSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkflowRunStatus>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunStatusReason>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WorkflowRunSummaryBuilder {
    /// <p>The system-generated unique ID of the workflow run.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input; self
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The name of the workflow.</p>
    /// This field is required.
    pub fn workflow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_workflow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_name = input; self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_workflow_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_name
    }
    /// <p>The status of the workflow run.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::WorkflowRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the workflow run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkflowRunStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the workflow run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkflowRunStatus> {
        &self.status
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>The reasons for the workflow run status.</p>
    pub fn status_reasons(mut self, input: crate::types::WorkflowRunStatusReason) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
                        v.push(input);
                        self.status_reasons = ::std::option::Option::Some(v);
                        self
    }
    /// <p>The reasons for the workflow run status.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunStatusReason>>) -> Self {
        self.status_reasons = input; self
    }
    /// <p>The reasons for the workflow run status.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunStatusReason>> {
        &self.status_reasons
    }
    /// <p>The date and time the workflow run began, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow run began, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input; self
    }
    /// <p>The date and time the workflow run began, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time the workflow run ended, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow run ended, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input; self
    }
    /// <p>The date and time the workflow run ended, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input; self
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// Consumes the builder and constructs a [`WorkflowRunSummary`](crate::types::WorkflowRunSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::WorkflowRunSummaryBuilder::id)
    /// - [`workflow_id`](crate::types::builders::WorkflowRunSummaryBuilder::workflow_id)
    /// - [`workflow_name`](crate::types::builders::WorkflowRunSummaryBuilder::workflow_name)
    /// - [`status`](crate::types::builders::WorkflowRunSummaryBuilder::status)
    /// - [`start_time`](crate::types::builders::WorkflowRunSummaryBuilder::start_time)
    /// - [`last_updated_time`](crate::types::builders::WorkflowRunSummaryBuilder::last_updated_time)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkflowRunSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::WorkflowRunSummary {
                id: self.id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building WorkflowRunSummary")
                    )?
                ,
                workflow_id: self.workflow_id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("workflow_id", "workflow_id was not specified but it is required when building WorkflowRunSummary")
                    )?
                ,
                workflow_name: self.workflow_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("workflow_name", "workflow_name was not specified but it is required when building WorkflowRunSummary")
                    )?
                ,
                status: self.status
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("status", "status was not specified but it is required when building WorkflowRunSummary")
                    )?
                ,
                status_reasons: self.status_reasons
                ,
                start_time: self.start_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("start_time", "start_time was not specified but it is required when building WorkflowRunSummary")
                    )?
                ,
                end_time: self.end_time
                ,
                last_updated_time: self.last_updated_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("last_updated_time", "last_updated_time was not specified but it is required when building WorkflowRunSummary")
                    )?
                ,
            }
        )
    }
}

