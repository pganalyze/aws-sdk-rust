// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartWorkflowRunOutput  {
    /// <p>The name of the space.</p>
    pub space_name: ::std::string::String,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::string::String,
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub id: ::std::string::String,
    /// <p>The system-generated unique ID of the workflow.</p>
    pub workflow_id: ::std::string::String,
    _request_id: Option<String>,
}
impl  StartWorkflowRunOutput  {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> & str {
        use std::ops::Deref; self.space_name.deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> & str {
        use std::ops::Deref; self.project_name.deref()
    }
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub fn id(&self) -> & str {
        use std::ops::Deref; self.id.deref()
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    pub fn workflow_id(&self) -> & str {
        use std::ops::Deref; self.workflow_id.deref()
    }
}
impl ::aws_types::request_id::RequestId for StartWorkflowRunOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl StartWorkflowRunOutput {
    /// Creates a new builder-style object to manufacture [`StartWorkflowRunOutput`](crate::operation::start_workflow_run::StartWorkflowRunOutput).
    pub fn builder() -> crate::operation::start_workflow_run::builders::StartWorkflowRunOutputBuilder {
        crate::operation::start_workflow_run::builders::StartWorkflowRunOutputBuilder::default()
    }
}

/// A builder for [`StartWorkflowRunOutput`](crate::operation::start_workflow_run::StartWorkflowRunOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartWorkflowRunOutputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartWorkflowRunOutputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input; self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input; self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The system-generated unique ID of the workflow run.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The system-generated unique ID of the workflow run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input; self
    }
    /// <p>The system-generated unique ID of the workflow.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`StartWorkflowRunOutput`](crate::operation::start_workflow_run::StartWorkflowRunOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`space_name`](crate::operation::start_workflow_run::builders::StartWorkflowRunOutputBuilder::space_name)
    /// - [`project_name`](crate::operation::start_workflow_run::builders::StartWorkflowRunOutputBuilder::project_name)
    /// - [`id`](crate::operation::start_workflow_run::builders::StartWorkflowRunOutputBuilder::id)
    /// - [`workflow_id`](crate::operation::start_workflow_run::builders::StartWorkflowRunOutputBuilder::workflow_id)
    pub fn build(self) -> ::std::result::Result<crate::operation::start_workflow_run::StartWorkflowRunOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::start_workflow_run::StartWorkflowRunOutput {
                space_name: self.space_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("space_name", "space_name was not specified but it is required when building StartWorkflowRunOutput")
                    )?
                ,
                project_name: self.project_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("project_name", "project_name was not specified but it is required when building StartWorkflowRunOutput")
                    )?
                ,
                id: self.id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building StartWorkflowRunOutput")
                    )?
                ,
                workflow_id: self.workflow_id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("workflow_id", "workflow_id was not specified but it is required when building StartWorkflowRunOutput")
                    )?
                ,
                _request_id: self._request_id,
            }
        )
    }
}

