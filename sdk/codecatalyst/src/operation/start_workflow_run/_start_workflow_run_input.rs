// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartWorkflowRunInput  {
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The system-generated unique ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl  StartWorkflowRunInput  {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<& str> {
        self.space_name.as_deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> ::std::option::Option<& str> {
        self.project_name.as_deref()
    }
    /// <p>The system-generated unique ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<& str> {
        self.workflow_id.as_deref()
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn client_token(&self) -> ::std::option::Option<& str> {
        self.client_token.as_deref()
    }
}
impl StartWorkflowRunInput {
    /// Creates a new builder-style object to manufacture [`StartWorkflowRunInput`](crate::operation::start_workflow_run::StartWorkflowRunInput).
    pub fn builder() -> crate::operation::start_workflow_run::builders::StartWorkflowRunInputBuilder {
        crate::operation::start_workflow_run::builders::StartWorkflowRunInputBuilder::default()
    }
}

/// A builder for [`StartWorkflowRunInput`](crate::operation::start_workflow_run::StartWorkflowRunInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartWorkflowRunInputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl StartWorkflowRunInputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input; self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input; self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The system-generated unique ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-generated unique ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input; self
    }
    /// <p>The system-generated unique ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input; self
    }
    /// <p>A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`StartWorkflowRunInput`](crate::operation::start_workflow_run::StartWorkflowRunInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_workflow_run::StartWorkflowRunInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::start_workflow_run::StartWorkflowRunInput {
                space_name: self.space_name
                ,
                project_name: self.project_name
                ,
                workflow_id: self.workflow_id
                ,
                client_token: self.client_token
                ,
            }
        )
    }
}

