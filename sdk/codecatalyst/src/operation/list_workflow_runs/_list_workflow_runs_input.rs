// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkflowRunsInput  {
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>A token returned from a call to this API to indicate the next batch of results to return, if any.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Information used to sort the items in the returned list.</p>
    pub sort_by: ::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunSortCriteria>>,
}
impl  ListWorkflowRunsInput  {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<& str> {
        self.space_name.as_deref()
    }
    /// <p>The ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<& str> {
        self.workflow_id.as_deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> ::std::option::Option<& str> {
        self.project_name.as_deref()
    }
    /// <p>A token returned from a call to this API to indicate the next batch of results to return, if any.</p>
    pub fn next_token(&self) -> ::std::option::Option<& str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Information used to sort the items in the returned list.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sort_by.is_none()`.
    pub fn sort_by(&self) -> & [crate::types::WorkflowRunSortCriteria] {
        self.sort_by.as_deref()
        .unwrap_or_default()
    }
}
impl ListWorkflowRunsInput {
    /// Creates a new builder-style object to manufacture [`ListWorkflowRunsInput`](crate::operation::list_workflow_runs::ListWorkflowRunsInput).
    pub fn builder() -> crate::operation::list_workflow_runs::builders::ListWorkflowRunsInputBuilder {
        crate::operation::list_workflow_runs::builders::ListWorkflowRunsInputBuilder::default()
    }
}

/// A builder for [`ListWorkflowRunsInput`](crate::operation::list_workflow_runs::ListWorkflowRunsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWorkflowRunsInputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) sort_by: ::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunSortCriteria>>,
}
impl ListWorkflowRunsInputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input; self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input; self
    }
    /// <p>The ID of the workflow. To retrieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input; self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>A token returned from a call to this API to indicate the next batch of results to return, if any.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token returned from a call to this API to indicate the next batch of results to return, if any.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input; self
    }
    /// <p>A token returned from a call to this API to indicate the next batch of results to return, if any.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input; self
    }
    /// <p>The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `sort_by`.
    ///
    /// To override the contents of this collection use [`set_sort_by`](Self::set_sort_by).
    ///
    /// <p>Information used to sort the items in the returned list.</p>
    pub fn sort_by(mut self, input: crate::types::WorkflowRunSortCriteria) -> Self {
        let mut v = self.sort_by.unwrap_or_default();
                        v.push(input);
                        self.sort_by = ::std::option::Option::Some(v);
                        self
    }
    /// <p>Information used to sort the items in the returned list.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunSortCriteria>>) -> Self {
        self.sort_by = input; self
    }
    /// <p>Information used to sort the items in the returned list.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::WorkflowRunSortCriteria>> {
        &self.sort_by
    }
    /// Consumes the builder and constructs a [`ListWorkflowRunsInput`](crate::operation::list_workflow_runs::ListWorkflowRunsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_workflow_runs::ListWorkflowRunsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::list_workflow_runs::ListWorkflowRunsInput {
                space_name: self.space_name
                ,
                workflow_id: self.workflow_id
                ,
                project_name: self.project_name
                ,
                next_token: self.next_token
                ,
                max_results: self.max_results
                ,
                sort_by: self.sort_by
                ,
            }
        )
    }
}

