// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWorkflowInput  {
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the workflow. To rerieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
}
impl  GetWorkflowInput  {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<& str> {
        self.space_name.as_deref()
    }
    /// <p>The ID of the workflow. To rerieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> ::std::option::Option<& str> {
        self.project_name.as_deref()
    }
}
impl GetWorkflowInput {
    /// Creates a new builder-style object to manufacture [`GetWorkflowInput`](crate::operation::get_workflow::GetWorkflowInput).
    pub fn builder() -> crate::operation::get_workflow::builders::GetWorkflowInputBuilder {
        crate::operation::get_workflow::builders::GetWorkflowInputBuilder::default()
    }
}

/// A builder for [`GetWorkflowInput`](crate::operation::get_workflow::GetWorkflowInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetWorkflowInputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
}
impl GetWorkflowInputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input; self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The ID of the workflow. To rerieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workflow. To rerieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The ID of the workflow. To rerieve a list of workflow IDs, use <code>ListWorkflows</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input; self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// Consumes the builder and constructs a [`GetWorkflowInput`](crate::operation::get_workflow::GetWorkflowInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_workflow::GetWorkflowInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::get_workflow::GetWorkflowInput {
                space_name: self.space_name
                ,
                id: self.id
                ,
                project_name: self.project_name
                ,
            }
        )
    }
}

