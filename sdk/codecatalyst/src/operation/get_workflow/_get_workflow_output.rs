// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWorkflowOutput  {
    /// <p>The name of the space.</p>
    pub space_name: ::std::string::String,
    /// <p>The name of the project in the space.</p>
    pub project_name: ::std::string::String,
    /// <p>The ID of the workflow.</p>
    pub id: ::std::string::String,
    /// <p>The name of the workflow.</p>
    pub name: ::std::string::String,
    /// <p>The name of the source repository where the workflow YAML is stored.</p>
    pub source_repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the branch that contains the workflow YAML.</p>
    pub source_branch_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the workflow definition file for the workflow.</p>
    pub definition: ::std::option::Option<crate::types::WorkflowDefinition>,
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>The behavior to use when multiple workflows occur at the same time. For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html">https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html</a> in the Amazon CodeCatalyst User Guide.</p>
    pub run_mode: crate::types::WorkflowRunMode,
    /// <p>The status of the workflow.</p>
    pub status: crate::types::WorkflowStatus,
    _request_id: Option<String>,
}
impl  GetWorkflowOutput  {
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> & str {
        use std::ops::Deref; self.space_name.deref()
    }
    /// <p>The name of the project in the space.</p>
    pub fn project_name(&self) -> & str {
        use std::ops::Deref; self.project_name.deref()
    }
    /// <p>The ID of the workflow.</p>
    pub fn id(&self) -> & str {
        use std::ops::Deref; self.id.deref()
    }
    /// <p>The name of the workflow.</p>
    pub fn name(&self) -> & str {
        use std::ops::Deref; self.name.deref()
    }
    /// <p>The name of the source repository where the workflow YAML is stored.</p>
    pub fn source_repository_name(&self) -> ::std::option::Option<& str> {
        self.source_repository_name.as_deref()
    }
    /// <p>The name of the branch that contains the workflow YAML.</p>
    pub fn source_branch_name(&self) -> ::std::option::Option<& str> {
        self.source_branch_name.as_deref()
    }
    /// <p>Information about the workflow definition file for the workflow.</p>
    pub fn definition(&self) -> ::std::option::Option<& crate::types::WorkflowDefinition> {
        self.definition.as_ref()
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn created_time(&self) -> & ::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn last_updated_time(&self) -> & ::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>The behavior to use when multiple workflows occur at the same time. For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html">https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html</a> in the Amazon CodeCatalyst User Guide.</p>
    pub fn run_mode(&self) -> & crate::types::WorkflowRunMode {
        &self.run_mode
    }
    /// <p>The status of the workflow.</p>
    pub fn status(&self) -> & crate::types::WorkflowStatus {
        &self.status
    }
}
impl ::aws_types::request_id::RequestId for GetWorkflowOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl GetWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput).
    pub fn builder() -> crate::operation::get_workflow::builders::GetWorkflowOutputBuilder {
        crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::default()
    }
}

/// A builder for [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetWorkflowOutputBuilder {
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source_repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_branch_name: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<crate::types::WorkflowDefinition>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) run_mode: ::std::option::Option<crate::types::WorkflowRunMode>,
    pub(crate) status: ::std::option::Option<crate::types::WorkflowStatus>,
    _request_id: Option<String>,
}
impl GetWorkflowOutputBuilder {
    /// <p>The name of the space.</p>
    /// This field is required.
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input; self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// <p>The name of the project in the space.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the space.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input; self
    }
    /// <p>The name of the project in the space.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The ID of the workflow.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workflow.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The ID of the workflow.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the workflow.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the source repository where the workflow YAML is stored.</p>
    pub fn source_repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source repository where the workflow YAML is stored.</p>
    pub fn set_source_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_repository_name = input; self
    }
    /// <p>The name of the source repository where the workflow YAML is stored.</p>
    pub fn get_source_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_repository_name
    }
    /// <p>The name of the branch that contains the workflow YAML.</p>
    pub fn source_branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_branch_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the branch that contains the workflow YAML.</p>
    pub fn set_source_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_branch_name = input; self
    }
    /// <p>The name of the branch that contains the workflow YAML.</p>
    pub fn get_source_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_branch_name
    }
    /// <p>Information about the workflow definition file for the workflow.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::WorkflowDefinition) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the workflow definition file for the workflow.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::WorkflowDefinition>) -> Self {
        self.definition = input; self
    }
    /// <p>Information about the workflow definition file for the workflow.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::WorkflowDefinition> {
        &self.definition
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input; self
    }
    /// <p>The date and time the workflow was created, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input; self
    }
    /// <p>The date and time the workflow was last updated, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a> </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The behavior to use when multiple workflows occur at the same time. For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html">https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html</a> in the Amazon CodeCatalyst User Guide.</p>
    /// This field is required.
    pub fn run_mode(mut self, input: crate::types::WorkflowRunMode) -> Self {
        self.run_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The behavior to use when multiple workflows occur at the same time. For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html">https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html</a> in the Amazon CodeCatalyst User Guide.</p>
    pub fn set_run_mode(mut self, input: ::std::option::Option<crate::types::WorkflowRunMode>) -> Self {
        self.run_mode = input; self
    }
    /// <p>The behavior to use when multiple workflows occur at the same time. For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html">https://docs.aws.amazon.com/codecatalyst/latest/userguide/workflows-configure-runs.html</a> in the Amazon CodeCatalyst User Guide.</p>
    pub fn get_run_mode(&self) -> &::std::option::Option<crate::types::WorkflowRunMode> {
        &self.run_mode
    }
    /// <p>The status of the workflow.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::WorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the workflow.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkflowStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the workflow.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkflowStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`GetWorkflowOutput`](crate::operation::get_workflow::GetWorkflowOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`space_name`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::space_name)
    /// - [`project_name`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::project_name)
    /// - [`id`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::id)
    /// - [`name`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::name)
    /// - [`created_time`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::created_time)
    /// - [`last_updated_time`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::last_updated_time)
    /// - [`run_mode`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::run_mode)
    /// - [`status`](crate::operation::get_workflow::builders::GetWorkflowOutputBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_workflow::GetWorkflowOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::get_workflow::GetWorkflowOutput {
                space_name: self.space_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("space_name", "space_name was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                project_name: self.project_name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("project_name", "project_name was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                id: self.id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                name: self.name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("name", "name was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                source_repository_name: self.source_repository_name
                ,
                source_branch_name: self.source_branch_name
                ,
                definition: self.definition
                ,
                created_time: self.created_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("created_time", "created_time was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                last_updated_time: self.last_updated_time
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("last_updated_time", "last_updated_time was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                run_mode: self.run_mode
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("run_mode", "run_mode was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                status: self.status
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("status", "status was not specified but it is required when building GetWorkflowOutput")
                    )?
                ,
                _request_id: self._request_id,
            }
        )
    }
}

