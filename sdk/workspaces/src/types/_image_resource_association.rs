// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the association between an application and an image resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageResourceAssociation  {
    /// <p>The identifier of the associated resource.</p>
    pub associated_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource type of the associated resources.</p>
    pub associated_resource_type: ::std::option::Option<crate::types::ImageAssociatedResourceType>,
    /// <p>The time the association is created.</p>
    pub created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the association status was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the image.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the image resource association.</p>
    pub state: ::std::option::Option<crate::types::AssociationState>,
    /// <p>The reason the association deployment failed.</p>
    pub state_reason: ::std::option::Option<crate::types::AssociationStateReason>,
}
impl  ImageResourceAssociation  {
    /// <p>The identifier of the associated resource.</p>
    pub fn associated_resource_id(&self) -> ::std::option::Option<& str> {
        self.associated_resource_id.as_deref()
    }
    /// <p>The resource type of the associated resources.</p>
    pub fn associated_resource_type(&self) -> ::std::option::Option<& crate::types::ImageAssociatedResourceType> {
        self.associated_resource_type.as_ref()
    }
    /// <p>The time the association is created.</p>
    pub fn created(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The time the association status was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The identifier of the image.</p>
    pub fn image_id(&self) -> ::std::option::Option<& str> {
        self.image_id.as_deref()
    }
    /// <p>The status of the image resource association.</p>
    pub fn state(&self) -> ::std::option::Option<& crate::types::AssociationState> {
        self.state.as_ref()
    }
    /// <p>The reason the association deployment failed.</p>
    pub fn state_reason(&self) -> ::std::option::Option<& crate::types::AssociationStateReason> {
        self.state_reason.as_ref()
    }
}
impl ImageResourceAssociation {
    /// Creates a new builder-style object to manufacture [`ImageResourceAssociation`](crate::types::ImageResourceAssociation).
    pub fn builder() -> crate::types::builders::ImageResourceAssociationBuilder {
        crate::types::builders::ImageResourceAssociationBuilder::default()
    }
}

/// A builder for [`ImageResourceAssociation`](crate::types::ImageResourceAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageResourceAssociationBuilder {
    pub(crate) associated_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) associated_resource_type: ::std::option::Option<crate::types::ImageAssociatedResourceType>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::AssociationState>,
    pub(crate) state_reason: ::std::option::Option<crate::types::AssociationStateReason>,
}
impl ImageResourceAssociationBuilder {
    /// <p>The identifier of the associated resource.</p>
    pub fn associated_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn set_associated_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_resource_id = input; self
    }
    /// <p>The identifier of the associated resource.</p>
    pub fn get_associated_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_resource_id
    }
    /// <p>The resource type of the associated resources.</p>
    pub fn associated_resource_type(mut self, input: crate::types::ImageAssociatedResourceType) -> Self {
        self.associated_resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource type of the associated resources.</p>
    pub fn set_associated_resource_type(mut self, input: ::std::option::Option<crate::types::ImageAssociatedResourceType>) -> Self {
        self.associated_resource_type = input; self
    }
    /// <p>The resource type of the associated resources.</p>
    pub fn get_associated_resource_type(&self) -> &::std::option::Option<crate::types::ImageAssociatedResourceType> {
        &self.associated_resource_type
    }
    /// <p>The time the association is created.</p>
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the association is created.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input; self
    }
    /// <p>The time the association is created.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// <p>The time the association status was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the association status was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input; self
    }
    /// <p>The time the association status was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The identifier of the image.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the image.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input; self
    }
    /// <p>The identifier of the image.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The status of the image resource association.</p>
    pub fn state(mut self, input: crate::types::AssociationState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the image resource association.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::AssociationState>) -> Self {
        self.state = input; self
    }
    /// <p>The status of the image resource association.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::AssociationState> {
        &self.state
    }
    /// <p>The reason the association deployment failed.</p>
    pub fn state_reason(mut self, input: crate::types::AssociationStateReason) -> Self {
        self.state_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason the association deployment failed.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<crate::types::AssociationStateReason>) -> Self {
        self.state_reason = input; self
    }
    /// <p>The reason the association deployment failed.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<crate::types::AssociationStateReason> {
        &self.state_reason
    }
    /// Consumes the builder and constructs a [`ImageResourceAssociation`](crate::types::ImageResourceAssociation).
    pub fn build(self) -> crate::types::ImageResourceAssociation {
        crate::types::ImageResourceAssociation {
            associated_resource_id: self.associated_resource_id
            ,
            associated_resource_type: self.associated_resource_type
            ,
            created: self.created
            ,
            last_updated_time: self.last_updated_time
            ,
            image_id: self.image_id
            ,
            state: self.state
            ,
            state_reason: self.state_reason
            ,
        }
    }
}

