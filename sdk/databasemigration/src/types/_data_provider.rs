// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines a data provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataProvider  {
    /// <p>The name of the data provider.</p>
    pub data_provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) string that uniquely identifies the data provider.</p>
    pub data_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time the data provider was created.</p>
    pub data_provider_creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A description of the data provider. Descriptions can have up to 31 characters. A description can contain only ASCII letters, digits, and hyphens ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens, and can only begin with a letter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The settings in JSON format for a data provider.</p>
    pub settings: ::std::option::Option<crate::types::DataProviderSettings>,
}
impl  DataProvider  {
    /// <p>The name of the data provider.</p>
    pub fn data_provider_name(&self) -> ::std::option::Option<& str> {
        self.data_provider_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) string that uniquely identifies the data provider.</p>
    pub fn data_provider_arn(&self) -> ::std::option::Option<& str> {
        self.data_provider_arn.as_deref()
    }
    /// <p>The time the data provider was created.</p>
    pub fn data_provider_creation_time(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.data_provider_creation_time.as_ref()
    }
    /// <p>A description of the data provider. Descriptions can have up to 31 characters. A description can contain only ASCII letters, digits, and hyphens ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens, and can only begin with a letter.</p>
    pub fn description(&self) -> ::std::option::Option<& str> {
        self.description.as_deref()
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn engine(&self) -> ::std::option::Option<& str> {
        self.engine.as_deref()
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn settings(&self) -> ::std::option::Option<& crate::types::DataProviderSettings> {
        self.settings.as_ref()
    }
}
impl DataProvider {
    /// Creates a new builder-style object to manufacture [`DataProvider`](crate::types::DataProvider).
    pub fn builder() -> crate::types::builders::DataProviderBuilder {
        crate::types::builders::DataProviderBuilder::default()
    }
}

/// A builder for [`DataProvider`](crate::types::DataProvider).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataProviderBuilder {
    pub(crate) data_provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_provider_creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) settings: ::std::option::Option<crate::types::DataProviderSettings>,
}
impl DataProviderBuilder {
    /// <p>The name of the data provider.</p>
    pub fn data_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data provider.</p>
    pub fn set_data_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_provider_name = input; self
    }
    /// <p>The name of the data provider.</p>
    pub fn get_data_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_provider_name
    }
    /// <p>The Amazon Resource Name (ARN) string that uniquely identifies the data provider.</p>
    pub fn data_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) string that uniquely identifies the data provider.</p>
    pub fn set_data_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_provider_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) string that uniquely identifies the data provider.</p>
    pub fn get_data_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_provider_arn
    }
    /// <p>The time the data provider was created.</p>
    pub fn data_provider_creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.data_provider_creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the data provider was created.</p>
    pub fn set_data_provider_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.data_provider_creation_time = input; self
    }
    /// <p>The time the data provider was created.</p>
    pub fn get_data_provider_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.data_provider_creation_time
    }
    /// <p>A description of the data provider. Descriptions can have up to 31 characters. A description can contain only ASCII letters, digits, and hyphens ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens, and can only begin with a letter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the data provider. Descriptions can have up to 31 characters. A description can contain only ASCII letters, digits, and hyphens ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens, and can only begin with a letter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input; self
    }
    /// <p>A description of the data provider. Descriptions can have up to 31 characters. A description can contain only ASCII letters, digits, and hyphens ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens, and can only begin with a letter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input; self
    }
    /// <p>The type of database engine for the data provider. Valid values include <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>, <code>"sqlserver"</code>, <code>redshift</code>, <code>mariadb</code>, <code>mongodb</code>, and <code>docdb</code>. A value of <code>"aurora"</code> represents Amazon Aurora MySQL-Compatible Edition.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn settings(mut self, input: crate::types::DataProviderSettings) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<crate::types::DataProviderSettings>) -> Self {
        self.settings = input; self
    }
    /// <p>The settings in JSON format for a data provider.</p>
    pub fn get_settings(&self) -> &::std::option::Option<crate::types::DataProviderSettings> {
        &self.settings
    }
    /// Consumes the builder and constructs a [`DataProvider`](crate::types::DataProvider).
    pub fn build(self) -> crate::types::DataProvider {
        crate::types::DataProvider {
            data_provider_name: self.data_provider_name
            ,
            data_provider_arn: self.data_provider_arn
            ,
            data_provider_creation_time: self.data_provider_creation_time
            ,
            description: self.description
            ,
            engine: self.engine
            ,
            settings: self.settings
            ,
        }
    }
}

