// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines a data provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum DataProviderSettings {
    /// <p>Provides information that defines a DocumentDB data provider.</p>
    DocDbSettings(crate::types::DocDbDataProviderSettings),
    /// <p>Provides information that defines a MariaDB data provider.</p>
    MariaDbSettings(crate::types::MariaDbDataProviderSettings),
    /// <p>Provides information that defines a Microsoft SQL Server data provider.</p>
    MicrosoftSqlServerSettings(crate::types::MicrosoftSqlServerDataProviderSettings),
    /// <p>Provides information that defines a MongoDB data provider.</p>
    MongoDbSettings(crate::types::MongoDbDataProviderSettings),
    /// <p>Provides information that defines a MySQL data provider.</p>
    MySqlSettings(crate::types::MySqlDataProviderSettings),
    /// <p>Provides information that defines an Oracle data provider.</p>
    OracleSettings(crate::types::OracleDataProviderSettings),
    /// <p>Provides information that defines a PostgreSQL data provider.</p>
    PostgreSqlSettings(crate::types::PostgreSqlDataProviderSettings),
    /// <p>Provides information that defines an Amazon Redshift data provider.</p>
    RedshiftSettings(crate::types::RedshiftDataProviderSettings),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DataProviderSettings {
    /// Tries to convert the enum instance into [`DocDbSettings`](crate::types::DataProviderSettings::DocDbSettings), extracting the inner [`DocDbDataProviderSettings`](crate::types::DocDbDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_doc_db_settings(&self) -> ::std::result::Result<&crate::types::DocDbDataProviderSettings, &Self> {
        if let DataProviderSettings::DocDbSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`DocDbSettings`](crate::types::DataProviderSettings::DocDbSettings).
    pub fn is_doc_db_settings(&self) -> bool {
        self.as_doc_db_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`MariaDbSettings`](crate::types::DataProviderSettings::MariaDbSettings), extracting the inner [`MariaDbDataProviderSettings`](crate::types::MariaDbDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_maria_db_settings(&self) -> ::std::result::Result<&crate::types::MariaDbDataProviderSettings, &Self> {
        if let DataProviderSettings::MariaDbSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`MariaDbSettings`](crate::types::DataProviderSettings::MariaDbSettings).
    pub fn is_maria_db_settings(&self) -> bool {
        self.as_maria_db_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`MicrosoftSqlServerSettings`](crate::types::DataProviderSettings::MicrosoftSqlServerSettings), extracting the inner [`MicrosoftSqlServerDataProviderSettings`](crate::types::MicrosoftSqlServerDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_microsoft_sql_server_settings(&self) -> ::std::result::Result<&crate::types::MicrosoftSqlServerDataProviderSettings, &Self> {
        if let DataProviderSettings::MicrosoftSqlServerSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`MicrosoftSqlServerSettings`](crate::types::DataProviderSettings::MicrosoftSqlServerSettings).
    pub fn is_microsoft_sql_server_settings(&self) -> bool {
        self.as_microsoft_sql_server_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`MongoDbSettings`](crate::types::DataProviderSettings::MongoDbSettings), extracting the inner [`MongoDbDataProviderSettings`](crate::types::MongoDbDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mongo_db_settings(&self) -> ::std::result::Result<&crate::types::MongoDbDataProviderSettings, &Self> {
        if let DataProviderSettings::MongoDbSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`MongoDbSettings`](crate::types::DataProviderSettings::MongoDbSettings).
    pub fn is_mongo_db_settings(&self) -> bool {
        self.as_mongo_db_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`MySqlSettings`](crate::types::DataProviderSettings::MySqlSettings), extracting the inner [`MySqlDataProviderSettings`](crate::types::MySqlDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_my_sql_settings(&self) -> ::std::result::Result<&crate::types::MySqlDataProviderSettings, &Self> {
        if let DataProviderSettings::MySqlSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`MySqlSettings`](crate::types::DataProviderSettings::MySqlSettings).
    pub fn is_my_sql_settings(&self) -> bool {
        self.as_my_sql_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`OracleSettings`](crate::types::DataProviderSettings::OracleSettings), extracting the inner [`OracleDataProviderSettings`](crate::types::OracleDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_oracle_settings(&self) -> ::std::result::Result<&crate::types::OracleDataProviderSettings, &Self> {
        if let DataProviderSettings::OracleSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`OracleSettings`](crate::types::DataProviderSettings::OracleSettings).
    pub fn is_oracle_settings(&self) -> bool {
        self.as_oracle_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`PostgreSqlSettings`](crate::types::DataProviderSettings::PostgreSqlSettings), extracting the inner [`PostgreSqlDataProviderSettings`](crate::types::PostgreSqlDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_postgre_sql_settings(&self) -> ::std::result::Result<&crate::types::PostgreSqlDataProviderSettings, &Self> {
        if let DataProviderSettings::PostgreSqlSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`PostgreSqlSettings`](crate::types::DataProviderSettings::PostgreSqlSettings).
    pub fn is_postgre_sql_settings(&self) -> bool {
        self.as_postgre_sql_settings().is_ok()
    }
    /// Tries to convert the enum instance into [`RedshiftSettings`](crate::types::DataProviderSettings::RedshiftSettings), extracting the inner [`RedshiftDataProviderSettings`](crate::types::RedshiftDataProviderSettings).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_redshift_settings(&self) -> ::std::result::Result<&crate::types::RedshiftDataProviderSettings, &Self> {
        if let DataProviderSettings::RedshiftSettings(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`RedshiftSettings`](crate::types::DataProviderSettings::RedshiftSettings).
    pub fn is_redshift_settings(&self) -> bool {
        self.as_redshift_settings().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

