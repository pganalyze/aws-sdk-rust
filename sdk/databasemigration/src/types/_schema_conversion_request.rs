// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a schema conversion action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchemaConversionRequest  {
    /// <p>The schema conversion action status.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the schema conversion action.</p>
    pub request_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The migration project ARN.</p>
    pub migration_project_arn: ::std::option::Option<::std::string::String>,
    /// <p>Provides error information about a project.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetails>,
    /// <p>Provides information about a metadata model assessment exported to SQL.</p>
    pub export_sql_details: ::std::option::Option<crate::types::ExportSqlDetails>,
}
impl  SchemaConversionRequest  {
    /// <p>The schema conversion action status.</p>
    pub fn status(&self) -> ::std::option::Option<& str> {
        self.status.as_deref()
    }
    /// <p>The identifier for the schema conversion action.</p>
    pub fn request_identifier(&self) -> ::std::option::Option<& str> {
        self.request_identifier.as_deref()
    }
    /// <p>The migration project ARN.</p>
    pub fn migration_project_arn(&self) -> ::std::option::Option<& str> {
        self.migration_project_arn.as_deref()
    }
    /// <p>Provides error information about a project.</p>
    pub fn error(&self) -> ::std::option::Option<& crate::types::ErrorDetails> {
        self.error.as_ref()
    }
    /// <p>Provides information about a metadata model assessment exported to SQL.</p>
    pub fn export_sql_details(&self) -> ::std::option::Option<& crate::types::ExportSqlDetails> {
        self.export_sql_details.as_ref()
    }
}
impl SchemaConversionRequest {
    /// Creates a new builder-style object to manufacture [`SchemaConversionRequest`](crate::types::SchemaConversionRequest).
    pub fn builder() -> crate::types::builders::SchemaConversionRequestBuilder {
        crate::types::builders::SchemaConversionRequestBuilder::default()
    }
}

/// A builder for [`SchemaConversionRequest`](crate::types::SchemaConversionRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SchemaConversionRequestBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) request_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) migration_project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetails>,
    pub(crate) export_sql_details: ::std::option::Option<crate::types::ExportSqlDetails>,
}
impl SchemaConversionRequestBuilder {
    /// <p>The schema conversion action status.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema conversion action status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input; self
    }
    /// <p>The schema conversion action status.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The identifier for the schema conversion action.</p>
    pub fn request_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the schema conversion action.</p>
    pub fn set_request_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_identifier = input; self
    }
    /// <p>The identifier for the schema conversion action.</p>
    pub fn get_request_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_identifier
    }
    /// <p>The migration project ARN.</p>
    pub fn migration_project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.migration_project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The migration project ARN.</p>
    pub fn set_migration_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.migration_project_arn = input; self
    }
    /// <p>The migration project ARN.</p>
    pub fn get_migration_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.migration_project_arn
    }
    /// <p>Provides error information about a project.</p>
    pub fn error(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides error information about a project.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error = input; self
    }
    /// <p>Provides error information about a project.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error
    }
    /// <p>Provides information about a metadata model assessment exported to SQL.</p>
    pub fn export_sql_details(mut self, input: crate::types::ExportSqlDetails) -> Self {
        self.export_sql_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about a metadata model assessment exported to SQL.</p>
    pub fn set_export_sql_details(mut self, input: ::std::option::Option<crate::types::ExportSqlDetails>) -> Self {
        self.export_sql_details = input; self
    }
    /// <p>Provides information about a metadata model assessment exported to SQL.</p>
    pub fn get_export_sql_details(&self) -> &::std::option::Option<crate::types::ExportSqlDetails> {
        &self.export_sql_details
    }
    /// Consumes the builder and constructs a [`SchemaConversionRequest`](crate::types::SchemaConversionRequest).
    pub fn build(self) -> crate::types::SchemaConversionRequest {
        crate::types::SchemaConversionRequest {
            status: self.status
            ,
            request_identifier: self.request_identifier
            ,
            migration_project_arn: self.migration_project_arn
            ,
            error: self.error
            ,
            export_sql_details: self.export_sql_details
            ,
        }
    }
}

