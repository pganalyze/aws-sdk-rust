// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that defines a PostgreSQL data provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PostgreSqlDataProviderSettings  {
    /// <p>The name of the PostgreSQL server.</p>
    pub server_name: ::std::option::Option<::std::string::String>,
    /// <p>The port value for the PostgreSQL data provider.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The database name on the PostgreSQL data provider.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The SSL mode used to connect to the PostgreSQL data provider. The default value is <code>none</code>.</p>
    pub ssl_mode: ::std::option::Option<crate::types::DmsSslModeValue>,
    /// <p>The Amazon Resource Name (ARN) of the certificate used for SSL connection.</p>
    pub certificate_arn: ::std::option::Option<::std::string::String>,
}
impl  PostgreSqlDataProviderSettings  {
    /// <p>The name of the PostgreSQL server.</p>
    pub fn server_name(&self) -> ::std::option::Option<& str> {
        self.server_name.as_deref()
    }
    /// <p>The port value for the PostgreSQL data provider.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The database name on the PostgreSQL data provider.</p>
    pub fn database_name(&self) -> ::std::option::Option<& str> {
        self.database_name.as_deref()
    }
    /// <p>The SSL mode used to connect to the PostgreSQL data provider. The default value is <code>none</code>.</p>
    pub fn ssl_mode(&self) -> ::std::option::Option<& crate::types::DmsSslModeValue> {
        self.ssl_mode.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate used for SSL connection.</p>
    pub fn certificate_arn(&self) -> ::std::option::Option<& str> {
        self.certificate_arn.as_deref()
    }
}
impl PostgreSqlDataProviderSettings {
    /// Creates a new builder-style object to manufacture [`PostgreSqlDataProviderSettings`](crate::types::PostgreSqlDataProviderSettings).
    pub fn builder() -> crate::types::builders::PostgreSqlDataProviderSettingsBuilder {
        crate::types::builders::PostgreSqlDataProviderSettingsBuilder::default()
    }
}

/// A builder for [`PostgreSqlDataProviderSettings`](crate::types::PostgreSqlDataProviderSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PostgreSqlDataProviderSettingsBuilder {
    pub(crate) server_name: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) ssl_mode: ::std::option::Option<crate::types::DmsSslModeValue>,
    pub(crate) certificate_arn: ::std::option::Option<::std::string::String>,
}
impl PostgreSqlDataProviderSettingsBuilder {
    /// <p>The name of the PostgreSQL server.</p>
    pub fn server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the PostgreSQL server.</p>
    pub fn set_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_name = input; self
    }
    /// <p>The name of the PostgreSQL server.</p>
    pub fn get_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_name
    }
    /// <p>The port value for the PostgreSQL data provider.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port value for the PostgreSQL data provider.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input; self
    }
    /// <p>The port value for the PostgreSQL data provider.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The database name on the PostgreSQL data provider.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name on the PostgreSQL data provider.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input; self
    }
    /// <p>The database name on the PostgreSQL data provider.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The SSL mode used to connect to the PostgreSQL data provider. The default value is <code>none</code>.</p>
    pub fn ssl_mode(mut self, input: crate::types::DmsSslModeValue) -> Self {
        self.ssl_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SSL mode used to connect to the PostgreSQL data provider. The default value is <code>none</code>.</p>
    pub fn set_ssl_mode(mut self, input: ::std::option::Option<crate::types::DmsSslModeValue>) -> Self {
        self.ssl_mode = input; self
    }
    /// <p>The SSL mode used to connect to the PostgreSQL data provider. The default value is <code>none</code>.</p>
    pub fn get_ssl_mode(&self) -> &::std::option::Option<crate::types::DmsSslModeValue> {
        &self.ssl_mode
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate used for SSL connection.</p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate used for SSL connection.</p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate used for SSL connection.</p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_arn
    }
    /// Consumes the builder and constructs a [`PostgreSqlDataProviderSettings`](crate::types::PostgreSqlDataProviderSettings).
    pub fn build(self) -> crate::types::PostgreSqlDataProviderSettings {
        crate::types::PostgreSqlDataProviderSettings {
            server_name: self.server_name
            ,
            port: self.port
            ,
            database_name: self.database_name
            ,
            ssl_mode: self.ssl_mode
            ,
            certificate_arn: self.certificate_arn
            ,
        }
    }
}

