// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_db_snapshot_tenant_database(decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder) -> Result<crate::types::DbSnapshotTenantDatabase, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::DbSnapshotTenantDatabase::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DBSnapshotIdentifier") /* DBSnapshotIdentifier com.amazonaws.rds#DBSnapshotTenantDatabase$DBSnapshotIdentifier */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_snapshot_identifier(var_1);
            }
            ,
            s if s.matches("DBInstanceIdentifier") /* DBInstanceIdentifier com.amazonaws.rds#DBSnapshotTenantDatabase$DBInstanceIdentifier */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_instance_identifier(var_2);
            }
            ,
            s if s.matches("DbiResourceId") /* DbiResourceId com.amazonaws.rds#DBSnapshotTenantDatabase$DbiResourceId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dbi_resource_id(var_3);
            }
            ,
            s if s.matches("EngineName") /* EngineName com.amazonaws.rds#DBSnapshotTenantDatabase$EngineName */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_engine_name(var_4);
            }
            ,
            s if s.matches("SnapshotType") /* SnapshotType com.amazonaws.rds#DBSnapshotTenantDatabase$SnapshotType */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_type(var_5);
            }
            ,
            s if s.matches("TenantDatabaseCreateTime") /* TenantDatabaseCreateTime com.amazonaws.rds#DBSnapshotTenantDatabase$TenantDatabaseCreateTime */ =>  {
                let var_6 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.rds#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_tenant_database_create_time(var_6);
            }
            ,
            s if s.matches("TenantDBName") /* TenantDBName com.amazonaws.rds#DBSnapshotTenantDatabase$TenantDBName */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tenant_db_name(var_7);
            }
            ,
            s if s.matches("MasterUsername") /* MasterUsername com.amazonaws.rds#DBSnapshotTenantDatabase$MasterUsername */ =>  {
                let var_8 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_master_username(var_8);
            }
            ,
            s if s.matches("TenantDatabaseResourceId") /* TenantDatabaseResourceId com.amazonaws.rds#DBSnapshotTenantDatabase$TenantDatabaseResourceId */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_tenant_database_resource_id(var_9);
            }
            ,
            s if s.matches("CharacterSetName") /* CharacterSetName com.amazonaws.rds#DBSnapshotTenantDatabase$CharacterSetName */ =>  {
                let var_10 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_character_set_name(var_10);
            }
            ,
            s if s.matches("DBSnapshotTenantDatabaseARN") /* DBSnapshotTenantDatabaseARN com.amazonaws.rds#DBSnapshotTenantDatabase$DBSnapshotTenantDatabaseARN */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_db_snapshot_tenant_database_arn(var_11);
            }
            ,
            s if s.matches("NcharCharacterSetName") /* NcharCharacterSetName com.amazonaws.rds#DBSnapshotTenantDatabase$NcharCharacterSetName */ =>  {
                let var_12 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_nchar_character_set_name(var_12);
            }
            ,
            s if s.matches("TagList") /* TagList com.amazonaws.rds#DBSnapshotTenantDatabase$TagList */ =>  {
                let var_13 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_list(var_13);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

