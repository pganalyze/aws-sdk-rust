// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTenantDatabasesInput  {
    /// <p>The user-supplied DB instance identifier, which must match the identifier of an existing instance owned by the Amazon Web Services account. This parameter isn't case-sensitive.</p>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The user-supplied tenant database name, which must match the name of an existing tenant database on the specified DB instance owned by your Amazon Web Services account. This parameter isn’t case-sensitive.</p>
    pub tenant_db_name: ::std::option::Option<::std::string::String>,
    /// <p>A filter that specifies one or more database tenants to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about the tenants contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec::<crate::types::Filter>>,
    /// <p>An optional pagination token provided by a previous <code>DescribeTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub max_records: ::std::option::Option<i32>,
}
impl  DescribeTenantDatabasesInput  {
    /// <p>The user-supplied DB instance identifier, which must match the identifier of an existing instance owned by the Amazon Web Services account. This parameter isn't case-sensitive.</p>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<& str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The user-supplied tenant database name, which must match the name of an existing tenant database on the specified DB instance owned by your Amazon Web Services account. This parameter isn’t case-sensitive.</p>
    pub fn tenant_db_name(&self) -> ::std::option::Option<& str> {
        self.tenant_db_name.as_deref()
    }
    /// <p>A filter that specifies one or more database tenants to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about the tenants contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// </ul>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> & [crate::types::Filter] {
        self.filters.as_deref()
        .unwrap_or_default()
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<& str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
}
impl DescribeTenantDatabasesInput {
    /// Creates a new builder-style object to manufacture [`DescribeTenantDatabasesInput`](crate::operation::describe_tenant_databases::DescribeTenantDatabasesInput).
    pub fn builder() -> crate::operation::describe_tenant_databases::builders::DescribeTenantDatabasesInputBuilder {
        crate::operation::describe_tenant_databases::builders::DescribeTenantDatabasesInputBuilder::default()
    }
}

/// A builder for [`DescribeTenantDatabasesInput`](crate::operation::describe_tenant_databases::DescribeTenantDatabasesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeTenantDatabasesInputBuilder {
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_db_name: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec::<crate::types::Filter>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
}
impl DescribeTenantDatabasesInputBuilder {
    /// <p>The user-supplied DB instance identifier, which must match the identifier of an existing instance owned by the Amazon Web Services account. This parameter isn't case-sensitive.</p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-supplied DB instance identifier, which must match the identifier of an existing instance owned by the Amazon Web Services account. This parameter isn't case-sensitive.</p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input; self
    }
    /// <p>The user-supplied DB instance identifier, which must match the identifier of an existing instance owned by the Amazon Web Services account. This parameter isn't case-sensitive.</p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p>The user-supplied tenant database name, which must match the name of an existing tenant database on the specified DB instance owned by your Amazon Web Services account. This parameter isn’t case-sensitive.</p>
    pub fn tenant_db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_db_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-supplied tenant database name, which must match the name of an existing tenant database on the specified DB instance owned by your Amazon Web Services account. This parameter isn’t case-sensitive.</p>
    pub fn set_tenant_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_db_name = input; self
    }
    /// <p>The user-supplied tenant database name, which must match the name of an existing tenant database on the specified DB instance owned by your Amazon Web Services account. This parameter isn’t case-sensitive.</p>
    pub fn get_tenant_db_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_db_name
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more database tenants to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about the tenants contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
                        v.push(input);
                        self.filters = ::std::option::Option::Some(v);
                        self
    }
    /// <p>A filter that specifies one or more database tenants to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about the tenants contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Filter>>) -> Self {
        self.filters = input; self
    }
    /// <p>A filter that specifies one or more database tenants to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about the tenants contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Filter>> {
        &self.filters
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input; self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input; self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// Consumes the builder and constructs a [`DescribeTenantDatabasesInput`](crate::operation::describe_tenant_databases::DescribeTenantDatabasesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::describe_tenant_databases::DescribeTenantDatabasesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::describe_tenant_databases::DescribeTenantDatabasesInput {
                db_instance_identifier: self.db_instance_identifier
                ,
                tenant_db_name: self.tenant_db_name
                ,
                filters: self.filters
                ,
                marker: self.marker
                ,
                max_records: self.max_records
                ,
            }
        )
    }
}

