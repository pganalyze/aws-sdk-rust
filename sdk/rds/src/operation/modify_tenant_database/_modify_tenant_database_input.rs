// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ModifyTenantDatabaseInput  {
    /// <p>The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing DB instance.</p> </li> 
    /// </ul>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing tenant database.</p> </li> 
    /// </ul>
    pub tenant_db_name: ::std::option::Option<::std::string::String>,
    /// <p>The new password for the master user of the specified tenant database in your DB instance.</p> <note> 
    /// <p>Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> 
    /// </note> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can include any printable ASCII character except <code>/</code>, <code>"</code> (double quote), <code>@</code>, <code>&amp;</code> (ampersand), and <code>'</code> (single quote).</p> </li> 
    /// </ul> 
    /// <p>Length constraints:</p> 
    /// <ul> 
    /// <li> <p>Must contain between 8 and 30 characters. </p> </li> 
    /// </ul>
    pub master_user_password: ::std::option::Option<::std::string::String>,
    /// <p>The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can't be the string null or any other reserved word.</p> </li> 
    /// <li> <p>Can't be longer than 8 characters.</p> </li> 
    /// </ul>
    pub new_tenant_db_name: ::std::option::Option<::std::string::String>,
}
impl  ModifyTenantDatabaseInput  {
    /// <p>The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing DB instance.</p> </li> 
    /// </ul>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<& str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing tenant database.</p> </li> 
    /// </ul>
    pub fn tenant_db_name(&self) -> ::std::option::Option<& str> {
        self.tenant_db_name.as_deref()
    }
    /// <p>The new password for the master user of the specified tenant database in your DB instance.</p> <note> 
    /// <p>Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> 
    /// </note> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can include any printable ASCII character except <code>/</code>, <code>"</code> (double quote), <code>@</code>, <code>&amp;</code> (ampersand), and <code>'</code> (single quote).</p> </li> 
    /// </ul> 
    /// <p>Length constraints:</p> 
    /// <ul> 
    /// <li> <p>Must contain between 8 and 30 characters. </p> </li> 
    /// </ul>
    pub fn master_user_password(&self) -> ::std::option::Option<& str> {
        self.master_user_password.as_deref()
    }
    /// <p>The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can't be the string null or any other reserved word.</p> </li> 
    /// <li> <p>Can't be longer than 8 characters.</p> </li> 
    /// </ul>
    pub fn new_tenant_db_name(&self) -> ::std::option::Option<& str> {
        self.new_tenant_db_name.as_deref()
    }
}
impl  ::std::fmt::Debug for ModifyTenantDatabaseInput  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTenantDatabaseInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("tenant_db_name", &self.tenant_db_name);
        formatter.field("master_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("new_tenant_db_name", &self.new_tenant_db_name);
        formatter.finish()
    }
}
impl ModifyTenantDatabaseInput {
    /// Creates a new builder-style object to manufacture [`ModifyTenantDatabaseInput`](crate::operation::modify_tenant_database::ModifyTenantDatabaseInput).
    pub fn builder() -> crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseInputBuilder {
        crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseInputBuilder::default()
    }
}

/// A builder for [`ModifyTenantDatabaseInput`](crate::operation::modify_tenant_database::ModifyTenantDatabaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ModifyTenantDatabaseInputBuilder {
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_db_name: ::std::option::Option<::std::string::String>,
    pub(crate) master_user_password: ::std::option::Option<::std::string::String>,
    pub(crate) new_tenant_db_name: ::std::option::Option<::std::string::String>,
}
impl ModifyTenantDatabaseInputBuilder {
    /// <p>The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing DB instance.</p> </li> 
    /// </ul>
    /// This field is required.
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing DB instance.</p> </li> 
    /// </ul>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input; self
    }
    /// <p>The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing DB instance.</p> </li> 
    /// </ul>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p>The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing tenant database.</p> </li> 
    /// </ul>
    /// This field is required.
    pub fn tenant_db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_db_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing tenant database.</p> </li> 
    /// </ul>
    pub fn set_tenant_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_db_name = input; self
    }
    /// <p>The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Must match the identifier of an existing tenant database.</p> </li> 
    /// </ul>
    pub fn get_tenant_db_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_db_name
    }
    /// <p>The new password for the master user of the specified tenant database in your DB instance.</p> <note> 
    /// <p>Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> 
    /// </note> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can include any printable ASCII character except <code>/</code>, <code>"</code> (double quote), <code>@</code>, <code>&amp;</code> (ampersand), and <code>'</code> (single quote).</p> </li> 
    /// </ul> 
    /// <p>Length constraints:</p> 
    /// <ul> 
    /// <li> <p>Must contain between 8 and 30 characters. </p> </li> 
    /// </ul>
    pub fn master_user_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_user_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new password for the master user of the specified tenant database in your DB instance.</p> <note> 
    /// <p>Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> 
    /// </note> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can include any printable ASCII character except <code>/</code>, <code>"</code> (double quote), <code>@</code>, <code>&amp;</code> (ampersand), and <code>'</code> (single quote).</p> </li> 
    /// </ul> 
    /// <p>Length constraints:</p> 
    /// <ul> 
    /// <li> <p>Must contain between 8 and 30 characters. </p> </li> 
    /// </ul>
    pub fn set_master_user_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_user_password = input; self
    }
    /// <p>The new password for the master user of the specified tenant database in your DB instance.</p> <note> 
    /// <p>Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> 
    /// </note> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can include any printable ASCII character except <code>/</code>, <code>"</code> (double quote), <code>@</code>, <code>&amp;</code> (ampersand), and <code>'</code> (single quote).</p> </li> 
    /// </ul> 
    /// <p>Length constraints:</p> 
    /// <ul> 
    /// <li> <p>Must contain between 8 and 30 characters. </p> </li> 
    /// </ul>
    pub fn get_master_user_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_user_password
    }
    /// <p>The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can't be the string null or any other reserved word.</p> </li> 
    /// <li> <p>Can't be longer than 8 characters.</p> </li> 
    /// </ul>
    pub fn new_tenant_db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_tenant_db_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can't be the string null or any other reserved word.</p> </li> 
    /// <li> <p>Can't be longer than 8 characters.</p> </li> 
    /// </ul>
    pub fn set_new_tenant_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_tenant_db_name = input; self
    }
    /// <p>The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>Can't be the string null or any other reserved word.</p> </li> 
    /// <li> <p>Can't be longer than 8 characters.</p> </li> 
    /// </ul>
    pub fn get_new_tenant_db_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_tenant_db_name
    }
    /// Consumes the builder and constructs a [`ModifyTenantDatabaseInput`](crate::operation::modify_tenant_database::ModifyTenantDatabaseInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::modify_tenant_database::ModifyTenantDatabaseInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::modify_tenant_database::ModifyTenantDatabaseInput {
                db_instance_identifier: self.db_instance_identifier
                ,
                tenant_db_name: self.tenant_db_name
                ,
                master_user_password: self.master_user_password
                ,
                new_tenant_db_name: self.new_tenant_db_name
                ,
            }
        )
    }
}
impl ::std::fmt::Debug for ModifyTenantDatabaseInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTenantDatabaseInputBuilder");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("tenant_db_name", &self.tenant_db_name);
        formatter.field("master_user_password", &"*** Sensitive Data Redacted ***");
        formatter.field("new_tenant_db_name", &self.new_tenant_db_name);
        formatter.finish()
    }
}

