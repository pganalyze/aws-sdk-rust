// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDbSnapshotTenantDatabasesInput  {
    /// <p>The ID of the DB instance used to create the DB snapshots. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If supplied, must match the identifier of an existing <code>DBInstance</code>.</p> </li> 
    /// </ul>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of a DB snapshot that contains the tenant databases to describe. This value is stored as a lowercase string.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If you specify this parameter, the value must match the ID of an existing DB snapshot.</p> </li> 
    /// <li> <p>If you specify an automatic snapshot, you must also specify <code>SnapshotType</code>.</p> </li> 
    /// </ul>
    pub db_snapshot_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of DB snapshots to be returned. You can specify one of the following values:</p> 
    /// <ul> 
    /// <li> <p> <code>automated</code> – All DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>manual</code> – All DB snapshots that have been taken by my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>shared</code> – All manual DB snapshots that have been shared to my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>public</code> – All DB snapshots that have been marked as public.</p> </li> 
    /// <li> <p> <code>awsbackup</code> – All DB snapshots managed by the Amazon Web Services Backup service.</p> </li> 
    /// </ul>
    pub snapshot_type: ::std::option::Option<::std::string::String>,
    /// <p>A filter that specifies one or more tenant databases to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers. The results list only includes information about the tenant databases contained within the DB snapshots.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about snapshots containing tenant databases contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> 
    /// <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> 
    /// <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> 
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec::<crate::types::Filter>>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous <code>DescribeDBSnapshotTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A specific DB resource identifier to describe.</p>
    pub dbi_resource_id: ::std::option::Option<::std::string::String>,
}
impl  DescribeDbSnapshotTenantDatabasesInput  {
    /// <p>The ID of the DB instance used to create the DB snapshots. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If supplied, must match the identifier of an existing <code>DBInstance</code>.</p> </li> 
    /// </ul>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<& str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The ID of a DB snapshot that contains the tenant databases to describe. This value is stored as a lowercase string.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If you specify this parameter, the value must match the ID of an existing DB snapshot.</p> </li> 
    /// <li> <p>If you specify an automatic snapshot, you must also specify <code>SnapshotType</code>.</p> </li> 
    /// </ul>
    pub fn db_snapshot_identifier(&self) -> ::std::option::Option<& str> {
        self.db_snapshot_identifier.as_deref()
    }
    /// <p>The type of DB snapshots to be returned. You can specify one of the following values:</p> 
    /// <ul> 
    /// <li> <p> <code>automated</code> – All DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>manual</code> – All DB snapshots that have been taken by my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>shared</code> – All manual DB snapshots that have been shared to my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>public</code> – All DB snapshots that have been marked as public.</p> </li> 
    /// <li> <p> <code>awsbackup</code> – All DB snapshots managed by the Amazon Web Services Backup service.</p> </li> 
    /// </ul>
    pub fn snapshot_type(&self) -> ::std::option::Option<& str> {
        self.snapshot_type.as_deref()
    }
    /// <p>A filter that specifies one or more tenant databases to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers. The results list only includes information about the tenant databases contained within the DB snapshots.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about snapshots containing tenant databases contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> 
    /// <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> 
    /// <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> 
    /// </ul>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> & [crate::types::Filter] {
        self.filters.as_deref()
        .unwrap_or_default()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBSnapshotTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<& str> {
        self.marker.as_deref()
    }
    /// <p>A specific DB resource identifier to describe.</p>
    pub fn dbi_resource_id(&self) -> ::std::option::Option<& str> {
        self.dbi_resource_id.as_deref()
    }
}
impl DescribeDbSnapshotTenantDatabasesInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbSnapshotTenantDatabasesInput`](crate::operation::describe_db_snapshot_tenant_databases::DescribeDbSnapshotTenantDatabasesInput).
    pub fn builder() -> crate::operation::describe_db_snapshot_tenant_databases::builders::DescribeDbSnapshotTenantDatabasesInputBuilder {
        crate::operation::describe_db_snapshot_tenant_databases::builders::DescribeDbSnapshotTenantDatabasesInputBuilder::default()
    }
}

/// A builder for [`DescribeDbSnapshotTenantDatabasesInput`](crate::operation::describe_db_snapshot_tenant_databases::DescribeDbSnapshotTenantDatabasesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDbSnapshotTenantDatabasesInputBuilder {
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) db_snapshot_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_type: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec::<crate::types::Filter>>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) dbi_resource_id: ::std::option::Option<::std::string::String>,
}
impl DescribeDbSnapshotTenantDatabasesInputBuilder {
    /// <p>The ID of the DB instance used to create the DB snapshots. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If supplied, must match the identifier of an existing <code>DBInstance</code>.</p> </li> 
    /// </ul>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the DB instance used to create the DB snapshots. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If supplied, must match the identifier of an existing <code>DBInstance</code>.</p> </li> 
    /// </ul>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input; self
    }
    /// <p>The ID of the DB instance used to create the DB snapshots. This parameter isn't case-sensitive.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If supplied, must match the identifier of an existing <code>DBInstance</code>.</p> </li> 
    /// </ul>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p>The ID of a DB snapshot that contains the tenant databases to describe. This value is stored as a lowercase string.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If you specify this parameter, the value must match the ID of an existing DB snapshot.</p> </li> 
    /// <li> <p>If you specify an automatic snapshot, you must also specify <code>SnapshotType</code>.</p> </li> 
    /// </ul>
    pub fn db_snapshot_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_snapshot_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a DB snapshot that contains the tenant databases to describe. This value is stored as a lowercase string.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If you specify this parameter, the value must match the ID of an existing DB snapshot.</p> </li> 
    /// <li> <p>If you specify an automatic snapshot, you must also specify <code>SnapshotType</code>.</p> </li> 
    /// </ul>
    pub fn set_db_snapshot_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_snapshot_identifier = input; self
    }
    /// <p>The ID of a DB snapshot that contains the tenant databases to describe. This value is stored as a lowercase string.</p> 
    /// <p>Constraints:</p> 
    /// <ul> 
    /// <li> <p>If you specify this parameter, the value must match the ID of an existing DB snapshot.</p> </li> 
    /// <li> <p>If you specify an automatic snapshot, you must also specify <code>SnapshotType</code>.</p> </li> 
    /// </ul>
    pub fn get_db_snapshot_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_snapshot_identifier
    }
    /// <p>The type of DB snapshots to be returned. You can specify one of the following values:</p> 
    /// <ul> 
    /// <li> <p> <code>automated</code> – All DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>manual</code> – All DB snapshots that have been taken by my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>shared</code> – All manual DB snapshots that have been shared to my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>public</code> – All DB snapshots that have been marked as public.</p> </li> 
    /// <li> <p> <code>awsbackup</code> – All DB snapshots managed by the Amazon Web Services Backup service.</p> </li> 
    /// </ul>
    pub fn snapshot_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of DB snapshots to be returned. You can specify one of the following values:</p> 
    /// <ul> 
    /// <li> <p> <code>automated</code> – All DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>manual</code> – All DB snapshots that have been taken by my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>shared</code> – All manual DB snapshots that have been shared to my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>public</code> – All DB snapshots that have been marked as public.</p> </li> 
    /// <li> <p> <code>awsbackup</code> – All DB snapshots managed by the Amazon Web Services Backup service.</p> </li> 
    /// </ul>
    pub fn set_snapshot_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_type = input; self
    }
    /// <p>The type of DB snapshots to be returned. You can specify one of the following values:</p> 
    /// <ul> 
    /// <li> <p> <code>automated</code> – All DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>manual</code> – All DB snapshots that have been taken by my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>shared</code> – All manual DB snapshots that have been shared to my Amazon Web Services account.</p> </li> 
    /// <li> <p> <code>public</code> – All DB snapshots that have been marked as public.</p> </li> 
    /// <li> <p> <code>awsbackup</code> – All DB snapshots managed by the Amazon Web Services Backup service.</p> </li> 
    /// </ul>
    pub fn get_snapshot_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_type
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more tenant databases to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers. The results list only includes information about the tenant databases contained within the DB snapshots.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about snapshots containing tenant databases contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> 
    /// <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> 
    /// <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> 
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
                        v.push(input);
                        self.filters = ::std::option::Option::Some(v);
                        self
    }
    /// <p>A filter that specifies one or more tenant databases to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers. The results list only includes information about the tenant databases contained within the DB snapshots.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about snapshots containing tenant databases contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> 
    /// <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> 
    /// <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> 
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Filter>>) -> Self {
        self.filters = input; self
    }
    /// <p>A filter that specifies one or more tenant databases to describe.</p> 
    /// <p>Supported filters:</p> 
    /// <ul> 
    /// <li> <p> <code>tenant-db-name</code> - Tenant database names. The results list only includes information about the tenant databases that match these tenant DB names.</p> </li> 
    /// <li> <p> <code>tenant-database-resource-id</code> - Tenant database resource identifiers. The results list only includes information about the tenant databases contained within the DB snapshots.</p> </li> 
    /// <li> <p> <code>dbi-resource-id</code> - DB instance resource identifiers. The results list only includes information about snapshots containing tenant databases contained within the DB instances identified by these resource identifiers.</p> </li> 
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> 
    /// <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> 
    /// <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> 
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Filter>> {
        &self.filters
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input; self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBSnapshotTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBSnapshotTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input; self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBSnapshotTenantDatabases</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>A specific DB resource identifier to describe.</p>
    pub fn dbi_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dbi_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A specific DB resource identifier to describe.</p>
    pub fn set_dbi_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dbi_resource_id = input; self
    }
    /// <p>A specific DB resource identifier to describe.</p>
    pub fn get_dbi_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dbi_resource_id
    }
    /// Consumes the builder and constructs a [`DescribeDbSnapshotTenantDatabasesInput`](crate::operation::describe_db_snapshot_tenant_databases::DescribeDbSnapshotTenantDatabasesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::describe_db_snapshot_tenant_databases::DescribeDbSnapshotTenantDatabasesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::describe_db_snapshot_tenant_databases::DescribeDbSnapshotTenantDatabasesInput {
                db_instance_identifier: self.db_instance_identifier
                ,
                db_snapshot_identifier: self.db_snapshot_identifier
                ,
                snapshot_type: self.snapshot_type
                ,
                filters: self.filters
                ,
                max_records: self.max_records
                ,
                marker: self.marker
                ,
                dbi_resource_id: self.dbi_resource_id
                ,
            }
        )
    }
}

