// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_apps_output_output_next_token(input: &crate::operation::list_apps::ListAppsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_branches_output_output_next_token(input: &crate::operation::list_branches::ListBranchesOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_domain_associations_output_output_next_token(input: &crate::operation::list_domain_associations::ListDomainAssociationsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn reflens_list_jobs_output_output_next_token(input: &crate::operation::list_jobs::ListJobsOutput) -> ::std::option::Option<& ::std::string::String> {
                    let input = match &input.next_token {
                            ::std::option::Option::None => return ::std::option::Option::None,
                            ::std::option::Option::Some(t) => t
                        };
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_apps_output_output_apps(input: crate::operation::list_apps::ListAppsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::App>> {
                    let input = input.apps;
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_branches_output_output_branches(input: crate::operation::list_branches::ListBranchesOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::Branch>> {
                    let input = input.branches;
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_domain_associations_output_output_domain_associations(input: crate::operation::list_domain_associations::ListDomainAssociationsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::DomainAssociation>> {
                    let input = input.domain_associations;
::std::option::Option::Some(input)
                }

pub(crate) fn lens_list_jobs_output_output_job_summaries(input: crate::operation::list_jobs::ListJobsOutput) -> ::std::option::Option<::std::vec::Vec::<crate::types::JobSummary>> {
                    let input = input.job_summaries;
::std::option::Option::Some(input)
                }

