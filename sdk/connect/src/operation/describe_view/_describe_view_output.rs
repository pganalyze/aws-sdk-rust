// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeViewOutput  {
    /// <p>All view data is contained within the View object.</p>
    pub view: ::std::option::Option<crate::types::View>,
    _request_id: Option<String>,
}
impl  DescribeViewOutput  {
    /// <p>All view data is contained within the View object.</p>
    pub fn view(&self) -> ::std::option::Option<& crate::types::View> {
        self.view.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeViewOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DescribeViewOutput {
    /// Creates a new builder-style object to manufacture [`DescribeViewOutput`](crate::operation::describe_view::DescribeViewOutput).
    pub fn builder() -> crate::operation::describe_view::builders::DescribeViewOutputBuilder {
        crate::operation::describe_view::builders::DescribeViewOutputBuilder::default()
    }
}

/// A builder for [`DescribeViewOutput`](crate::operation::describe_view::DescribeViewOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeViewOutputBuilder {
    pub(crate) view: ::std::option::Option<crate::types::View>,
    _request_id: Option<String>,
}
impl DescribeViewOutputBuilder {
    /// <p>All view data is contained within the View object.</p>
    pub fn view(mut self, input: crate::types::View) -> Self {
        self.view = ::std::option::Option::Some(input);
        self
    }
    /// <p>All view data is contained within the View object.</p>
    pub fn set_view(mut self, input: ::std::option::Option<crate::types::View>) -> Self {
        self.view = input; self
    }
    /// <p>All view data is contained within the View object.</p>
    pub fn get_view(&self) -> &::std::option::Option<crate::types::View> {
        &self.view
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DescribeViewOutput`](crate::operation::describe_view::DescribeViewOutput).
    pub fn build(self) -> crate::operation::describe_view::DescribeViewOutput {
        crate::operation::describe_view::DescribeViewOutput {
            view: self.view
            ,
            _request_id: self._request_id,
        }
    }
}

