// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchPutContactOutput  {
    /// <p>List of requests for which contact was successfully created.</p>
    pub successful_request_list: ::std::option::Option<::std::vec::Vec::<crate::types::SuccessfulRequest>>,
    /// <p>List of requests for which contact creation failed.</p>
    pub failed_request_list: ::std::option::Option<::std::vec::Vec::<crate::types::FailedRequest>>,
    _request_id: Option<String>,
}
impl  BatchPutContactOutput  {
    /// <p>List of requests for which contact was successfully created.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.successful_request_list.is_none()`.
    pub fn successful_request_list(&self) -> & [crate::types::SuccessfulRequest] {
        self.successful_request_list.as_deref()
        .unwrap_or_default()
    }
    /// <p>List of requests for which contact creation failed.</p>
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_request_list.is_none()`.
    pub fn failed_request_list(&self) -> & [crate::types::FailedRequest] {
        self.failed_request_list.as_deref()
        .unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for BatchPutContactOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl BatchPutContactOutput {
    /// Creates a new builder-style object to manufacture [`BatchPutContactOutput`](crate::operation::batch_put_contact::BatchPutContactOutput).
    pub fn builder() -> crate::operation::batch_put_contact::builders::BatchPutContactOutputBuilder {
        crate::operation::batch_put_contact::builders::BatchPutContactOutputBuilder::default()
    }
}

/// A builder for [`BatchPutContactOutput`](crate::operation::batch_put_contact::BatchPutContactOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchPutContactOutputBuilder {
    pub(crate) successful_request_list: ::std::option::Option<::std::vec::Vec::<crate::types::SuccessfulRequest>>,
    pub(crate) failed_request_list: ::std::option::Option<::std::vec::Vec::<crate::types::FailedRequest>>,
    _request_id: Option<String>,
}
impl BatchPutContactOutputBuilder {
    /// Appends an item to `successful_request_list`.
    ///
    /// To override the contents of this collection use [`set_successful_request_list`](Self::set_successful_request_list).
    ///
    /// <p>List of requests for which contact was successfully created.</p>
    pub fn successful_request_list(mut self, input: crate::types::SuccessfulRequest) -> Self {
        let mut v = self.successful_request_list.unwrap_or_default();
                        v.push(input);
                        self.successful_request_list = ::std::option::Option::Some(v);
                        self
    }
    /// <p>List of requests for which contact was successfully created.</p>
    pub fn set_successful_request_list(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::SuccessfulRequest>>) -> Self {
        self.successful_request_list = input; self
    }
    /// <p>List of requests for which contact was successfully created.</p>
    pub fn get_successful_request_list(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::SuccessfulRequest>> {
        &self.successful_request_list
    }
    /// Appends an item to `failed_request_list`.
    ///
    /// To override the contents of this collection use [`set_failed_request_list`](Self::set_failed_request_list).
    ///
    /// <p>List of requests for which contact creation failed.</p>
    pub fn failed_request_list(mut self, input: crate::types::FailedRequest) -> Self {
        let mut v = self.failed_request_list.unwrap_or_default();
                        v.push(input);
                        self.failed_request_list = ::std::option::Option::Some(v);
                        self
    }
    /// <p>List of requests for which contact creation failed.</p>
    pub fn set_failed_request_list(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::FailedRequest>>) -> Self {
        self.failed_request_list = input; self
    }
    /// <p>List of requests for which contact creation failed.</p>
    pub fn get_failed_request_list(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::FailedRequest>> {
        &self.failed_request_list
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`BatchPutContactOutput`](crate::operation::batch_put_contact::BatchPutContactOutput).
    pub fn build(self) -> crate::operation::batch_put_contact::BatchPutContactOutput {
        crate::operation::batch_put_contact::BatchPutContactOutput {
            successful_request_list: self.successful_request_list
            ,
            failed_request_list: self.failed_request_list
            ,
            _request_id: self._request_id,
        }
    }
}

