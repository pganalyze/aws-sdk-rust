// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A value for a segment attribute. This is structured as a map where the key is <code>valueString</code> and the value is a string.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SegmentAttributeValue  {
    /// <p>The value of a segment attribute.</p>
    pub value_string: ::std::option::Option<::std::string::String>,
}
impl  SegmentAttributeValue  {
    /// <p>The value of a segment attribute.</p>
    pub fn value_string(&self) -> ::std::option::Option<& str> {
        self.value_string.as_deref()
    }
}
impl SegmentAttributeValue {
    /// Creates a new builder-style object to manufacture [`SegmentAttributeValue`](crate::types::SegmentAttributeValue).
    pub fn builder() -> crate::types::builders::SegmentAttributeValueBuilder {
        crate::types::builders::SegmentAttributeValueBuilder::default()
    }
}

/// A builder for [`SegmentAttributeValue`](crate::types::SegmentAttributeValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SegmentAttributeValueBuilder {
    pub(crate) value_string: ::std::option::Option<::std::string::String>,
}
impl SegmentAttributeValueBuilder {
    /// <p>The value of a segment attribute.</p>
    pub fn value_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn set_value_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_string = input; self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn get_value_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_string
    }
    /// Consumes the builder and constructs a [`SegmentAttributeValue`](crate::types::SegmentAttributeValue).
    pub fn build(self) -> crate::types::SegmentAttributeValue {
        crate::types::SegmentAttributeValue {
            value_string: self.value_string
            ,
        }
    }
}

