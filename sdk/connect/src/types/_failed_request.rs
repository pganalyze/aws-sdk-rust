// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request for which contact failed to be generated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedRequest  {
    /// <p>Request identifier provided in the API call in the ContactDataRequest to create a contact.</p>
    pub request_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Reason code for the failure.</p>
    pub failure_reason_code: ::std::option::Option<crate::types::FailureReasonCode>,
    /// <p>Why the request to create a contact failed.</p>
    pub failure_reason_message: ::std::option::Option<::std::string::String>,
}
impl  FailedRequest  {
    /// <p>Request identifier provided in the API call in the ContactDataRequest to create a contact.</p>
    pub fn request_identifier(&self) -> ::std::option::Option<& str> {
        self.request_identifier.as_deref()
    }
    /// <p>Reason code for the failure.</p>
    pub fn failure_reason_code(&self) -> ::std::option::Option<& crate::types::FailureReasonCode> {
        self.failure_reason_code.as_ref()
    }
    /// <p>Why the request to create a contact failed.</p>
    pub fn failure_reason_message(&self) -> ::std::option::Option<& str> {
        self.failure_reason_message.as_deref()
    }
}
impl FailedRequest {
    /// Creates a new builder-style object to manufacture [`FailedRequest`](crate::types::FailedRequest).
    pub fn builder() -> crate::types::builders::FailedRequestBuilder {
        crate::types::builders::FailedRequestBuilder::default()
    }
}

/// A builder for [`FailedRequest`](crate::types::FailedRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailedRequestBuilder {
    pub(crate) request_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason_code: ::std::option::Option<crate::types::FailureReasonCode>,
    pub(crate) failure_reason_message: ::std::option::Option<::std::string::String>,
}
impl FailedRequestBuilder {
    /// <p>Request identifier provided in the API call in the ContactDataRequest to create a contact.</p>
    pub fn request_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Request identifier provided in the API call in the ContactDataRequest to create a contact.</p>
    pub fn set_request_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_identifier = input; self
    }
    /// <p>Request identifier provided in the API call in the ContactDataRequest to create a contact.</p>
    pub fn get_request_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_identifier
    }
    /// <p>Reason code for the failure.</p>
    pub fn failure_reason_code(mut self, input: crate::types::FailureReasonCode) -> Self {
        self.failure_reason_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason code for the failure.</p>
    pub fn set_failure_reason_code(mut self, input: ::std::option::Option<crate::types::FailureReasonCode>) -> Self {
        self.failure_reason_code = input; self
    }
    /// <p>Reason code for the failure.</p>
    pub fn get_failure_reason_code(&self) -> &::std::option::Option<crate::types::FailureReasonCode> {
        &self.failure_reason_code
    }
    /// <p>Why the request to create a contact failed.</p>
    pub fn failure_reason_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Why the request to create a contact failed.</p>
    pub fn set_failure_reason_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason_message = input; self
    }
    /// <p>Why the request to create a contact failed.</p>
    pub fn get_failure_reason_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason_message
    }
    /// Consumes the builder and constructs a [`FailedRequest`](crate::types::FailedRequest).
    pub fn build(self) -> crate::types::FailedRequest {
        crate::types::FailedRequest {
            request_identifier: self.request_identifier
            ,
            failure_reason_code: self.failure_reason_code
            ,
            failure_reason_message: self.failure_reason_message
            ,
        }
    }
}

