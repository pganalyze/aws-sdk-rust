// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a view's metadata.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ViewSummary  {
    /// <p>The identifier of the view.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the view.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the view.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the view.</p>
    pub r#type: ::std::option::Option<crate::types::ViewType>,
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub status: ::std::option::Option<crate::types::ViewStatus>,
    /// <p>The description of the view.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl  ViewSummary  {
    /// <p>The identifier of the view.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the view.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p>The name of the view.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The type of the view.</p>
    pub fn r#type(&self) -> ::std::option::Option<& crate::types::ViewType> {
        self.r#type.as_ref()
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::ViewStatus> {
        self.status.as_ref()
    }
    /// <p>The description of the view.</p>
    pub fn description(&self) -> ::std::option::Option<& str> {
        self.description.as_deref()
    }
}
impl  ::std::fmt::Debug for ViewSummary  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ViewSummary");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("status", &self.status);
        formatter.field("description", &self.description);
        formatter.finish()
    }
}
impl ViewSummary {
    /// Creates a new builder-style object to manufacture [`ViewSummary`](crate::types::ViewSummary).
    pub fn builder() -> crate::types::builders::ViewSummaryBuilder {
        crate::types::builders::ViewSummaryBuilder::default()
    }
}

/// A builder for [`ViewSummary`](crate::types::ViewSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ViewSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ViewType>,
    pub(crate) status: ::std::option::Option<crate::types::ViewStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl ViewSummaryBuilder {
    /// <p>The identifier of the view.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the view.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The identifier of the view.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the view.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the view.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p>The Amazon Resource Name (ARN) of the view.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the view.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the view.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of the view.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the view.</p>
    pub fn r#type(mut self, input: crate::types::ViewType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the view.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ViewType>) -> Self {
        self.r#type = input; self
    }
    /// <p>The type of the view.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ViewType> {
        &self.r#type
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn status(mut self, input: crate::types::ViewStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ViewStatus>) -> Self {
        self.status = input; self
    }
    /// <p>Indicates the view status as either <code>SAVED</code> or <code>PUBLISHED</code>. The <code>PUBLISHED</code> status will initiate validation on the content.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ViewStatus> {
        &self.status
    }
    /// <p>The description of the view.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the view.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input; self
    }
    /// <p>The description of the view.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`ViewSummary`](crate::types::ViewSummary).
    pub fn build(self) -> crate::types::ViewSummary {
        crate::types::ViewSummary {
            id: self.id
            ,
            arn: self.arn
            ,
            name: self.name
            ,
            r#type: self.r#type
            ,
            status: self.status
            ,
            description: self.description
            ,
        }
    }
}
impl ::std::fmt::Debug for ViewSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ViewSummaryBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("status", &self.status);
        formatter.field("description", &self.description);
        formatter.finish()
    }
}

