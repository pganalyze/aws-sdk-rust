// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the characteristic sets generated in the statistics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatisticsSummary  {
    /// <p>The total number of signatures across all characteristic sets.</p>
    pub signature_count: ::std::option::Option<i32>,
    /// <p>The total number of characteristic-set instances.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p>The total number of unique predicates.</p>
    pub predicate_count: ::std::option::Option<i32>,
}
impl  StatisticsSummary  {
    /// <p>The total number of signatures across all characteristic sets.</p>
    pub fn signature_count(&self) -> ::std::option::Option<i32> {
        self.signature_count
    }
    /// <p>The total number of characteristic-set instances.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The total number of unique predicates.</p>
    pub fn predicate_count(&self) -> ::std::option::Option<i32> {
        self.predicate_count
    }
}
impl StatisticsSummary {
    /// Creates a new builder-style object to manufacture [`StatisticsSummary`](crate::types::StatisticsSummary).
    pub fn builder() -> crate::types::builders::StatisticsSummaryBuilder {
        crate::types::builders::StatisticsSummaryBuilder::default()
    }
}

/// A builder for [`StatisticsSummary`](crate::types::StatisticsSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StatisticsSummaryBuilder {
    pub(crate) signature_count: ::std::option::Option<i32>,
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) predicate_count: ::std::option::Option<i32>,
}
impl StatisticsSummaryBuilder {
    /// <p>The total number of signatures across all characteristic sets.</p>
    pub fn signature_count(mut self, input: i32) -> Self {
        self.signature_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of signatures across all characteristic sets.</p>
    pub fn set_signature_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.signature_count = input; self
    }
    /// <p>The total number of signatures across all characteristic sets.</p>
    pub fn get_signature_count(&self) -> &::std::option::Option<i32> {
        &self.signature_count
    }
    /// <p>The total number of characteristic-set instances.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of characteristic-set instances.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input; self
    }
    /// <p>The total number of characteristic-set instances.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p>The total number of unique predicates.</p>
    pub fn predicate_count(mut self, input: i32) -> Self {
        self.predicate_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of unique predicates.</p>
    pub fn set_predicate_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.predicate_count = input; self
    }
    /// <p>The total number of unique predicates.</p>
    pub fn get_predicate_count(&self) -> &::std::option::Option<i32> {
        &self.predicate_count
    }
    /// Consumes the builder and constructs a [`StatisticsSummary`](crate::types::StatisticsSummary).
    pub fn build(self) -> crate::types::StatisticsSummary {
        crate::types::StatisticsSummary {
            signature_count: self.signature_count
            ,
            instance_count: self.instance_count
            ,
            predicate_count: self.predicate_count
            ,
        }
    }
}

