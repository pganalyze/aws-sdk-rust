// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure to capture query statistics such as how many queries are running, accepted or waiting and their details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryEvalStats  {
    /// <p>Indicates how long the query waited, in milliseconds.</p>
    pub waited: ::std::option::Option<i32>,
    /// <p>The number of milliseconds the query has been running so far.</p>
    pub elapsed: ::std::option::Option<i32>,
    /// <p>Set to <code>TRUE</code> if the query was cancelled, or FALSE otherwise.</p>
    pub cancelled: ::std::option::Option<bool>,
    /// <p>The number of subqueries in this query.</p>
    pub subqueries: ::std::option::Option<::aws_smithy_types::Document>,
}
impl  QueryEvalStats  {
    /// <p>Indicates how long the query waited, in milliseconds.</p>
    pub fn waited(&self) -> ::std::option::Option<i32> {
        self.waited
    }
    /// <p>The number of milliseconds the query has been running so far.</p>
    pub fn elapsed(&self) -> ::std::option::Option<i32> {
        self.elapsed
    }
    /// <p>Set to <code>TRUE</code> if the query was cancelled, or FALSE otherwise.</p>
    pub fn cancelled(&self) -> ::std::option::Option<bool> {
        self.cancelled
    }
    /// <p>The number of subqueries in this query.</p>
    pub fn subqueries(&self) -> ::std::option::Option<& ::aws_smithy_types::Document> {
        self.subqueries.as_ref()
    }
}
impl QueryEvalStats {
    /// Creates a new builder-style object to manufacture [`QueryEvalStats`](crate::types::QueryEvalStats).
    pub fn builder() -> crate::types::builders::QueryEvalStatsBuilder {
        crate::types::builders::QueryEvalStatsBuilder::default()
    }
}

/// A builder for [`QueryEvalStats`](crate::types::QueryEvalStats).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct QueryEvalStatsBuilder {
    pub(crate) waited: ::std::option::Option<i32>,
    pub(crate) elapsed: ::std::option::Option<i32>,
    pub(crate) cancelled: ::std::option::Option<bool>,
    pub(crate) subqueries: ::std::option::Option<::aws_smithy_types::Document>,
}
impl QueryEvalStatsBuilder {
    /// <p>Indicates how long the query waited, in milliseconds.</p>
    pub fn waited(mut self, input: i32) -> Self {
        self.waited = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how long the query waited, in milliseconds.</p>
    pub fn set_waited(mut self, input: ::std::option::Option<i32>) -> Self {
        self.waited = input; self
    }
    /// <p>Indicates how long the query waited, in milliseconds.</p>
    pub fn get_waited(&self) -> &::std::option::Option<i32> {
        &self.waited
    }
    /// <p>The number of milliseconds the query has been running so far.</p>
    pub fn elapsed(mut self, input: i32) -> Self {
        self.elapsed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of milliseconds the query has been running so far.</p>
    pub fn set_elapsed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.elapsed = input; self
    }
    /// <p>The number of milliseconds the query has been running so far.</p>
    pub fn get_elapsed(&self) -> &::std::option::Option<i32> {
        &self.elapsed
    }
    /// <p>Set to <code>TRUE</code> if the query was cancelled, or FALSE otherwise.</p>
    pub fn cancelled(mut self, input: bool) -> Self {
        self.cancelled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>TRUE</code> if the query was cancelled, or FALSE otherwise.</p>
    pub fn set_cancelled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.cancelled = input; self
    }
    /// <p>Set to <code>TRUE</code> if the query was cancelled, or FALSE otherwise.</p>
    pub fn get_cancelled(&self) -> &::std::option::Option<bool> {
        &self.cancelled
    }
    /// <p>The number of subqueries in this query.</p>
    pub fn subqueries(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.subqueries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of subqueries in this query.</p>
    pub fn set_subqueries(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.subqueries = input; self
    }
    /// <p>The number of subqueries in this query.</p>
    pub fn get_subqueries(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.subqueries
    }
    /// Consumes the builder and constructs a [`QueryEvalStats`](crate::types::QueryEvalStats).
    pub fn build(self) -> crate::types::QueryEvalStats {
        crate::types::QueryEvalStats {
            waited: self.waited
            ,
            elapsed: self.elapsed
            ,
            cancelled: self.cancelled
            ,
            subqueries: self.subqueries
            ,
        }
    }
}

