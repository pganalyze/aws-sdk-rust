// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a Neptune ML resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MlResourceDefinition  {
    /// <p>The resource name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The resource ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The resource status.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The output location.</p>
    pub output_location: ::std::option::Option<::std::string::String>,
    /// <p>The failure reason, in case of a failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The CloudWatch log URL for the resource.</p>
    pub cloudwatch_log_url: ::std::option::Option<::std::string::String>,
}
impl  MlResourceDefinition  {
    /// <p>The resource name.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The resource ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p>The resource status.</p>
    pub fn status(&self) -> ::std::option::Option<& str> {
        self.status.as_deref()
    }
    /// <p>The output location.</p>
    pub fn output_location(&self) -> ::std::option::Option<& str> {
        self.output_location.as_deref()
    }
    /// <p>The failure reason, in case of a failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<& str> {
        self.failure_reason.as_deref()
    }
    /// <p>The CloudWatch log URL for the resource.</p>
    pub fn cloudwatch_log_url(&self) -> ::std::option::Option<& str> {
        self.cloudwatch_log_url.as_deref()
    }
}
impl MlResourceDefinition {
    /// Creates a new builder-style object to manufacture [`MlResourceDefinition`](crate::types::MlResourceDefinition).
    pub fn builder() -> crate::types::builders::MlResourceDefinitionBuilder {
        crate::types::builders::MlResourceDefinitionBuilder::default()
    }
}

/// A builder for [`MlResourceDefinition`](crate::types::MlResourceDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MlResourceDefinitionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) output_location: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) cloudwatch_log_url: ::std::option::Option<::std::string::String>,
}
impl MlResourceDefinitionBuilder {
    /// <p>The resource name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The resource name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The resource ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p>The resource ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The resource status.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input; self
    }
    /// <p>The resource status.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The output location.</p>
    pub fn output_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The output location.</p>
    pub fn set_output_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_location = input; self
    }
    /// <p>The output location.</p>
    pub fn get_output_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_location
    }
    /// <p>The failure reason, in case of a failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure reason, in case of a failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input; self
    }
    /// <p>The failure reason, in case of a failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The CloudWatch log URL for the resource.</p>
    pub fn cloudwatch_log_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloudwatch_log_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CloudWatch log URL for the resource.</p>
    pub fn set_cloudwatch_log_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloudwatch_log_url = input; self
    }
    /// <p>The CloudWatch log URL for the resource.</p>
    pub fn get_cloudwatch_log_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloudwatch_log_url
    }
    /// Consumes the builder and constructs a [`MlResourceDefinition`](crate::types::MlResourceDefinition).
    pub fn build(self) -> crate::types::MlResourceDefinition {
        crate::types::MlResourceDefinition {
            name: self.name
            ,
            arn: self.arn
            ,
            status: self.status
            ,
            output_location: self.output_location
            ,
            failure_reason: self.failure_reason
            ,
            cloudwatch_log_url: self.cloudwatch_log_url
            ,
        }
    }
}

