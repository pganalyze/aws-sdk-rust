// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `S3BucketRegion`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
/// 
/// Here is an example of how you can make a match expression forward-compatible:
/// 
/// ```text
/// # let s3bucketregion = unimplemented!();
/// match s3bucketregion {
///     S3BucketRegion::AfSouth1 => { /* ... */ },
///     S3BucketRegion::ApEast1 => { /* ... */ },
///     S3BucketRegion::ApNortheast1 => { /* ... */ },
///     S3BucketRegion::ApNortheast2 => { /* ... */ },
///     S3BucketRegion::ApSouth1 => { /* ... */ },
///     S3BucketRegion::ApSoutheast1 => { /* ... */ },
///     S3BucketRegion::ApSoutheast2 => { /* ... */ },
///     S3BucketRegion::CaCentral1 => { /* ... */ },
///     S3BucketRegion::CnNorth1 => { /* ... */ },
///     S3BucketRegion::CnNorthwest1 => { /* ... */ },
///     S3BucketRegion::EuCentral1 => { /* ... */ },
///     S3BucketRegion::EuNorth1 => { /* ... */ },
///     S3BucketRegion::EuWest1 => { /* ... */ },
///     S3BucketRegion::EuWest2 => { /* ... */ },
///     S3BucketRegion::EuWest3 => { /* ... */ },
///     S3BucketRegion::MeSouth1 => { /* ... */ },
///     S3BucketRegion::SaEast1 => { /* ... */ },
///     S3BucketRegion::UsEast1 => { /* ... */ },
///     S3BucketRegion::UsEast2 => { /* ... */ },
///     S3BucketRegion::UsGovEast1 => { /* ... */ },
///     S3BucketRegion::UsGovWest1 => { /* ... */ },
///     S3BucketRegion::UsWest1 => { /* ... */ },
///     S3BucketRegion::UsWest2 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `s3bucketregion` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `S3BucketRegion::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `S3BucketRegion::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `S3BucketRegion::NewFeature` is defined.
/// Specifically, when `s3bucketregion` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `S3BucketRegion::NewFeature` also yielding `"NewFeature"`.
/// 
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash)]
pub enum S3BucketRegion {
    #[allow(missing_docs)] // documentation missing in model
    AfSouth1,
    #[allow(missing_docs)] // documentation missing in model
    ApEast1,
    #[allow(missing_docs)] // documentation missing in model
    ApNortheast1,
    #[allow(missing_docs)] // documentation missing in model
    ApNortheast2,
    #[allow(missing_docs)] // documentation missing in model
    ApSouth1,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast1,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast2,
    #[allow(missing_docs)] // documentation missing in model
    CaCentral1,
    #[allow(missing_docs)] // documentation missing in model
    CnNorth1,
    #[allow(missing_docs)] // documentation missing in model
    CnNorthwest1,
    #[allow(missing_docs)] // documentation missing in model
    EuCentral1,
    #[allow(missing_docs)] // documentation missing in model
    EuNorth1,
    #[allow(missing_docs)] // documentation missing in model
    EuWest1,
    #[allow(missing_docs)] // documentation missing in model
    EuWest2,
    #[allow(missing_docs)] // documentation missing in model
    EuWest3,
    #[allow(missing_docs)] // documentation missing in model
    MeSouth1,
    #[allow(missing_docs)] // documentation missing in model
    SaEast1,
    #[allow(missing_docs)] // documentation missing in model
    UsEast1,
    #[allow(missing_docs)] // documentation missing in model
    UsEast2,
    #[allow(missing_docs)] // documentation missing in model
    UsGovEast1,
    #[allow(missing_docs)] // documentation missing in model
    UsGovWest1,
    #[allow(missing_docs)] // documentation missing in model
    UsWest1,
    #[allow(missing_docs)] // documentation missing in model
    UsWest2,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue)
}
impl ::std::convert::From<&str> for S3BucketRegion {
                fn from(s: &str) -> Self {
                    match s {
                        "af-south-1" => S3BucketRegion::AfSouth1,
"ap-east-1" => S3BucketRegion::ApEast1,
"ap-northeast-1" => S3BucketRegion::ApNortheast1,
"ap-northeast-2" => S3BucketRegion::ApNortheast2,
"ap-south-1" => S3BucketRegion::ApSouth1,
"ap-southeast-1" => S3BucketRegion::ApSoutheast1,
"ap-southeast-2" => S3BucketRegion::ApSoutheast2,
"ca-central-1" => S3BucketRegion::CaCentral1,
"cn-north-1" => S3BucketRegion::CnNorth1,
"cn-northwest-1" => S3BucketRegion::CnNorthwest1,
"eu-central-1" => S3BucketRegion::EuCentral1,
"eu-north-1" => S3BucketRegion::EuNorth1,
"eu-west-1" => S3BucketRegion::EuWest1,
"eu-west-2" => S3BucketRegion::EuWest2,
"eu-west-3" => S3BucketRegion::EuWest3,
"me-south-1" => S3BucketRegion::MeSouth1,
"sa-east-1" => S3BucketRegion::SaEast1,
"us-east-1" => S3BucketRegion::UsEast1,
"us-east-2" => S3BucketRegion::UsEast2,
"us-gov-east-1" => S3BucketRegion::UsGovEast1,
"us-gov-west-1" => S3BucketRegion::UsGovWest1,
"us-west-1" => S3BucketRegion::UsWest1,
"us-west-2" => S3BucketRegion::UsWest2,
other => S3BucketRegion::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned()))
                    }
                }
            }
impl ::std::str::FromStr for S3BucketRegion {
                type Err = ::std::convert::Infallible;

                fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
                    ::std::result::Result::Ok(S3BucketRegion::from(s))
                }
            }
impl S3BucketRegion {
                /// Returns the `&str` value of the enum member.
                pub fn as_str(&self) -> &str {
                    match self {
    S3BucketRegion::AfSouth1 => "af-south-1",
    S3BucketRegion::ApEast1 => "ap-east-1",
    S3BucketRegion::ApNortheast1 => "ap-northeast-1",
    S3BucketRegion::ApNortheast2 => "ap-northeast-2",
    S3BucketRegion::ApSouth1 => "ap-south-1",
    S3BucketRegion::ApSoutheast1 => "ap-southeast-1",
    S3BucketRegion::ApSoutheast2 => "ap-southeast-2",
    S3BucketRegion::CaCentral1 => "ca-central-1",
    S3BucketRegion::CnNorth1 => "cn-north-1",
    S3BucketRegion::CnNorthwest1 => "cn-northwest-1",
    S3BucketRegion::EuCentral1 => "eu-central-1",
    S3BucketRegion::EuNorth1 => "eu-north-1",
    S3BucketRegion::EuWest1 => "eu-west-1",
    S3BucketRegion::EuWest2 => "eu-west-2",
    S3BucketRegion::EuWest3 => "eu-west-3",
    S3BucketRegion::MeSouth1 => "me-south-1",
    S3BucketRegion::SaEast1 => "sa-east-1",
    S3BucketRegion::UsEast1 => "us-east-1",
    S3BucketRegion::UsEast2 => "us-east-2",
    S3BucketRegion::UsGovEast1 => "us-gov-east-1",
    S3BucketRegion::UsGovWest1 => "us-gov-west-1",
    S3BucketRegion::UsWest1 => "us-west-1",
    S3BucketRegion::UsWest2 => "us-west-2",
    S3BucketRegion::Unknown(value) => value.as_str()
}
                }
                /// Returns all the `&str` representations of the enum members.
                pub const fn values() -> &'static [&'static str] {
                    &["af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ca-central-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-north-1", "eu-west-1", "eu-west-2", "eu-west-3", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
                }
            }
impl ::std::convert::AsRef<str> for S3BucketRegion {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
impl S3BucketRegion {
                    /// Parses the enum value while disallowing unknown variants.
                    ///
                    /// Unknown variants will result in an error.
                    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
                        match Self::from(value) {
                            #[allow(deprecated)]
                            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
                            known => Ok(known),
                        }
                    }
                }

