// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains statistics information. The DFE engine uses information about the data in your Neptune graph to make effective trade-offs when planning query execution. This information takes the form of statistics that include so-called characteristic sets and predicate statistics that can guide query planning. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/neptune-dfe-statistics.html">Managing statistics for the Neptune DFE to use</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Statistics  {
    /// <p>Indicates whether or not automatic statistics generation is enabled.</p>
    pub auto_compute: ::std::option::Option<bool>,
    /// <p>Indicates whether or not DFE statistics generation is enabled at all.</p>
    pub active: ::std::option::Option<bool>,
    /// <p>Reports the ID of the current statistics generation run. A value of -1 indicates that no statistics have been generated.</p>
    pub statistics_id: ::std::option::Option<::std::string::String>,
    /// <p>The UTC time at which DFE statistics have most recently been generated.</p>
    pub date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A note about problems in the case where statistics are invalid.</p>
    pub note: ::std::option::Option<::std::string::String>,
    /// <p>A StatisticsSummary structure that contains:</p> 
    /// <ul> 
    /// <li> <p> <code>signatureCount</code> - The total number of signatures across all characteristic sets.</p> </li> 
    /// <li> <p> <code>instanceCount</code> - The total number of characteristic-set instances.</p> </li> 
    /// <li> <p> <code>predicateCount</code> - The total number of unique predicates.</p> </li> 
    /// </ul>
    pub signature_info: ::std::option::Option<crate::types::StatisticsSummary>,
}
impl  Statistics  {
    /// <p>Indicates whether or not automatic statistics generation is enabled.</p>
    pub fn auto_compute(&self) -> ::std::option::Option<bool> {
        self.auto_compute
    }
    /// <p>Indicates whether or not DFE statistics generation is enabled at all.</p>
    pub fn active(&self) -> ::std::option::Option<bool> {
        self.active
    }
    /// <p>Reports the ID of the current statistics generation run. A value of -1 indicates that no statistics have been generated.</p>
    pub fn statistics_id(&self) -> ::std::option::Option<& str> {
        self.statistics_id.as_deref()
    }
    /// <p>The UTC time at which DFE statistics have most recently been generated.</p>
    pub fn date(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.date.as_ref()
    }
    /// <p>A note about problems in the case where statistics are invalid.</p>
    pub fn note(&self) -> ::std::option::Option<& str> {
        self.note.as_deref()
    }
    /// <p>A StatisticsSummary structure that contains:</p> 
    /// <ul> 
    /// <li> <p> <code>signatureCount</code> - The total number of signatures across all characteristic sets.</p> </li> 
    /// <li> <p> <code>instanceCount</code> - The total number of characteristic-set instances.</p> </li> 
    /// <li> <p> <code>predicateCount</code> - The total number of unique predicates.</p> </li> 
    /// </ul>
    pub fn signature_info(&self) -> ::std::option::Option<& crate::types::StatisticsSummary> {
        self.signature_info.as_ref()
    }
}
impl Statistics {
    /// Creates a new builder-style object to manufacture [`Statistics`](crate::types::Statistics).
    pub fn builder() -> crate::types::builders::StatisticsBuilder {
        crate::types::builders::StatisticsBuilder::default()
    }
}

/// A builder for [`Statistics`](crate::types::Statistics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StatisticsBuilder {
    pub(crate) auto_compute: ::std::option::Option<bool>,
    pub(crate) active: ::std::option::Option<bool>,
    pub(crate) statistics_id: ::std::option::Option<::std::string::String>,
    pub(crate) date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) note: ::std::option::Option<::std::string::String>,
    pub(crate) signature_info: ::std::option::Option<crate::types::StatisticsSummary>,
}
impl StatisticsBuilder {
    /// <p>Indicates whether or not automatic statistics generation is enabled.</p>
    pub fn auto_compute(mut self, input: bool) -> Self {
        self.auto_compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not automatic statistics generation is enabled.</p>
    pub fn set_auto_compute(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_compute = input; self
    }
    /// <p>Indicates whether or not automatic statistics generation is enabled.</p>
    pub fn get_auto_compute(&self) -> &::std::option::Option<bool> {
        &self.auto_compute
    }
    /// <p>Indicates whether or not DFE statistics generation is enabled at all.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether or not DFE statistics generation is enabled at all.</p>
    pub fn set_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.active = input; self
    }
    /// <p>Indicates whether or not DFE statistics generation is enabled at all.</p>
    pub fn get_active(&self) -> &::std::option::Option<bool> {
        &self.active
    }
    /// <p>Reports the ID of the current statistics generation run. A value of -1 indicates that no statistics have been generated.</p>
    pub fn statistics_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statistics_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reports the ID of the current statistics generation run. A value of -1 indicates that no statistics have been generated.</p>
    pub fn set_statistics_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statistics_id = input; self
    }
    /// <p>Reports the ID of the current statistics generation run. A value of -1 indicates that no statistics have been generated.</p>
    pub fn get_statistics_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statistics_id
    }
    /// <p>The UTC time at which DFE statistics have most recently been generated.</p>
    pub fn date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The UTC time at which DFE statistics have most recently been generated.</p>
    pub fn set_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date = input; self
    }
    /// <p>The UTC time at which DFE statistics have most recently been generated.</p>
    pub fn get_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date
    }
    /// <p>A note about problems in the case where statistics are invalid.</p>
    pub fn note(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.note = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A note about problems in the case where statistics are invalid.</p>
    pub fn set_note(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.note = input; self
    }
    /// <p>A note about problems in the case where statistics are invalid.</p>
    pub fn get_note(&self) -> &::std::option::Option<::std::string::String> {
        &self.note
    }
    /// <p>A StatisticsSummary structure that contains:</p> 
    /// <ul> 
    /// <li> <p> <code>signatureCount</code> - The total number of signatures across all characteristic sets.</p> </li> 
    /// <li> <p> <code>instanceCount</code> - The total number of characteristic-set instances.</p> </li> 
    /// <li> <p> <code>predicateCount</code> - The total number of unique predicates.</p> </li> 
    /// </ul>
    pub fn signature_info(mut self, input: crate::types::StatisticsSummary) -> Self {
        self.signature_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>A StatisticsSummary structure that contains:</p> 
    /// <ul> 
    /// <li> <p> <code>signatureCount</code> - The total number of signatures across all characteristic sets.</p> </li> 
    /// <li> <p> <code>instanceCount</code> - The total number of characteristic-set instances.</p> </li> 
    /// <li> <p> <code>predicateCount</code> - The total number of unique predicates.</p> </li> 
    /// </ul>
    pub fn set_signature_info(mut self, input: ::std::option::Option<crate::types::StatisticsSummary>) -> Self {
        self.signature_info = input; self
    }
    /// <p>A StatisticsSummary structure that contains:</p> 
    /// <ul> 
    /// <li> <p> <code>signatureCount</code> - The total number of signatures across all characteristic sets.</p> </li> 
    /// <li> <p> <code>instanceCount</code> - The total number of characteristic-set instances.</p> </li> 
    /// <li> <p> <code>predicateCount</code> - The total number of unique predicates.</p> </li> 
    /// </ul>
    pub fn get_signature_info(&self) -> &::std::option::Option<crate::types::StatisticsSummary> {
        &self.signature_info
    }
    /// Consumes the builder and constructs a [`Statistics`](crate::types::Statistics).
    pub fn build(self) -> crate::types::Statistics {
        crate::types::Statistics {
            auto_compute: self.auto_compute
            ,
            active: self.active
            ,
            statistics_id: self.statistics_id
            ,
            date: self.date
            ,
            note: self.note
            ,
            signature_info: self.signature_info
            ,
        }
    }
}

