// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartMlModelTrainingJobOutput  {
    /// <p>The unique ID of the new model training job.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the new model training job.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The model training job creation time, in milliseconds.</p>
    pub creation_time_in_millis: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl  StartMlModelTrainingJobOutput  {
    /// <p>The unique ID of the new model training job.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the new model training job.</p>
    pub fn arn(&self) -> ::std::option::Option<& str> {
        self.arn.as_deref()
    }
    /// <p>The model training job creation time, in milliseconds.</p>
    pub fn creation_time_in_millis(&self) -> ::std::option::Option<i64> {
        self.creation_time_in_millis
    }
}
impl ::aws_types::request_id::RequestId for StartMlModelTrainingJobOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl StartMlModelTrainingJobOutput {
    /// Creates a new builder-style object to manufacture [`StartMlModelTrainingJobOutput`](crate::operation::start_ml_model_training_job::StartMlModelTrainingJobOutput).
    pub fn builder() -> crate::operation::start_ml_model_training_job::builders::StartMlModelTrainingJobOutputBuilder {
        crate::operation::start_ml_model_training_job::builders::StartMlModelTrainingJobOutputBuilder::default()
    }
}

/// A builder for [`StartMlModelTrainingJobOutput`](crate::operation::start_ml_model_training_job::StartMlModelTrainingJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartMlModelTrainingJobOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time_in_millis: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl StartMlModelTrainingJobOutputBuilder {
    /// <p>The unique ID of the new model training job.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the new model training job.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The unique ID of the new model training job.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the new model training job.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the new model training job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input; self
    }
    /// <p>The ARN of the new model training job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The model training job creation time, in milliseconds.</p>
    pub fn creation_time_in_millis(mut self, input: i64) -> Self {
        self.creation_time_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model training job creation time, in milliseconds.</p>
    pub fn set_creation_time_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.creation_time_in_millis = input; self
    }
    /// <p>The model training job creation time, in milliseconds.</p>
    pub fn get_creation_time_in_millis(&self) -> &::std::option::Option<i64> {
        &self.creation_time_in_millis
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`StartMlModelTrainingJobOutput`](crate::operation::start_ml_model_training_job::StartMlModelTrainingJobOutput).
    pub fn build(self) -> crate::operation::start_ml_model_training_job::StartMlModelTrainingJobOutput {
        crate::operation::start_ml_model_training_job::StartMlModelTrainingJobOutput {
            id: self.id
            ,
            arn: self.arn
            ,
            creation_time_in_millis: self.creation_time_in_millis
            ,
            _request_id: self._request_id,
        }
    }
}

