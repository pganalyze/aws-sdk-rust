// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeletePropertygraphStatisticsOutput  {
    /// <p>The HTTP response code: 200 if the delete was successful, or 204 if there were no statistics to delete.</p>
    pub status_code: ::std::option::Option<i32>,
    /// <p>The cancel status.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The deletion payload.</p>
    pub payload: ::std::option::Option<crate::types::DeleteStatisticsValueMap>,
    _request_id: Option<String>,
}
impl  DeletePropertygraphStatisticsOutput  {
    /// <p>The HTTP response code: 200 if the delete was successful, or 204 if there were no statistics to delete.</p>
    pub fn status_code(&self) -> ::std::option::Option<i32> {
        self.status_code
    }
    /// <p>The cancel status.</p>
    pub fn status(&self) -> ::std::option::Option<& str> {
        self.status.as_deref()
    }
    /// <p>The deletion payload.</p>
    pub fn payload(&self) -> ::std::option::Option<& crate::types::DeleteStatisticsValueMap> {
        self.payload.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DeletePropertygraphStatisticsOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl DeletePropertygraphStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`DeletePropertygraphStatisticsOutput`](crate::operation::delete_propertygraph_statistics::DeletePropertygraphStatisticsOutput).
    pub fn builder() -> crate::operation::delete_propertygraph_statistics::builders::DeletePropertygraphStatisticsOutputBuilder {
        crate::operation::delete_propertygraph_statistics::builders::DeletePropertygraphStatisticsOutputBuilder::default()
    }
}

/// A builder for [`DeletePropertygraphStatisticsOutput`](crate::operation::delete_propertygraph_statistics::DeletePropertygraphStatisticsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeletePropertygraphStatisticsOutputBuilder {
    pub(crate) status_code: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) payload: ::std::option::Option<crate::types::DeleteStatisticsValueMap>,
    _request_id: Option<String>,
}
impl DeletePropertygraphStatisticsOutputBuilder {
    /// <p>The HTTP response code: 200 if the delete was successful, or 204 if there were no statistics to delete.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP response code: 200 if the delete was successful, or 204 if there were no statistics to delete.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_code = input; self
    }
    /// <p>The HTTP response code: 200 if the delete was successful, or 204 if there were no statistics to delete.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        &self.status_code
    }
    /// <p>The cancel status.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cancel status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input; self
    }
    /// <p>The cancel status.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The deletion payload.</p>
    pub fn payload(mut self, input: crate::types::DeleteStatisticsValueMap) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deletion payload.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::DeleteStatisticsValueMap>) -> Self {
        self.payload = input; self
    }
    /// <p>The deletion payload.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::DeleteStatisticsValueMap> {
        &self.payload
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`DeletePropertygraphStatisticsOutput`](crate::operation::delete_propertygraph_statistics::DeletePropertygraphStatisticsOutput).
    pub fn build(self) -> crate::operation::delete_propertygraph_statistics::DeletePropertygraphStatisticsOutput {
        crate::operation::delete_propertygraph_statistics::DeletePropertygraphStatisticsOutput {
            status_code: self.status_code
            ,
            status: self.status
            ,
            payload: self.payload
            ,
            _request_id: self._request_id,
        }
    }
}

