// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMlDataProcessingJobOutput  {
    /// <p>Status of the data processing job.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of this data-processing job.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Definition of the data processing job.</p>
    pub processing_job: ::std::option::Option<crate::types::MlResourceDefinition>,
    _request_id: Option<String>,
}
impl  GetMlDataProcessingJobOutput  {
    /// <p>Status of the data processing job.</p>
    pub fn status(&self) -> ::std::option::Option<& str> {
        self.status.as_deref()
    }
    /// <p>The unique identifier of this data-processing job.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>Definition of the data processing job.</p>
    pub fn processing_job(&self) -> ::std::option::Option<& crate::types::MlResourceDefinition> {
        self.processing_job.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetMlDataProcessingJobOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl GetMlDataProcessingJobOutput {
    /// Creates a new builder-style object to manufacture [`GetMlDataProcessingJobOutput`](crate::operation::get_ml_data_processing_job::GetMlDataProcessingJobOutput).
    pub fn builder() -> crate::operation::get_ml_data_processing_job::builders::GetMlDataProcessingJobOutputBuilder {
        crate::operation::get_ml_data_processing_job::builders::GetMlDataProcessingJobOutputBuilder::default()
    }
}

/// A builder for [`GetMlDataProcessingJobOutput`](crate::operation::get_ml_data_processing_job::GetMlDataProcessingJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetMlDataProcessingJobOutputBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) processing_job: ::std::option::Option<crate::types::MlResourceDefinition>,
    _request_id: Option<String>,
}
impl GetMlDataProcessingJobOutputBuilder {
    /// <p>Status of the data processing job.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Status of the data processing job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input; self
    }
    /// <p>Status of the data processing job.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The unique identifier of this data-processing job.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of this data-processing job.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The unique identifier of this data-processing job.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Definition of the data processing job.</p>
    pub fn processing_job(mut self, input: crate::types::MlResourceDefinition) -> Self {
        self.processing_job = ::std::option::Option::Some(input);
        self
    }
    /// <p>Definition of the data processing job.</p>
    pub fn set_processing_job(mut self, input: ::std::option::Option<crate::types::MlResourceDefinition>) -> Self {
        self.processing_job = input; self
    }
    /// <p>Definition of the data processing job.</p>
    pub fn get_processing_job(&self) -> &::std::option::Option<crate::types::MlResourceDefinition> {
        &self.processing_job
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`GetMlDataProcessingJobOutput`](crate::operation::get_ml_data_processing_job::GetMlDataProcessingJobOutput).
    pub fn build(self) -> crate::operation::get_ml_data_processing_job::GetMlDataProcessingJobOutput {
        crate::operation::get_ml_data_processing_job::GetMlDataProcessingJobOutput {
            status: self.status
            ,
            id: self.id
            ,
            processing_job: self.processing_job
            ,
            _request_id: self._request_id,
        }
    }
}

