// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteGremlinQueryOutput  {
    /// <p>The unique identifier of the Gremlin query.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Gremlin query.</p>
    pub status: ::std::option::Option<crate::types::GremlinQueryStatusAttributes>,
    /// <p>The Gremlin query output from the server.</p>
    pub result: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>Metadata about the Gremlin query.</p>
    ///
    /// _Note: This member has been renamed from `meta`._
    pub meta_value: ::std::option::Option<::aws_smithy_types::Document>,
    _request_id: Option<String>,
}
impl  ExecuteGremlinQueryOutput  {
    /// <p>The unique identifier of the Gremlin query.</p>
    pub fn request_id(&self) -> ::std::option::Option<& str> {
        self.request_id.as_deref()
    }
    /// <p>The status of the Gremlin query.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::GremlinQueryStatusAttributes> {
        self.status.as_ref()
    }
    /// <p>The Gremlin query output from the server.</p>
    pub fn result(&self) -> ::std::option::Option<& ::aws_smithy_types::Document> {
        self.result.as_ref()
    }
    /// <p>Metadata about the Gremlin query.</p>
    ///
    /// _Note: This member has been renamed from `meta`._
    pub fn meta_value(&self) -> ::std::option::Option<& ::aws_smithy_types::Document> {
        self.meta_value.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for ExecuteGremlinQueryOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl ExecuteGremlinQueryOutput {
    /// Creates a new builder-style object to manufacture [`ExecuteGremlinQueryOutput`](crate::operation::execute_gremlin_query::ExecuteGremlinQueryOutput).
    pub fn builder() -> crate::operation::execute_gremlin_query::builders::ExecuteGremlinQueryOutputBuilder {
        crate::operation::execute_gremlin_query::builders::ExecuteGremlinQueryOutputBuilder::default()
    }
}

/// A builder for [`ExecuteGremlinQueryOutput`](crate::operation::execute_gremlin_query::ExecuteGremlinQueryOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecuteGremlinQueryOutputBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::GremlinQueryStatusAttributes>,
    pub(crate) result: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) meta_value: ::std::option::Option<::aws_smithy_types::Document>,
    _request_id: Option<String>,
}
impl ExecuteGremlinQueryOutputBuilder {
    /// <p>The unique identifier of the Gremlin query.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Gremlin query.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input; self
    }
    /// <p>The unique identifier of the Gremlin query.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The status of the Gremlin query.</p>
    pub fn status(mut self, input: crate::types::GremlinQueryStatusAttributes) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Gremlin query.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GremlinQueryStatusAttributes>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the Gremlin query.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GremlinQueryStatusAttributes> {
        &self.status
    }
    /// <p>The Gremlin query output from the server.</p>
    pub fn result(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Gremlin query output from the server.</p>
    pub fn set_result(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.result = input; self
    }
    /// <p>The Gremlin query output from the server.</p>
    pub fn get_result(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.result
    }
    /// <p>Metadata about the Gremlin query.</p>
    pub fn meta_value(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.meta_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata about the Gremlin query.</p>
    pub fn set_meta(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.meta_value = input; self
    }
    /// <p>Metadata about the Gremlin query.</p>
    pub fn get_meta(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.meta_value
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`ExecuteGremlinQueryOutput`](crate::operation::execute_gremlin_query::ExecuteGremlinQueryOutput).
    pub fn build(self) -> crate::operation::execute_gremlin_query::ExecuteGremlinQueryOutput {
        crate::operation::execute_gremlin_query::ExecuteGremlinQueryOutput {
            request_id: self.request_id
            ,
            status: self.status
            ,
            result: self.result
            ,
            meta_value: self.meta_value
            ,
            _request_id: self._request_id,
        }
    }
}

