// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The video stream pool configuration object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct KinesisVideoStreamPoolConfiguration  {
    /// <p>The ARN of the video stream pool configuration.</p>
    pub pool_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the video stream pool configuration.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the video stream pool in the configuration.</p>
    pub pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the video stream pool in the configuration. </p>
    pub pool_status: ::std::option::Option<crate::types::KinesisVideoStreamPoolStatus>,
    /// <p>The size of the video stream pool in the configuration.</p>
    pub pool_size: ::std::option::Option<i32>,
    /// <p>The Kinesis video stream pool configuration object.</p>
    pub stream_configuration: ::std::option::Option<crate::types::KinesisVideoStreamConfiguration>,
    /// <p>The time at which the configuration was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the configuration was updated.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  KinesisVideoStreamPoolConfiguration  {
    /// <p>The ARN of the video stream pool configuration.</p>
    pub fn pool_arn(&self) -> ::std::option::Option<& str> {
        self.pool_arn.as_deref()
    }
    /// <p>The name of the video stream pool configuration.</p>
    pub fn pool_name(&self) -> ::std::option::Option<& str> {
        self.pool_name.as_deref()
    }
    /// <p>The ID of the video stream pool in the configuration.</p>
    pub fn pool_id(&self) -> ::std::option::Option<& str> {
        self.pool_id.as_deref()
    }
    /// <p>The status of the video stream pool in the configuration. </p>
    pub fn pool_status(&self) -> ::std::option::Option<& crate::types::KinesisVideoStreamPoolStatus> {
        self.pool_status.as_ref()
    }
    /// <p>The size of the video stream pool in the configuration.</p>
    pub fn pool_size(&self) -> ::std::option::Option<i32> {
        self.pool_size
    }
    /// <p>The Kinesis video stream pool configuration object.</p>
    pub fn stream_configuration(&self) -> ::std::option::Option<& crate::types::KinesisVideoStreamConfiguration> {
        self.stream_configuration.as_ref()
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the configuration was updated.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
}
impl  ::std::fmt::Debug for KinesisVideoStreamPoolConfiguration  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KinesisVideoStreamPoolConfiguration");
        formatter.field("pool_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("pool_name", &self.pool_name);
        formatter.field("pool_id", &self.pool_id);
        formatter.field("pool_status", &self.pool_status);
        formatter.field("pool_size", &self.pool_size);
        formatter.field("stream_configuration", &self.stream_configuration);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.finish()
    }
}
impl KinesisVideoStreamPoolConfiguration {
    /// Creates a new builder-style object to manufacture [`KinesisVideoStreamPoolConfiguration`](crate::types::KinesisVideoStreamPoolConfiguration).
    pub fn builder() -> crate::types::builders::KinesisVideoStreamPoolConfigurationBuilder {
        crate::types::builders::KinesisVideoStreamPoolConfigurationBuilder::default()
    }
}

/// A builder for [`KinesisVideoStreamPoolConfiguration`](crate::types::KinesisVideoStreamPoolConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct KinesisVideoStreamPoolConfigurationBuilder {
    pub(crate) pool_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) pool_status: ::std::option::Option<crate::types::KinesisVideoStreamPoolStatus>,
    pub(crate) pool_size: ::std::option::Option<i32>,
    pub(crate) stream_configuration: ::std::option::Option<crate::types::KinesisVideoStreamConfiguration>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KinesisVideoStreamPoolConfigurationBuilder {
    /// <p>The ARN of the video stream pool configuration.</p>
    pub fn pool_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the video stream pool configuration.</p>
    pub fn set_pool_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_arn = input; self
    }
    /// <p>The ARN of the video stream pool configuration.</p>
    pub fn get_pool_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_arn
    }
    /// <p>The name of the video stream pool configuration.</p>
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the video stream pool configuration.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input; self
    }
    /// <p>The name of the video stream pool configuration.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The ID of the video stream pool in the configuration.</p>
    pub fn pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the video stream pool in the configuration.</p>
    pub fn set_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_id = input; self
    }
    /// <p>The ID of the video stream pool in the configuration.</p>
    pub fn get_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_id
    }
    /// <p>The status of the video stream pool in the configuration. </p>
    pub fn pool_status(mut self, input: crate::types::KinesisVideoStreamPoolStatus) -> Self {
        self.pool_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the video stream pool in the configuration. </p>
    pub fn set_pool_status(mut self, input: ::std::option::Option<crate::types::KinesisVideoStreamPoolStatus>) -> Self {
        self.pool_status = input; self
    }
    /// <p>The status of the video stream pool in the configuration. </p>
    pub fn get_pool_status(&self) -> &::std::option::Option<crate::types::KinesisVideoStreamPoolStatus> {
        &self.pool_status
    }
    /// <p>The size of the video stream pool in the configuration.</p>
    pub fn pool_size(mut self, input: i32) -> Self {
        self.pool_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the video stream pool in the configuration.</p>
    pub fn set_pool_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pool_size = input; self
    }
    /// <p>The size of the video stream pool in the configuration.</p>
    pub fn get_pool_size(&self) -> &::std::option::Option<i32> {
        &self.pool_size
    }
    /// <p>The Kinesis video stream pool configuration object.</p>
    pub fn stream_configuration(mut self, input: crate::types::KinesisVideoStreamConfiguration) -> Self {
        self.stream_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Kinesis video stream pool configuration object.</p>
    pub fn set_stream_configuration(mut self, input: ::std::option::Option<crate::types::KinesisVideoStreamConfiguration>) -> Self {
        self.stream_configuration = input; self
    }
    /// <p>The Kinesis video stream pool configuration object.</p>
    pub fn get_stream_configuration(&self) -> &::std::option::Option<crate::types::KinesisVideoStreamConfiguration> {
        &self.stream_configuration
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input; self
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the configuration was updated.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configuration was updated.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input; self
    }
    /// <p>The time at which the configuration was updated.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// Consumes the builder and constructs a [`KinesisVideoStreamPoolConfiguration`](crate::types::KinesisVideoStreamPoolConfiguration).
    pub fn build(self) -> crate::types::KinesisVideoStreamPoolConfiguration {
        crate::types::KinesisVideoStreamPoolConfiguration {
            pool_arn: self.pool_arn
            ,
            pool_name: self.pool_name
            ,
            pool_id: self.pool_id
            ,
            pool_status: self.pool_status
            ,
            pool_size: self.pool_size
            ,
            stream_configuration: self.stream_configuration
            ,
            created_timestamp: self.created_timestamp
            ,
            updated_timestamp: self.updated_timestamp
            ,
        }
    }
}
impl ::std::fmt::Debug for KinesisVideoStreamPoolConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KinesisVideoStreamPoolConfigurationBuilder");
        formatter.field("pool_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("pool_name", &self.pool_name);
        formatter.field("pool_id", &self.pool_id);
        formatter.field("pool_status", &self.pool_status);
        formatter.field("pool_size", &self.pool_size);
        formatter.field("stream_configuration", &self.stream_configuration);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.finish()
    }
}

