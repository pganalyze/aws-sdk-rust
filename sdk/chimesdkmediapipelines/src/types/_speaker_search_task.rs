// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A representation of an asynchronous request to perform speaker search analysis on a media insights pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpeakerSearchTask  {
    /// <p>The speaker search task ID.</p>
    pub speaker_search_task_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the speaker search task.</p>
    pub speaker_search_task_status: ::std::option::Option<crate::types::MediaPipelineTaskStatus>,
    /// <p>The time at which a speaker search task was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which a speaker search task was updated.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl  SpeakerSearchTask  {
    /// <p>The speaker search task ID.</p>
    pub fn speaker_search_task_id(&self) -> ::std::option::Option<& str> {
        self.speaker_search_task_id.as_deref()
    }
    /// <p>The status of the speaker search task.</p>
    pub fn speaker_search_task_status(&self) -> ::std::option::Option<& crate::types::MediaPipelineTaskStatus> {
        self.speaker_search_task_status.as_ref()
    }
    /// <p>The time at which a speaker search task was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which a speaker search task was updated.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<& ::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
}
impl SpeakerSearchTask {
    /// Creates a new builder-style object to manufacture [`SpeakerSearchTask`](crate::types::SpeakerSearchTask).
    pub fn builder() -> crate::types::builders::SpeakerSearchTaskBuilder {
        crate::types::builders::SpeakerSearchTaskBuilder::default()
    }
}

/// A builder for [`SpeakerSearchTask`](crate::types::SpeakerSearchTask).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SpeakerSearchTaskBuilder {
    pub(crate) speaker_search_task_id: ::std::option::Option<::std::string::String>,
    pub(crate) speaker_search_task_status: ::std::option::Option<crate::types::MediaPipelineTaskStatus>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SpeakerSearchTaskBuilder {
    /// <p>The speaker search task ID.</p>
    pub fn speaker_search_task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.speaker_search_task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The speaker search task ID.</p>
    pub fn set_speaker_search_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.speaker_search_task_id = input; self
    }
    /// <p>The speaker search task ID.</p>
    pub fn get_speaker_search_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.speaker_search_task_id
    }
    /// <p>The status of the speaker search task.</p>
    pub fn speaker_search_task_status(mut self, input: crate::types::MediaPipelineTaskStatus) -> Self {
        self.speaker_search_task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the speaker search task.</p>
    pub fn set_speaker_search_task_status(mut self, input: ::std::option::Option<crate::types::MediaPipelineTaskStatus>) -> Self {
        self.speaker_search_task_status = input; self
    }
    /// <p>The status of the speaker search task.</p>
    pub fn get_speaker_search_task_status(&self) -> &::std::option::Option<crate::types::MediaPipelineTaskStatus> {
        &self.speaker_search_task_status
    }
    /// <p>The time at which a speaker search task was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which a speaker search task was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input; self
    }
    /// <p>The time at which a speaker search task was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which a speaker search task was updated.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which a speaker search task was updated.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input; self
    }
    /// <p>The time at which a speaker search task was updated.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// Consumes the builder and constructs a [`SpeakerSearchTask`](crate::types::SpeakerSearchTask).
    pub fn build(self) -> crate::types::SpeakerSearchTask {
        crate::types::SpeakerSearchTask {
            speaker_search_task_id: self.speaker_search_task_id
            ,
            speaker_search_task_status: self.speaker_search_task_status
            ,
            created_timestamp: self.created_timestamp
            ,
            updated_timestamp: self.updated_timestamp
            ,
        }
    }
}

