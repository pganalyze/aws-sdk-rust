// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the Kinesis video stream pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct KinesisVideoStreamPoolSummary  {
    /// <p>The name of the video stream pool.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the video stream pool.</p>
    pub pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the video stream pool.</p>
    pub pool_arn: ::std::option::Option<::std::string::String>,
}
impl  KinesisVideoStreamPoolSummary  {
    /// <p>The name of the video stream pool.</p>
    pub fn pool_name(&self) -> ::std::option::Option<& str> {
        self.pool_name.as_deref()
    }
    /// <p>The ID of the video stream pool.</p>
    pub fn pool_id(&self) -> ::std::option::Option<& str> {
        self.pool_id.as_deref()
    }
    /// <p>The ARN of the video stream pool.</p>
    pub fn pool_arn(&self) -> ::std::option::Option<& str> {
        self.pool_arn.as_deref()
    }
}
impl  ::std::fmt::Debug for KinesisVideoStreamPoolSummary  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KinesisVideoStreamPoolSummary");
        formatter.field("pool_name", &self.pool_name);
        formatter.field("pool_id", &self.pool_id);
        formatter.field("pool_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl KinesisVideoStreamPoolSummary {
    /// Creates a new builder-style object to manufacture [`KinesisVideoStreamPoolSummary`](crate::types::KinesisVideoStreamPoolSummary).
    pub fn builder() -> crate::types::builders::KinesisVideoStreamPoolSummaryBuilder {
        crate::types::builders::KinesisVideoStreamPoolSummaryBuilder::default()
    }
}

/// A builder for [`KinesisVideoStreamPoolSummary`](crate::types::KinesisVideoStreamPoolSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct KinesisVideoStreamPoolSummaryBuilder {
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) pool_arn: ::std::option::Option<::std::string::String>,
}
impl KinesisVideoStreamPoolSummaryBuilder {
    /// <p>The name of the video stream pool.</p>
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the video stream pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input; self
    }
    /// <p>The name of the video stream pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The ID of the video stream pool.</p>
    pub fn pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the video stream pool.</p>
    pub fn set_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_id = input; self
    }
    /// <p>The ID of the video stream pool.</p>
    pub fn get_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_id
    }
    /// <p>The ARN of the video stream pool.</p>
    pub fn pool_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the video stream pool.</p>
    pub fn set_pool_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_arn = input; self
    }
    /// <p>The ARN of the video stream pool.</p>
    pub fn get_pool_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_arn
    }
    /// Consumes the builder and constructs a [`KinesisVideoStreamPoolSummary`](crate::types::KinesisVideoStreamPoolSummary).
    pub fn build(self) -> crate::types::KinesisVideoStreamPoolSummary {
        crate::types::KinesisVideoStreamPoolSummary {
            pool_name: self.pool_name
            ,
            pool_id: self.pool_id
            ,
            pool_arn: self.pool_arn
            ,
        }
    }
}
impl ::std::fmt::Debug for KinesisVideoStreamPoolSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("KinesisVideoStreamPoolSummaryBuilder");
        formatter.field("pool_name", &self.pool_name);
        formatter.field("pool_id", &self.pool_id);
        formatter.field("pool_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

