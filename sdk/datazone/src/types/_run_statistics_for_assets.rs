// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The asset statistics from the data source run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RunStatisticsForAssets  {
    /// <p>The <code>added</code> statistic for the data source run.</p>
    pub added: ::std::option::Option<i32>,
    /// <p>The <code>updated</code> statistic for the data source run.</p>
    pub updated: ::std::option::Option<i32>,
    /// <p>The <code>unchanged</code> statistic for the data source run.</p>
    pub unchanged: ::std::option::Option<i32>,
    /// <p>The <code>skipped</code> statistic for the data source run.</p>
    pub skipped: ::std::option::Option<i32>,
    /// <p>The <code>failed</code> statistic for the data source run.</p>
    pub failed: ::std::option::Option<i32>,
}
impl  RunStatisticsForAssets  {
    /// <p>The <code>added</code> statistic for the data source run.</p>
    pub fn added(&self) -> ::std::option::Option<i32> {
        self.added
    }
    /// <p>The <code>updated</code> statistic for the data source run.</p>
    pub fn updated(&self) -> ::std::option::Option<i32> {
        self.updated
    }
    /// <p>The <code>unchanged</code> statistic for the data source run.</p>
    pub fn unchanged(&self) -> ::std::option::Option<i32> {
        self.unchanged
    }
    /// <p>The <code>skipped</code> statistic for the data source run.</p>
    pub fn skipped(&self) -> ::std::option::Option<i32> {
        self.skipped
    }
    /// <p>The <code>failed</code> statistic for the data source run.</p>
    pub fn failed(&self) -> ::std::option::Option<i32> {
        self.failed
    }
}
impl RunStatisticsForAssets {
    /// Creates a new builder-style object to manufacture [`RunStatisticsForAssets`](crate::types::RunStatisticsForAssets).
    pub fn builder() -> crate::types::builders::RunStatisticsForAssetsBuilder {
        crate::types::builders::RunStatisticsForAssetsBuilder::default()
    }
}

/// A builder for [`RunStatisticsForAssets`](crate::types::RunStatisticsForAssets).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RunStatisticsForAssetsBuilder {
    pub(crate) added: ::std::option::Option<i32>,
    pub(crate) updated: ::std::option::Option<i32>,
    pub(crate) unchanged: ::std::option::Option<i32>,
    pub(crate) skipped: ::std::option::Option<i32>,
    pub(crate) failed: ::std::option::Option<i32>,
}
impl RunStatisticsForAssetsBuilder {
    /// <p>The <code>added</code> statistic for the data source run.</p>
    pub fn added(mut self, input: i32) -> Self {
        self.added = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>added</code> statistic for the data source run.</p>
    pub fn set_added(mut self, input: ::std::option::Option<i32>) -> Self {
        self.added = input; self
    }
    /// <p>The <code>added</code> statistic for the data source run.</p>
    pub fn get_added(&self) -> &::std::option::Option<i32> {
        &self.added
    }
    /// <p>The <code>updated</code> statistic for the data source run.</p>
    pub fn updated(mut self, input: i32) -> Self {
        self.updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>updated</code> statistic for the data source run.</p>
    pub fn set_updated(mut self, input: ::std::option::Option<i32>) -> Self {
        self.updated = input; self
    }
    /// <p>The <code>updated</code> statistic for the data source run.</p>
    pub fn get_updated(&self) -> &::std::option::Option<i32> {
        &self.updated
    }
    /// <p>The <code>unchanged</code> statistic for the data source run.</p>
    pub fn unchanged(mut self, input: i32) -> Self {
        self.unchanged = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>unchanged</code> statistic for the data source run.</p>
    pub fn set_unchanged(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unchanged = input; self
    }
    /// <p>The <code>unchanged</code> statistic for the data source run.</p>
    pub fn get_unchanged(&self) -> &::std::option::Option<i32> {
        &self.unchanged
    }
    /// <p>The <code>skipped</code> statistic for the data source run.</p>
    pub fn skipped(mut self, input: i32) -> Self {
        self.skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>skipped</code> statistic for the data source run.</p>
    pub fn set_skipped(mut self, input: ::std::option::Option<i32>) -> Self {
        self.skipped = input; self
    }
    /// <p>The <code>skipped</code> statistic for the data source run.</p>
    pub fn get_skipped(&self) -> &::std::option::Option<i32> {
        &self.skipped
    }
    /// <p>The <code>failed</code> statistic for the data source run.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>failed</code> statistic for the data source run.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed = input; self
    }
    /// <p>The <code>failed</code> statistic for the data source run.</p>
    pub fn get_failed(&self) -> &::std::option::Option<i32> {
        &self.failed
    }
    /// Consumes the builder and constructs a [`RunStatisticsForAssets`](crate::types::RunStatisticsForAssets).
    pub fn build(self) -> crate::types::RunStatisticsForAssets {
        crate::types::RunStatisticsForAssets {
            added: self.added
            ,
            updated: self.updated
            ,
            unchanged: self.unchanged
            ,
            skipped: self.skipped
            ,
            failed: self.failed
            ,
        }
    }
}

