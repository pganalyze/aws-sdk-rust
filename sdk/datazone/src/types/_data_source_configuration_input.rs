// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum DataSourceConfigurationInput {
    /// <p>The configuration of the Amazon Web Services Glue data source.</p>
    GlueRunConfiguration(crate::types::GlueRunConfigurationInput),
    /// <p>The configuration of the Amazon Redshift data source.</p>
    RedshiftRunConfiguration(crate::types::RedshiftRunConfigurationInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DataSourceConfigurationInput {
    /// Tries to convert the enum instance into [`GlueRunConfiguration`](crate::types::DataSourceConfigurationInput::GlueRunConfiguration), extracting the inner [`GlueRunConfigurationInput`](crate::types::GlueRunConfigurationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_glue_run_configuration(&self) -> ::std::result::Result<&crate::types::GlueRunConfigurationInput, &Self> {
        if let DataSourceConfigurationInput::GlueRunConfiguration(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`GlueRunConfiguration`](crate::types::DataSourceConfigurationInput::GlueRunConfiguration).
    pub fn is_glue_run_configuration(&self) -> bool {
        self.as_glue_run_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`RedshiftRunConfiguration`](crate::types::DataSourceConfigurationInput::RedshiftRunConfiguration), extracting the inner [`RedshiftRunConfigurationInput`](crate::types::RedshiftRunConfigurationInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_redshift_run_configuration(&self) -> ::std::result::Result<&crate::types::RedshiftRunConfigurationInput, &Self> {
        if let DataSourceConfigurationInput::RedshiftRunConfiguration(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`RedshiftRunConfiguration`](crate::types::DataSourceConfigurationInput::RedshiftRunConfiguration).
    pub fn is_redshift_run_configuration(&self) -> bool {
        self.as_redshift_run_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

