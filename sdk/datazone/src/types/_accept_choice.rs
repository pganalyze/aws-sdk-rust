// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the prediction (aka, the automatically generated piece of metadata) and the target (for example, a column name) that can be accepted.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcceptChoice  {
    /// <p>Specifies the target (for example, a column name) where a prediction can be accepted.</p>
    pub prediction_target: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the prediction (aka, the automatically generated piece of metadata) that can be accepted.</p>
    pub prediction_choice: ::std::option::Option<i32>,
}
impl  AcceptChoice  {
    /// <p>Specifies the target (for example, a column name) where a prediction can be accepted.</p>
    pub fn prediction_target(&self) -> ::std::option::Option<& str> {
        self.prediction_target.as_deref()
    }
    /// <p>Specifies the prediction (aka, the automatically generated piece of metadata) that can be accepted.</p>
    pub fn prediction_choice(&self) -> ::std::option::Option<i32> {
        self.prediction_choice
    }
}
impl AcceptChoice {
    /// Creates a new builder-style object to manufacture [`AcceptChoice`](crate::types::AcceptChoice).
    pub fn builder() -> crate::types::builders::AcceptChoiceBuilder {
        crate::types::builders::AcceptChoiceBuilder::default()
    }
}

/// A builder for [`AcceptChoice`](crate::types::AcceptChoice).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AcceptChoiceBuilder {
    pub(crate) prediction_target: ::std::option::Option<::std::string::String>,
    pub(crate) prediction_choice: ::std::option::Option<i32>,
}
impl AcceptChoiceBuilder {
    /// <p>Specifies the target (for example, a column name) where a prediction can be accepted.</p>
    pub fn prediction_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prediction_target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the target (for example, a column name) where a prediction can be accepted.</p>
    pub fn set_prediction_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prediction_target = input; self
    }
    /// <p>Specifies the target (for example, a column name) where a prediction can be accepted.</p>
    pub fn get_prediction_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.prediction_target
    }
    /// <p>Specifies the prediction (aka, the automatically generated piece of metadata) that can be accepted.</p>
    pub fn prediction_choice(mut self, input: i32) -> Self {
        self.prediction_choice = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the prediction (aka, the automatically generated piece of metadata) that can be accepted.</p>
    pub fn set_prediction_choice(mut self, input: ::std::option::Option<i32>) -> Self {
        self.prediction_choice = input; self
    }
    /// <p>Specifies the prediction (aka, the automatically generated piece of metadata) that can be accepted.</p>
    pub fn get_prediction_choice(&self) -> &::std::option::Option<i32> {
        &self.prediction_choice
    }
    /// Consumes the builder and constructs a [`AcceptChoice`](crate::types::AcceptChoice).
    pub fn build(self) -> crate::types::AcceptChoice {
        crate::types::AcceptChoice {
            prediction_target: self.prediction_target
            ,
            prediction_choice: self.prediction_choice
            ,
        }
    }
}

