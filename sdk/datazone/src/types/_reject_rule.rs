// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the rule and the threshold under which a prediction can be rejected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RejectRule  {
    /// <p>Specifies whether you want to reject the top prediction for all targets or none.</p>
    pub rule: ::std::option::Option<crate::types::RejectRuleBehavior>,
    /// <p>The confidence score that specifies the condition at which a prediction can be rejected.</p>
    pub threshold: ::std::option::Option<f32>,
}
impl  RejectRule  {
    /// <p>Specifies whether you want to reject the top prediction for all targets or none.</p>
    pub fn rule(&self) -> ::std::option::Option<& crate::types::RejectRuleBehavior> {
        self.rule.as_ref()
    }
    /// <p>The confidence score that specifies the condition at which a prediction can be rejected.</p>
    pub fn threshold(&self) -> ::std::option::Option<f32> {
        self.threshold
    }
}
impl RejectRule {
    /// Creates a new builder-style object to manufacture [`RejectRule`](crate::types::RejectRule).
    pub fn builder() -> crate::types::builders::RejectRuleBuilder {
        crate::types::builders::RejectRuleBuilder::default()
    }
}

/// A builder for [`RejectRule`](crate::types::RejectRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RejectRuleBuilder {
    pub(crate) rule: ::std::option::Option<crate::types::RejectRuleBehavior>,
    pub(crate) threshold: ::std::option::Option<f32>,
}
impl RejectRuleBuilder {
    /// <p>Specifies whether you want to reject the top prediction for all targets or none.</p>
    pub fn rule(mut self, input: crate::types::RejectRuleBehavior) -> Self {
        self.rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether you want to reject the top prediction for all targets or none.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::RejectRuleBehavior>) -> Self {
        self.rule = input; self
    }
    /// <p>Specifies whether you want to reject the top prediction for all targets or none.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::RejectRuleBehavior> {
        &self.rule
    }
    /// <p>The confidence score that specifies the condition at which a prediction can be rejected.</p>
    pub fn threshold(mut self, input: f32) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence score that specifies the condition at which a prediction can be rejected.</p>
    pub fn set_threshold(mut self, input: ::std::option::Option<f32>) -> Self {
        self.threshold = input; self
    }
    /// <p>The confidence score that specifies the condition at which a prediction can be rejected.</p>
    pub fn get_threshold(&self) -> &::std::option::Option<f32> {
        &self.threshold
    }
    /// Consumes the builder and constructs a [`RejectRule`](crate::types::RejectRule).
    pub fn build(self) -> crate::types::RejectRule {
        crate::types::RejectRule {
            rule: self.rule
            ,
            threshold: self.threshold
            ,
        }
    }
}

