// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the results of the <code>SearchTypes</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SearchTypesResultItem {
    /// <p>The asset type included in the results of the <code>SearchTypes</code> action.</p>
    AssetTypeItem(crate::types::AssetTypeItem),
    /// <p>The form type included in the results of the <code>SearchTypes</code> action.</p>
    FormTypeItem(crate::types::FormTypeData),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SearchTypesResultItem {
    /// Tries to convert the enum instance into [`AssetTypeItem`](crate::types::SearchTypesResultItem::AssetTypeItem), extracting the inner [`AssetTypeItem`](crate::types::AssetTypeItem).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_asset_type_item(&self) -> ::std::result::Result<&crate::types::AssetTypeItem, &Self> {
        if let SearchTypesResultItem::AssetTypeItem(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`AssetTypeItem`](crate::types::SearchTypesResultItem::AssetTypeItem).
    pub fn is_asset_type_item(&self) -> bool {
        self.as_asset_type_item().is_ok()
    }
    /// Tries to convert the enum instance into [`FormTypeItem`](crate::types::SearchTypesResultItem::FormTypeItem), extracting the inner [`FormTypeData`](crate::types::FormTypeData).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_form_type_item(&self) -> ::std::result::Result<&crate::types::FormTypeData, &Self> {
        if let SearchTypesResultItem::FormTypeItem(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`FormTypeItem`](crate::types::SearchTypesResultItem::FormTypeItem).
    pub fn is_form_type_item(&self) -> bool {
        self.as_form_type_item().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

