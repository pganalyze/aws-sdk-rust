// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The single sign-on details of the user profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SsoUserProfileDetails  {
    /// <p>The username included in the single sign-on details of the user profile.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The first name included in the single sign-on details of the user profile.</p>
    pub first_name: ::std::option::Option<::std::string::String>,
    /// <p>The last name included in the single sign-on details of the user profile.</p>
    pub last_name: ::std::option::Option<::std::string::String>,
}
impl  SsoUserProfileDetails  {
    /// <p>The username included in the single sign-on details of the user profile.</p>
    pub fn username(&self) -> ::std::option::Option<& str> {
        self.username.as_deref()
    }
    /// <p>The first name included in the single sign-on details of the user profile.</p>
    pub fn first_name(&self) -> ::std::option::Option<& str> {
        self.first_name.as_deref()
    }
    /// <p>The last name included in the single sign-on details of the user profile.</p>
    pub fn last_name(&self) -> ::std::option::Option<& str> {
        self.last_name.as_deref()
    }
}
impl  ::std::fmt::Debug for SsoUserProfileDetails  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SsoUserProfileDetails");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SsoUserProfileDetails {
    /// Creates a new builder-style object to manufacture [`SsoUserProfileDetails`](crate::types::SsoUserProfileDetails).
    pub fn builder() -> crate::types::builders::SsoUserProfileDetailsBuilder {
        crate::types::builders::SsoUserProfileDetailsBuilder::default()
    }
}

/// A builder for [`SsoUserProfileDetails`](crate::types::SsoUserProfileDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SsoUserProfileDetailsBuilder {
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) first_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_name: ::std::option::Option<::std::string::String>,
}
impl SsoUserProfileDetailsBuilder {
    /// <p>The username included in the single sign-on details of the user profile.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The username included in the single sign-on details of the user profile.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input; self
    }
    /// <p>The username included in the single sign-on details of the user profile.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The first name included in the single sign-on details of the user profile.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first name included in the single sign-on details of the user profile.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_name = input; self
    }
    /// <p>The first name included in the single sign-on details of the user profile.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_name
    }
    /// <p>The last name included in the single sign-on details of the user profile.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last name included in the single sign-on details of the user profile.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_name = input; self
    }
    /// <p>The last name included in the single sign-on details of the user profile.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_name
    }
    /// Consumes the builder and constructs a [`SsoUserProfileDetails`](crate::types::SsoUserProfileDetails).
    pub fn build(self) -> crate::types::SsoUserProfileDetails {
        crate::types::SsoUserProfileDetails {
            username: self.username
            ,
            first_name: self.first_name
            ,
            last_name: self.last_name
            ,
        }
    }
}
impl ::std::fmt::Debug for SsoUserProfileDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SsoUserProfileDetailsBuilder");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

