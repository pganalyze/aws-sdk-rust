// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The project that is to be given a subscription grant.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubscribedProjectInput  {
    /// <p>The identifier of the project that is to be given a subscription grant.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
}
impl  SubscribedProjectInput  {
    /// <p>The identifier of the project that is to be given a subscription grant.</p>
    pub fn identifier(&self) -> ::std::option::Option<& str> {
        self.identifier.as_deref()
    }
}
impl SubscribedProjectInput {
    /// Creates a new builder-style object to manufacture [`SubscribedProjectInput`](crate::types::SubscribedProjectInput).
    pub fn builder() -> crate::types::builders::SubscribedProjectInputBuilder {
        crate::types::builders::SubscribedProjectInputBuilder::default()
    }
}

/// A builder for [`SubscribedProjectInput`](crate::types::SubscribedProjectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubscribedProjectInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
}
impl SubscribedProjectInputBuilder {
    /// <p>The identifier of the project that is to be given a subscription grant.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the project that is to be given a subscription grant.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input; self
    }
    /// <p>The identifier of the project that is to be given a subscription grant.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// Consumes the builder and constructs a [`SubscribedProjectInput`](crate::types::SubscribedProjectInput).
    pub fn build(self) -> crate::types::SubscribedProjectInput {
        crate::types::SubscribedProjectInput {
            identifier: self.identifier
            ,
        }
    }
}

