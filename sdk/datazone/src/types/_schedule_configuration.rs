// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the schedule of the data source runs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ScheduleConfiguration  {
    /// <p>The timezone of the data source run. </p>
    pub timezone: ::std::option::Option<crate::types::Timezone>,
    /// <p>The schedule of the data source runs.</p>
    pub schedule: ::std::option::Option<::std::string::String>,
}
impl  ScheduleConfiguration  {
    /// <p>The timezone of the data source run. </p>
    pub fn timezone(&self) -> ::std::option::Option<& crate::types::Timezone> {
        self.timezone.as_ref()
    }
    /// <p>The schedule of the data source runs.</p>
    pub fn schedule(&self) -> ::std::option::Option<& str> {
        self.schedule.as_deref()
    }
}
impl  ::std::fmt::Debug for ScheduleConfiguration  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduleConfiguration");
        formatter.field("timezone", &"*** Sensitive Data Redacted ***");
        formatter.field("schedule", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ScheduleConfiguration {
    /// Creates a new builder-style object to manufacture [`ScheduleConfiguration`](crate::types::ScheduleConfiguration).
    pub fn builder() -> crate::types::builders::ScheduleConfigurationBuilder {
        crate::types::builders::ScheduleConfigurationBuilder::default()
    }
}

/// A builder for [`ScheduleConfiguration`](crate::types::ScheduleConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ScheduleConfigurationBuilder {
    pub(crate) timezone: ::std::option::Option<crate::types::Timezone>,
    pub(crate) schedule: ::std::option::Option<::std::string::String>,
}
impl ScheduleConfigurationBuilder {
    /// <p>The timezone of the data source run. </p>
    pub fn timezone(mut self, input: crate::types::Timezone) -> Self {
        self.timezone = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timezone of the data source run. </p>
    pub fn set_timezone(mut self, input: ::std::option::Option<crate::types::Timezone>) -> Self {
        self.timezone = input; self
    }
    /// <p>The timezone of the data source run. </p>
    pub fn get_timezone(&self) -> &::std::option::Option<crate::types::Timezone> {
        &self.timezone
    }
    /// <p>The schedule of the data source runs.</p>
    pub fn schedule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schedule of the data source runs.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule = input; self
    }
    /// <p>The schedule of the data source runs.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule
    }
    /// Consumes the builder and constructs a [`ScheduleConfiguration`](crate::types::ScheduleConfiguration).
    pub fn build(self) -> crate::types::ScheduleConfiguration {
        crate::types::ScheduleConfiguration {
            timezone: self.timezone
            ,
            schedule: self.schedule
            ,
        }
    }
}
impl ::std::fmt::Debug for ScheduleConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduleConfigurationBuilder");
        formatter.field("timezone", &"*** Sensitive Data Redacted ***");
        formatter.field("schedule", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

