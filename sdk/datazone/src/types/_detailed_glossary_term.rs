// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of a glossary term attached to the inventory asset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DetailedGlossaryTerm  {
    /// <p>The name of a glossary term attached to the inventory asset.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The shoft description of a glossary term attached to the inventory asset.</p>
    pub short_description: ::std::option::Option<::std::string::String>,
}
impl  DetailedGlossaryTerm  {
    /// <p>The name of a glossary term attached to the inventory asset.</p>
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    /// <p>The shoft description of a glossary term attached to the inventory asset.</p>
    pub fn short_description(&self) -> ::std::option::Option<& str> {
        self.short_description.as_deref()
    }
}
impl  ::std::fmt::Debug for DetailedGlossaryTerm  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DetailedGlossaryTerm");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("short_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DetailedGlossaryTerm {
    /// Creates a new builder-style object to manufacture [`DetailedGlossaryTerm`](crate::types::DetailedGlossaryTerm).
    pub fn builder() -> crate::types::builders::DetailedGlossaryTermBuilder {
        crate::types::builders::DetailedGlossaryTermBuilder::default()
    }
}

/// A builder for [`DetailedGlossaryTerm`](crate::types::DetailedGlossaryTerm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DetailedGlossaryTermBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) short_description: ::std::option::Option<::std::string::String>,
}
impl DetailedGlossaryTermBuilder {
    /// <p>The name of a glossary term attached to the inventory asset.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a glossary term attached to the inventory asset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    /// <p>The name of a glossary term attached to the inventory asset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The shoft description of a glossary term attached to the inventory asset.</p>
    pub fn short_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.short_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The shoft description of a glossary term attached to the inventory asset.</p>
    pub fn set_short_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.short_description = input; self
    }
    /// <p>The shoft description of a glossary term attached to the inventory asset.</p>
    pub fn get_short_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.short_description
    }
    /// Consumes the builder and constructs a [`DetailedGlossaryTerm`](crate::types::DetailedGlossaryTerm).
    pub fn build(self) -> crate::types::DetailedGlossaryTerm {
        crate::types::DetailedGlossaryTerm {
            name: self.name
            ,
            short_description: self.short_description
            ,
        }
    }
}
impl ::std::fmt::Debug for DetailedGlossaryTermBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DetailedGlossaryTermBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("short_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}

