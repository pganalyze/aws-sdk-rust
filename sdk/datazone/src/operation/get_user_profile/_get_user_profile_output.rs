// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUserProfileOutput  {
    /// <p>the identifier of the Amazon DataZone domain of which you want to get the user profile.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user profile.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the user profile.</p>
    pub r#type: ::std::option::Option<crate::types::UserProfileType>,
    /// <p>The status of the user profile.</p>
    pub status: ::std::option::Option<crate::types::UserProfileStatus>,
    /// <p>The details of the user profile in Amazon DataZone.</p>
    pub details: ::std::option::Option<crate::types::UserProfileDetails>,
    _request_id: Option<String>,
}
impl  GetUserProfileOutput  {
    /// <p>the identifier of the Amazon DataZone domain of which you want to get the user profile.</p>
    pub fn domain_id(&self) -> ::std::option::Option<& str> {
        self.domain_id.as_deref()
    }
    /// <p>The identifier of the user profile.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The type of the user profile.</p>
    pub fn r#type(&self) -> ::std::option::Option<& crate::types::UserProfileType> {
        self.r#type.as_ref()
    }
    /// <p>The status of the user profile.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::UserProfileStatus> {
        self.status.as_ref()
    }
    /// <p>The details of the user profile in Amazon DataZone.</p>
    pub fn details(&self) -> ::std::option::Option<& crate::types::UserProfileDetails> {
        self.details.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetUserProfileOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl GetUserProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetUserProfileOutput`](crate::operation::get_user_profile::GetUserProfileOutput).
    pub fn builder() -> crate::operation::get_user_profile::builders::GetUserProfileOutputBuilder {
        crate::operation::get_user_profile::builders::GetUserProfileOutputBuilder::default()
    }
}

/// A builder for [`GetUserProfileOutput`](crate::operation::get_user_profile::GetUserProfileOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetUserProfileOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::UserProfileType>,
    pub(crate) status: ::std::option::Option<crate::types::UserProfileStatus>,
    pub(crate) details: ::std::option::Option<crate::types::UserProfileDetails>,
    _request_id: Option<String>,
}
impl GetUserProfileOutputBuilder {
    /// <p>the identifier of the Amazon DataZone domain of which you want to get the user profile.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>the identifier of the Amazon DataZone domain of which you want to get the user profile.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input; self
    }
    /// <p>the identifier of the Amazon DataZone domain of which you want to get the user profile.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the user profile.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user profile.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The identifier of the user profile.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of the user profile.</p>
    pub fn r#type(mut self, input: crate::types::UserProfileType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the user profile.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::UserProfileType>) -> Self {
        self.r#type = input; self
    }
    /// <p>The type of the user profile.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::UserProfileType> {
        &self.r#type
    }
    /// <p>The status of the user profile.</p>
    pub fn status(mut self, input: crate::types::UserProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the user profile.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::UserProfileStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the user profile.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::UserProfileStatus> {
        &self.status
    }
    /// <p>The details of the user profile in Amazon DataZone.</p>
    pub fn details(mut self, input: crate::types::UserProfileDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the user profile in Amazon DataZone.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::UserProfileDetails>) -> Self {
        self.details = input; self
    }
    /// <p>The details of the user profile in Amazon DataZone.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::UserProfileDetails> {
        &self.details
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`GetUserProfileOutput`](crate::operation::get_user_profile::GetUserProfileOutput).
    pub fn build(self) -> crate::operation::get_user_profile::GetUserProfileOutput {
        crate::operation::get_user_profile::GetUserProfileOutput {
            domain_id: self.domain_id
            ,
            id: self.id
            ,
            r#type: self.r#type
            ,
            status: self.status
            ,
            details: self.details
            ,
            _request_id: self._request_id,
        }
    }
}

