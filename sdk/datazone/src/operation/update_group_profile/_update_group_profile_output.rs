// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateGroupProfileOutput  {
    /// <p>The identifier of the Amazon DataZone domain in which a group profile is updated.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the group profile that is updated.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the group profile that is updated.</p>
    pub status: ::std::option::Option<crate::types::GroupProfileStatus>,
    /// <p>The name of the group profile that is updated.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl  UpdateGroupProfileOutput  {
    /// <p>The identifier of the Amazon DataZone domain in which a group profile is updated.</p>
    pub fn domain_id(&self) -> ::std::option::Option<& str> {
        self.domain_id.as_deref()
    }
    /// <p>The identifier of the group profile that is updated.</p>
    pub fn id(&self) -> ::std::option::Option<& str> {
        self.id.as_deref()
    }
    /// <p>The status of the group profile that is updated.</p>
    pub fn status(&self) -> ::std::option::Option<& crate::types::GroupProfileStatus> {
        self.status.as_ref()
    }
    /// <p>The name of the group profile that is updated.</p>
    pub fn group_name(&self) -> ::std::option::Option<& str> {
        self.group_name.as_deref()
    }
}
impl  ::std::fmt::Debug for UpdateGroupProfileOutput  {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGroupProfileOutput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("status", &self.status);
        formatter.field("group_name", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for UpdateGroupProfileOutput {
                                fn request_id(&self) -> Option<&str> {
                                    self._request_id.as_deref()
                                }
                            }
impl UpdateGroupProfileOutput {
    /// Creates a new builder-style object to manufacture [`UpdateGroupProfileOutput`](crate::operation::update_group_profile::UpdateGroupProfileOutput).
    pub fn builder() -> crate::operation::update_group_profile::builders::UpdateGroupProfileOutputBuilder {
        crate::operation::update_group_profile::builders::UpdateGroupProfileOutputBuilder::default()
    }
}

/// A builder for [`UpdateGroupProfileOutput`](crate::operation::update_group_profile::UpdateGroupProfileOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateGroupProfileOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::GroupProfileStatus>,
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateGroupProfileOutputBuilder {
    /// <p>The identifier of the Amazon DataZone domain in which a group profile is updated.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which a group profile is updated.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input; self
    }
    /// <p>The identifier of the Amazon DataZone domain in which a group profile is updated.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the group profile that is updated.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the group profile that is updated.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    /// <p>The identifier of the group profile that is updated.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The status of the group profile that is updated.</p>
    pub fn status(mut self, input: crate::types::GroupProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the group profile that is updated.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GroupProfileStatus>) -> Self {
        self.status = input; self
    }
    /// <p>The status of the group profile that is updated.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GroupProfileStatus> {
        &self.status
    }
    /// <p>The name of the group profile that is updated.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group profile that is updated.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input; self
    }
    /// <p>The name of the group profile that is updated.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
                                    self._request_id = Some(request_id.into());
                                    self
                                }
    
                                pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
                                    self._request_id = request_id;
                                    self
                                }
    /// Consumes the builder and constructs a [`UpdateGroupProfileOutput`](crate::operation::update_group_profile::UpdateGroupProfileOutput).
    pub fn build(self) -> crate::operation::update_group_profile::UpdateGroupProfileOutput {
        crate::operation::update_group_profile::UpdateGroupProfileOutput {
            domain_id: self.domain_id
            ,
            id: self.id
            ,
            status: self.status
            ,
            group_name: self.group_name
            ,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for UpdateGroupProfileOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGroupProfileOutputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("status", &self.status);
        formatter.field("group_name", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}

